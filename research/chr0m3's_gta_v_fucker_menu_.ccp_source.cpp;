//Doesn't this look more familiar Chr0m3?
//So why not post this? It's public....

#include <xtl.h>
#include <xkelib.h>
#include <xhttp.h>
#include <xauth.h>

//#define DEVKIT // defines the menu for DEVKIT also need to do this in Tools.cc  also need to change sleep from 500 to 1400

#ifdef DEVKIT
#include <xbdm.h>
#endif

//#define personal // my personal version with cash drop
//#define printf // Stops printfs working or Comment out to use prints

int GlobalToAddress(int Global, int imm) {
    return *(int *)(0x83d3cb98 + ((Global & 0xFFFFFF) >> 16 & 0xFFFC) + (imm * 4));
}


#include "globals.h"
#include "Tools.h"
#include "GTAVMenu.h"
#include "Input.h"
#include "GTAVNatives.h"
#include "DataManager.h"
#include "ServerCommunicator.h"
#include "EncryptedDWORD.h"
#include "MenuSecurity.h"
#include <cfloat>

int gauge = 0;
int fan;
bool wtf = false;
char *main_text;
bool attachspawn = false;
bool normalspawn = false;
bool custom_plate = false;
bool custom_per = false;
int Var_Pointer;
XOVERLAPPED Overlapped;
WCHAR Username[512];
XOVERLAPPED Overlapped2;
WCHAR Username2[15];
char gamertag;
using std::string;
typedef unsigned long long u64;


EncryptedDWORD *hook1;
EncryptedDWORD *hook2;
EncryptedDWORD *hook3;
EncryptedDWORD *nativeHook;
EncryptedDWORD *printToScreen;
EncryptedDWORD *customGetPedLastWeap;
EncryptedDWORD *customGetModelDim;


//#define Auth // Defines AUTH for hysterias dev
bool rocket_gun = false;
int objecthandle;
float objectcoordx, objectcoordy, objectcoordz, objectheading, objectpitch = 0, objectroll = 0, objectyaw = 0;
int waterobj;
int neonr, neong, neonb;
bool zdrop = false;
int wheel = 0;
int cashclient;
bool alltelefootway = false;
bool telefoot_way = false;
bool objectspawn = false;
bool aiming = false;
int chop;
int rocketid;
bool warp = false;
int animid;
bool nap = false;
bool kidnap = false;
bool aimbot = false;
bool aimbot_active = false;
int model;
//unsigned int uammo = 0x82F02FEC;
//unsigned int uammo2 = 0x82EEB7E4;
unsigned int uammo2 = 0x82F02FEC;
unsigned int uammo = 0x82EEB7E4;
extern "C" const TCHAR szModuleName[] = TEXT("GTAVMenu.dll");

int CarPed;
bool playerInvincibilityActive = false;
bool buttonpressed = false;
bool rainbow = false;
bool invisible = false;
bool superjump = false;
bool superruncheck = false;
bool deagle = false;
bool carvisible = false;
bool playervisible = false;
int myplayerped;
int rainbowcar;
int invisiblecar = false;

bool showingMessageOnScreen = false;
bool fadingMessage = false;
int messageFade = 0;
stack<char*> messageLog;
int showingMessageTimer = 0;
int showingMessageTimerStart = 0;
XVIDEO_MODE VideoMode;
char messageBuffer[256];

float messageTextX = 0.50000000f;
float messageTextY = 0.91000000f;

void ShowMessageOnScreen(char *format, ...) {
	va_list args;
	va_start(args, format);
	vsprintf(messageBuffer, format, args);
	va_end(args);

	showingMessageTimer = 0;
	showingMessageOnScreen = true;
	showingMessageTimerStart = GetTickCount();
	messageFade = 255;
}

void ShowMessageUpdate() {
	// Check to see if we are showing a message on the screen
	if (!showingMessageOnScreen) {
		return;
	}

	if ((GetTickCount() - showingMessageTimerStart) >= 4000) {
		messageFade--;
	}

	if ((GetTickCount() - showingMessageTimerStart) >= 5000) {
		showingMessageOnScreen = false;
		showingMessageTimer = 0;
		ZeroMemory(&messageBuffer, 256);
	}

	PrintToScreen(messageBuffer, messageTextX, messageTextY, 255, 255, 255, messageFade, 0.45f, 0.45f, 1, 0);
}

bool IsPlayerWithinArea(float playerX, float playerY, float areaX, float areaY, float areaSize) {
	float corner1X = areaX;
	float corner1Y = areaY;

	float corner2X = areaX + areaSize;
	float corner2Y = areaY + areaSize;

	float corner3X = areaX + areaSize;
	float corner3Y = areaY;

	float corner4X = areaX;
	float corner4Y = areaY + areaSize;
	
	if (playerX >= corner1X && playerX <= corner2X && playerY >= corner1Y && playerY <= corner2Y) {
		return true;
	}

	return false;
}


int are_you_in_veh_if_so_get_handle() {
if (!is_ped_on_foot(PlayerPedId())) {
int vehicle;
vehicle = GetCarCharIsIn(PlayerPedId(), 0);
return vehicle;
}
return 0;
}
PXOVERLAPPED over;
PMESSAGEBOX_RESULT result;
LPCWSTR* text;

DWORD WINAPI MessageBoxThread(PVOID pvParam) {
	//LPCWSTR Text, Caption;
	text = new LPCWSTR[1];
	text[0] = L"Reboot";

	extern wchar_t *MenuUpdateInfoConverted;
	//MessageBox(MenuUpdateInfoConverted, L"Menu Updated");

	over = new XOVERLAPPED();
	memset(over, 0, sizeof(over));	
	result = new MESSAGEBOX_RESULT();
	memset(result, 0, sizeof(result));

	while(XShowMessageBoxUI(0, L"Menu Updated", MenuUpdateInfoConverted, 1, text, 0, XMB_NOICON, result, over) == ERROR_ACCESS_DENIED)
		Sleep(500);
	while(!XHasOverlappedIoCompleted(over))
		Sleep(500);

	HalReturnToFirmware(HalFatalErrorRebootRoutine);

	return 0;
}

int getFirstFreeSeatIndex(int vehicleHandle){

	int maxSeatNum = get_vehicle_max_number_of_passengers(vehicleHandle);

	for (int i = -1; i < maxSeatNum;i++)
	{
		if (is_vehicle_seat_free(vehicleHandle, i))
		{
			return i;
		}
	}
	return -2;
}
bool follow = false;
void MakePlayerComeTome(int playerID)
{
	float Pos[3];
	if (!network_is_player_active(playerID))
		return;
	int theirPedHandle = GetPlayerHandle(playerID);
	int myPedHandle = PlayerPedId();
	if (!DoesEntityExist(theirPedHandle))
		return;
	follow = true;
}

bool telefoot = false;
void MakePlayerComeTomeFoot(int playerID)
{
	float Pos[3];
	if (!network_is_player_active(playerID))
		return;
	int theirPedHandle = GetPlayerHandle(playerID);
	int myPedHandle = PlayerPedId();
	if (!DoesEntityExist(theirPedHandle))
		return;
	telefoot = true;
}



void MakePlayerEnterMyVehicle(int playerID)
{
	/*if (!network_is_player_active(playerID))
		return;
	int theirpedHandle = GetPlayerHandle(playerID);
	if (is_entity_dead(theirpedHandle))
		return;
	
	int myPedHandle = PlayerPedId();
	
	if (is_ped_on_foot(myPedHandle) || !is_ped_on_foot(theirpedHandle))
	{
		ShowMessageOnScreen("~b~ Can't do task either you aren't in a car or the player isn't on foot!");
		return;
	}
	/*int myVehicle = GetCarCharIsIn(myPedHandle, 0);
	
	int firstFreeSeatInMyVehicle = getFirstFreeSeatIndex(myVehicle);
	ShowMessageOnScreen("~b~ Got free seat %i", firstFreeSeatInMyVehicle);
	if (firstFreeSeatInMyVehicle == -2)
		ShowMessageOnScreen("~b~ No Free Seat");*/
	ShowMessageOnScreen("~b~ Player should now get in your vehicle");
}
bool vm_animm = false;
/*void PlayPedAnim(char *animDictName, char *animName, int playerIndex)
{
	int playerPedHandle = GetPlayerHandle(playerIndex);
	
}*/

void StopPlayerTasks(int playerID){
	int pedHandle = GetPlayerHandle(playerID);
	clear_ped_tasks(pedHandle);
}

unsigned int get_hash_key(char *key)
{
	size_t len = strlen(key);
    unsigned int hash, i;
    for(hash = i = 0; i < len; ++i)
    {
        hash += tolower(key[i]);
        hash += (hash << 10);
        hash ^= (hash >> 6);
    }
    hash += (hash << 3);
    hash ^= (hash >> 11);
    hash += (hash << 15);
    return hash;
}

bool hash_check(char *string, int hash)
{
int hashval = get_hash_key(string);
return (hashval == hash);
}
void secure_check() {
#ifdef PRIVATE
unsigned int scroll_check = -2121299452;
scroll_1 = "Welcome To GTA V Fucker | Private Version | Made By Chr0m3 x MoDz";
#else
unsigned int scroll_check = -1239404636;
scroll_1 = "Welcome To GTA V Fucker | Premium Version | Made By Chr0m3 x MoDz";
#endif
if (!hash_check(scroll_1, scroll_check))
{
text_secure = false;
}
}


unsigned char Numbers[257] = {0x00, 0x01, 0x02, 0x03,
	0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B,
	0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13,
	0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1A, 0x1B,
	0x1C, 0x1D, 0x1E, 0x1F, 0x20, 0x21, 0x22, 0x23,
	0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2A, 0x2B,
	0x2C, 0x2D, 0x2E, 0x2F, 0x30, 0x31, 0x32, 0x33,
	0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B,
	0x3C, 0x3D, 0x3E, 0x3F, 0x40, 0x41, 0x42, 0x43,
	0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B,
	0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53,
	0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x5B,
	0x5C, 0x5D, 0x5E, 0x5F, 0x60, 0x61, 0x62, 0x63,
	0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B,
	0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73,
	0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0x7B,
	0x7C, 0x7D, 0x7E, 0x7F, 0x80, 0x81, 0x82, 0x83,
	0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B,
	0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93,
	0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B,
	0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3,
	0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB,
	0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB2, 0xB3,
	0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB,
	0xBC, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3,
	0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB,
	0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3,
	0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB,
	0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3,
	0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB,
	0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3,
	0xF4, 0xF5, 0xF6, 0xF7, 0xF8, 0xF9, 0xFA, 0xFB,
	0xFC, 0xFD, 0xFE, 0xFF};
bool IsFalseAuthed;


char CAlpha[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
char Alpha[] = "abcdefghijklmnopqrstuvwxyz";
char Num[] = "0123456789";
char T[] = {' ', '\n','\0', '%'};
/*byte AuthedCPU[] = {Numbers[0xC8], Numbers[0xEE], Numbers[0xC4], c8eec4aaf8f7842313313e39dcdcabdc
	Numbers[0xAA], Numbers[0xF8], Numbers[0xF7], Numbers[0x84],
	Numbers[0x23], Numbers[0x13], Numbers[0x31], Numbers[0x3E],
	Numbers[0x39], Numbers[0xDC], Numbers[0xDC], Numbers[0xAB],
	Numbers[0xDC]},*///90 3E 3E 1C BE 1E 95 CF 60 50 7C F0 D0 2F 86 A8
    byte AuthedCPU[] = {Numbers[0x90], Numbers[0x3E], Numbers[0x3E],
	Numbers[0x1C], Numbers[0xBE], Numbers[0x1E], Numbers[0x95],
	Numbers[0xCF], Numbers[0x60], Numbers[0x50], Numbers[0x7C],
	Numbers[0xF0], Numbers[0xD0], Numbers[0x2F], Numbers[0x86],
	Numbers[0xA8]}, 
	ConsoleCPU[0x10],

	AuthedMessage[] = {CAlpha[6], CAlpha[19], CAlpha[0], T[0], CAlpha[12], Alpha[4], Alpha[13], Alpha[20], T[0], CAlpha[0], Alpha[20], Alpha[19], Alpha[7], Alpha[4], Alpha[3],0},

	EntryAdd[4] = {Numbers[0], Numbers[0], Numbers[0x1], Numbers[0x04]},
	CashPointer[4] = {Numbers[0x83], Numbers[0xAE], Numbers[0x7C], Numbers[0x78]}, //0x83B04FE4 TU14 = 0x83B084B4 // TU15 0x83AE7C78

	HvxExpansionInstallBytes[] = {Numbers[0x38], Numbers[0x00], Numbers[0x00], Numbers[0x70],
	Numbers[0x44], Numbers[0x00], Numbers[0x00], Numbers[0x02], Numbers[0x4E], Numbers[0x80],
	Numbers[0x00], Numbers[0x20]},

	HvxExpansionCallBytes[] = {Numbers[0x38], Numbers[0x00], Numbers[0x00], Numbers[0x71],
	Numbers[0x44], Numbers[0x00], Numbers[0x00], Numbers[0x02], Numbers[0x4E], Numbers[0x80], Numbers[0x00], Numbers[0x20]};
	
void GetCoordsInfrontOfSelf(float *OutX, float *OutY, float *OutZ){ // Pos[0], Pos[1]
	int myPedHandle = PlayerPedId();
	float Pos[3], Heading = get_entity_heading(myPedHandle);
	GetEntityCoords(myPedHandle, Pos); //&Pos
	*OutX = Pos[0], *OutY = Pos[1], *OutZ = Pos[2];
	*OutX += (10 * sin(-1 * Heading)); //get_entity_heading(player_ped_iod());
	*OutZ += (10 * cos(-1 * Heading));
}

enum ExlposionType {
 GRENADE,
 GRENADELAUNCHER,
 STICKYBOMB,
 MOLOTOV, // 3
 ROCKET,
 TANKSHELL,
 HI_OCTANE,
 CAR,
 PLANE,
 PETROL_PUMP,
 BIKE,
 DIR_STEAM,
 DIR_FLAME,
 DIR_WATER_HYDRANT,
 DIR_GAS_CANISTER,
 BOAT,
 SHIP_DESTROY,
 TRUCK,
 BULLET,
 SMOKEGRENADELAUNCHER,
 SMOKEGRENADE,
 BZGAS,
 FLARE,
 GAS_CANISTER,
 EXTINGUISHER,
 PROGRAMMABLEAR,
 TRAIN,
 BARREL,
 PROPANE,
 BLIMP,
 DIR_FLAME_EXPLODE,
 TANKER,
 PLANE_ROCKET,
 VEHICLE_BULLET,
 GAS_TANK
};


GTAVMenu *mainMenu;
GTAVMenu *playerOptionsMenu;
GTAVMenu *vehicleOptionMenu;
GTAVMenu *weaponOptionsMenu;
GTAVMenu *onlinePlayers;
GTAVMenu *onlinePlayersSubMenu;
GTAVMenu *CarSpawnerMenu;
GTAVMenu *OnlinePlayerVehicleOptions;
GTAVMenu *OnlinePlayerTeleport;
GTAVMenu *NaughtyStuff;
GTAVMenu *NiceStuff;
GTAVMenu *AllOnlinePlayers;
GTAVMenu *TeleMenu;
GTAVMenu *ModelChanger;
GTAVMenu *MiscOptions;
GTAVMenu *AnimalModels;
GTAVMenu *ObjectAttachments;
GTAVMenu *ExtraNaughtyStuff;
GTAVMenu *ObjectOptions;
GTAVMenu *ObjectOptions1;
GTAVMenu *FunnyCarOptions;
GTAVMenu *ChopAnims;
GTAVMenu *Chr0m3;
GTAVMenu *ModShop;
GTAVMenu *PerformanceMenu;
GTAVMenu *BodyMenu;
GTAVMenu *WheelMenu;
GTAVMenu *ArmourMenu;
GTAVMenu *HighEnd;
GTAVMenu *EngineMenu;
GTAVMenu *TransMenu;
GTAVMenu *BrakesMenu;
GTAVMenu *SuspMenu;
GTAVMenu *ExMenu;
GTAVMenu *FbMenu;
GTAVMenu *RbMenu;
GTAVMenu *SkMenu;
GTAVMenu *InteriorMenu;
GTAVMenu *HoodMenu;
GTAVMenu *GrillMenu;
GTAVMenu *SpoilerMenu;
GTAVMenu *Lowrider;
GTAVMenu *Muscle;
GTAVMenu *Offroad;
GTAVMenu *Sport;
GTAVMenu *SportMenu2;
GTAVMenu *SUV;
GTAVMenu *Tuner;
GTAVMenu *TunerMenu2;
GTAVMenu *Pegasus;
GTAVMenu *Weather;
GTAVMenu *SpeedoMeter;
GTAVMenu *RankUnlock;
GTAVMenu *RGMenu;
GTAVMenu *FWMenu;
GTAVMenu *VWMenu;



Input *menuInputHandler;


bool inputButtonsPressed = false;
bool enableMenu = false;

char *animdict, *anim;



bool RequestNetworkControl(int playerHandle, int carHandle) {
		int Vehicle = GetCarCharIsIn(playerHandle, 0);
		printf("Passed 1\n");
		//int id = network_get_network_id_from_entity(Vehicle);
		printf("Passed 2\n");
		//if (network_does_network_id_exist(id))
		//{
		//ShowMessageOnScreen("~b~ Network ID does exist");
		//}
		if (DoesEntityExist(carHandle) && IsEntityVehicle(carHandle)) {
			if(network_request_control_of_entity(carHandle)) {
				if (network_has_control_of_entity(carHandle)) {
					return true;
				}
			}
		}
	return false;
}

float Vec3DistanceSq(const float *p1, const float *p2) {
	return ((p2[0] - p1[0]) * (p2[0] - p1[0]) + 
		((p2[2] - p1[2]) * (p2[2] - p1[2]) + 
		((p2[1] - p1[1]) * (p2[1] - p1[1]))));
}

float Distance(float p11, float p12, float p13, float p21, float p22, float p23) {
	float p1[] = {p11, p12, p13},
		p2[] = {p21, p22, p23};
	return sqrt(Vec3DistanceSq(p1, p2));
}

float Distance(float *p1, float *p2) {
	return sqrt(Vec3DistanceSq(p1, p2));
}

bool isInDistance(int Handle) {
	float Pos[2][3],
	Dist;
	GetEntityCoords(PlayerPedId(), Pos[0]);
	GetEntityCoords(Handle, Pos[1]);
	Dist = Distance(Pos[0], Pos[1]);
	printf("Distance between you and the player is %f\n", Dist);
	return (Dist <= 100.0f);
}

void TeleportToClient(int Client) {
	float* Location = (float *)(*(int *)((*(int *)(0x83BA3400 + 0x78) + 0x10 + (Client * 0x900)) + 0xF8) + 0x70);
	//printf("Client %i's pos = { %f, %f, %f } \n", Client, Location[0], Location[1], Location[2]);
	memcpy((PVOID)(*(int *)(*(int *)((*(int *)(0x83BA3400 + 0x78) + 0x10 + (0 * 0x900)) + 0xF8) + 0x1C) + 0x40), Location, 0xC);
}

int ToggleInvincibility(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	playerInvincibilityActive = !playerInvincibilityActive;

	ShowMessageOnScreen("~b~ Invincibility = %s\n", playerInvincibilityActive ? "true" : "false");

	SetPlayerInvincible(PlayerId(), playerInvincibilityActive);

	return 0;
}

int irand(int min, int max, int Add = 0) {
	srand(GetTickCount() + Add);
	return min + (rand() % (int)(max - min + 1));
}

void rainbow_car() {
	if (DoesEntityExist(rainbowcar) && IsEntityVehicle(rainbowcar)) {
		int col1 = irand(0, 255, 200);
		int col2 = irand(0, 255, -40);
		int col3 = irand(0, 255, 30);
		int col4 = irand(0, 255, 400);
		set_vehicle_dirt_level(rainbowcar, 0.0f);
		PaintCar(rainbowcar, col1, col2);
		PaintCarExtra(rainbowcar, col3, col4);
	}
}

int ToggleRainbow(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if(rainbow) {
		//printf("\nrainbow = false!\n\n");
		rainbow = false;
		return 0;
	}
	if (is_ped_in_any_vehicle(PlayerPedId()))
	{
	rainbowcar = GetCarCharIsIn(PlayerPedId(), 0);
	if (DoesEntityExist(rainbowcar) && IsEntityVehicle(rainbowcar)) {
		//printf("Attempted to paint vehicle");
		rainbow = true;
	}
	}
	else{
		ShowMessageOnScreen("~b~ You aren't in a vehicle");
	}
	return 0;
}

int PaintChrome(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId()))
	{
	vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
		set_vehicle_dirt_level(vehicle, 0.0f);
		PaintCar(vehicle, 120, 120);
		PaintCarExtra(vehicle, 120, 120);
	}
	}
	else{
		ShowMessageOnScreen("~b~ You aren't in a vehicle");
	}
	return 0;
}

int RandomPaint(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle;
	if (is_ped_in_any_vehicle(PlayerPedId()))
	{
	vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	if (DoesEntityExist(vehicle) && IsEntityVehicle(vehicle)) {
		set_vehicle_dirt_level(vehicle, 0.0f);
		PaintCar(vehicle, irand(0, 255, 200), irand(0, 255, -40));
		PaintCarExtra(vehicle, irand(0, 255, 30), irand(0, 255, 400));
	}
	}
	else{
		ShowMessageOnScreen("~b~ You aren't in a vehicle");
	}
	return 0;
}

int ToggleInvisibleCar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//printf("Invisible Car = %s\n", invisiblecar ? "true" : "false");
	if (is_ped_in_any_vehicle(PlayerPedId()))
	{
	int car;
	car = GetCarCharIsIn(PlayerPedId(), PlayerId());
	if (DoesEntityExist(car) && IsEntityVehicle(car)) {
		printf("IsEntityVehicle == true, ");
		if (!invisiblecar) {
			FixCar(car);
			CarVisibleDamage(car, false);
			set_entity_invincible(car, true);
			set_entity_can_be_damaged(car, false);
			invisiblecar = true;
			//printf("On\n");
			ShowMessageOnScreen("~b~ Invincible car turned on!");
		}
		else if (invisiblecar) {
			CarVisibleDamage(car, true);
			set_entity_can_be_damaged(car, true);
			invisiblecar = false;
			set_entity_invincible(car, false);
			//printf("Off\n");
			ShowMessageOnScreen("~b~ Invincible car turned off!");
		}
		//printf("Car is %svisible\n", invisible ? "" : "in");
		invisible = !invisible;
		//set_entity_coords(car, 0, 0, 0, 0, 0, 0, 1);
	}
	}
	else{
		ShowMessageOnScreen("~b~ You aren't in a vehicle.");
	}
	return 0;
}
bool invincibeloop = false;
int ToggleInvincibleCar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!invincibeloop) {
	ShowMessageOnScreen("~b~ Invincible vehicle loop on, any vehicle you get in to will be invincible");
	invincibeloop = true;
	}
	else if (invincibeloop) {
	ShowMessageOnScreen("~b~ Invincible vehicle loop off");
	invincibeloop = false;
	}
	return 0;
}


void invinciblecarloop()
{
if (is_ped_in_any_vehicle(PlayerPedId()))
	{
	int car;
	car = GetCarCharIsIn(PlayerPedId(), PlayerId());
	if (DoesEntityExist(car) && IsEntityVehicle(car)) {
			CarVisibleDamage(car, false);
			set_entity_invincible(car, true);
			set_entity_can_be_damaged(car, false);
	}
}
}

bool paintingPlayersCarChrome = false;
int paintingPlayersCarChromeIndex = 0;
int paintingPlayersCarChromeTimeout = 310;
int paintingPlayersCarChromeTimeoutCounter = 0;

void PaintOnlinePlayersCarChromeProcess() {
	int subMenuIndex = paintingPlayersCarChromeIndex;
	// check to see if we are at our timeout limit
	if (paintingPlayersCarChromeTimeoutCounter >= paintingPlayersCarChromeTimeout) {
		paintingPlayersCarChrome = false;
		ShowMessageOnScreen("~b~ Failed to paint players car. Retrys timed out.");
		paintingPlayersCarChromeTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		set_vehicle_dirt_level(Vehicle, 0.0f);
		PaintCar(Vehicle, 120, 120);
		PaintCarExtra(Vehicle, 120, 120);
		ShowMessageOnScreen("~b~ Painted players car chrome.");
		paintingPlayersCarChromeTimeoutCounter = 0;
		paintingPlayersCarChrome = false;
	}

	paintingPlayersCarChromeTimeoutCounter++;
}

int PaintOnlinePlayersCarChrome(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int Selected = selectedMenuIndexes->operator[](1),
		handle = GetPlayerHandle(Selected);
	if (!isInDistance(handle)) {
		ShowMessageOnScreen("~b~ Failed, Vehicle is not close enough");
		return 0;
	}
	if (is_ped_in_any_vehicle(handle)) {
		if (!paintingPlayersCarChrome) {
			paintingPlayersCarChromeIndex = Selected;
			paintingPlayersCarChrome = true;
		}
	} else
		ShowMessageOnScreen("~b~ Failed, Player is not in any vehicle.");
	return 0;
}

bool paintingPlayersCar = false;
int paintingPlayersCarIndex = 0;
int paintingPlayersCarTimeout = 310;
int paintingPlayersCarTimeoutCounter = 0;
void PaintOnlinePlayersCarProcess() {
	int subMenuIndex = paintingPlayersCarIndex;

	// check to see if we are at our timeout limit
	if (paintingPlayersCarTimeoutCounter >= paintingPlayersCarTimeout) {
		paintingPlayersCar = false;
		ShowMessageOnScreen("~b~ Failed to paint players car. Retrys timed out.");
		paintingPlayersCarTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		PaintCar(Vehicle, irand(0, 255, 1), irand(0, 255, 2));
		PaintCarExtra(Vehicle, irand(0, 255, 3), irand(0, 255, 4));
		set_vehicle_dirt_level(Vehicle, 0.0f);
		ShowMessageOnScreen("~b~ Painted players car");
		paintingPlayersCarTimeoutCounter = 0;
		paintingPlayersCar = false;
	}

	paintingPlayersCarTimeoutCounter++;
}

int PaintOnlinePlayersCar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!paintingPlayersCar) {
		paintingPlayersCarIndex = selectedMenuIndexes->operator[](1);
		paintingPlayersCar = true;
	}

	return 0;
}

bool explodingPlayersCar = false;
int explodingPlayersCarIndex = 0;
int explodingPlayersCarTimeout = 310;
int explodingPlayersCarTimeoutCounter = 0;

void ExplodeOnlinePlayerVehicleProcess() {
	int subMenuIndex = explodingPlayersCarIndex;

	// check to see if we are at our timeout limit
	if (explodingPlayersCarTimeoutCounter >= explodingPlayersCarTimeout) {
		explodingPlayersCar = false;
		ShowMessageOnScreen("~b~ Failed to explode players car. Retrys timed out.");
		explodingPlayersCarTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		set_vehicle_petrol_tank_health(Vehicle, -1);
		set_vehicle_undriveable(Vehicle, 1);
		ShowMessageOnScreen("~b~ Players car can no longer be driven!.");
		explodingPlayersCarTimeoutCounter = 0;
		explodingPlayersCar = false;
	}

	explodingPlayersCarTimeoutCounter++;
}

int ExplodeOnlinePlayerVehicle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	
	if (!explodingPlayersCar) {
		explodingPlayersCarIndex = selectedMenuIndexes->operator[](1);
		explodingPlayersCar = true;
	}

	return 0;
}

bool pinkPlayersCar = false;
int pinkPlayersCarIndex = 0;
int pinkPlayersCarTimeout = 310;
int pinkPlayersCarTimeoutCounter = 0;

void PinkOnlinePlayerVehicleProcess() {
	int subMenuIndex = pinkPlayersCarIndex;

	// check to see if we are at our timeout limit
	if (pinkPlayersCarTimeoutCounter >= pinkPlayersCarTimeout) {
		pinkPlayersCar = false;
		ShowMessageOnScreen("~b~ Failed to fuck up players car. Retrys timed out.");
		pinkPlayersCarTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		set_vehicle_doors_locked(Vehicle, 4);
		PaintCar(Vehicle, 136, 136);
		PaintCarExtra(Vehicle, 136, 136);
		set_vehicle_petrol_tank_health(Vehicle, -1);
		set_engine_health(Vehicle, -1);
		ShowMessageOnScreen("~b~ Revenge served in pink!.");
		pinkPlayersCarTimeoutCounter = 0;
		pinkPlayersCar = false;
	}

	pinkPlayersCarTimeoutCounter++;
}

int PinkOnlinePlayerVehicle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	
	if (!pinkPlayersCar) {
		pinkPlayersCarIndex = selectedMenuIndexes->operator[](1);
		pinkPlayersCar = true;
	}

	return 0;
}

bool launchingPlayersCar = false;
int launchingPlayersCarIndex = 0;
int launchingPlayersCarTimeout = 310;
int launchingPlayersCarTimeoutCounter = 0;

void SendPlayersCarToSpaceProcess() {
	int subMenuIndex = launchingPlayersCarIndex;

	// check to see if we are at our timeout limit
	if (launchingPlayersCarTimeoutCounter >= launchingPlayersCarTimeout) {
		launchingPlayersCar = false;
		ShowMessageOnScreen("~b~ Failed to launch players car. Retrys timed out.");
		launchingPlayersCarTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		apply_force_to_entity(Vehicle, true, 0, 0, 150, 0, 0, 0, true, true, true, true, false, true);
		ShowMessageOnScreen("~b~ Sent players car to space");
		launchingPlayersCarTimeoutCounter = 0;
		launchingPlayersCar = false;
	}

	launchingPlayersCarTimeoutCounter++;
}

int SendPlayersCarToSpace(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!launchingPlayersCar) {
		launchingPlayersCarIndex = selectedMenuIndexes->operator[](1);
		launchingPlayersCar = true;
	}

	return 0;
}

bool isrc = false;
int Savedvehicle[2];// {attached handle, your cars handle}

bool detachTowTruckCar = false;
int detachTowTruckIndex = 0;
int detachTowTruckTimeout = 310;
int detachTowTruckTimeoutCounter = 0;

void DetachTowTruckProcess() {
	int subMenuIndex = detachTowTruckIndex;

	// check to see if we are at our timeout limit
	if (detachTowTruckTimeoutCounter >= detachTowTruckTimeout) {
		detachTowTruckCar = false;
		ShowMessageOnScreen("~b~ Failed to detach tow from players car. Retrys timed out.");
		detachTowTruckTimeoutCounter = 0;
		return;
	}

	int Handle = GetCarCharIsIn(PlayerPedId(), PlayerId());
	int Player = GetPlayerHandle(subMenuIndex);

	if(Savedvehicle[1] != Handle || Savedvehicle[1] == 0 || !DoesEntityExist(Savedvehicle[0])) {
		detachTowTruckCar = false;
		detachTowTruckTimeoutCounter = 0;
		return;
	}

	if (RequestNetworkControl(Player, Savedvehicle[0])) {
		detach_entity(Savedvehicle[0]);
		set_vehicle_doors_locked(Savedvehicle[0], 0);

		if (isrc) {
			set_entity_visible(Savedvehicle[1], true);
			set_entity_collision(Savedvehicle[0], true);
		}

		set_entity_collision(Savedvehicle[0], true);

		ShowMessageOnScreen("~b~ Detach success");
		detachTowTruckTimeoutCounter = 0;

		detachTowTruckCar = false;
	}

	detachTowTruckTimeoutCounter++;
}

int DetachTowTruck(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	
	if (!detachTowTruckCar) {
		detachTowTruckIndex = selectedMenuIndexes->operator[](1);
		detachTowTruckCar = true;
	}

	return 0;
}

bool towTruckCar = false;
int towTruckCarIndex = 0;
int towTruckCarTimeout = 310;
int towTruckCarTimeoutCounter = 0;

void TowTruckProcess() {
	int subMenuIndex = towTruckCarIndex;

	// check to see if we are at our timeout limit
	if (towTruckCarTimeoutCounter >= towTruckCarTimeout) {
		towTruckCar = false;
		ShowMessageOnScreen("~b~ Failed to tow players car. Retrys timed out.");
		towTruckCarTimeoutCounter = 0;
		return;
	}

	int Handle = GetPlayerHandle(subMenuIndex);
	//int Player = GetPlayerHandle(subMenuIndex);
	//int Vehicle = GetCarCharIsIn(Player, 0);

	// Ours and victims car handles
	Savedvehicle[0] = GetCarCharIsIn(Handle, subMenuIndex);
	Savedvehicle[1] = GetCarCharIsIn(PlayerPedId(), PlayerId());

		if (Savedvehicle[0] == Savedvehicle[1])
	{
		ShowMessageOnScreen("~b~ You are trying to tow truck your own car retard, If we allowed this we would freeze.");
		towTruckCarTimeoutCounter = 0;
		towTruckCar = false;
		return;
	}

	// Our position
	float Position[3];
    GetEntityCoords(Handle, Position);
	printf("Player X = %f\n", Position[0]);
    printf("Player Y = %f\n", Position[1]);
	printf("Player Z = %f\n", Position[2]);

	if (RequestNetworkControl(Handle, Savedvehicle[0])) {
		set_vehicle_doors_locked(Savedvehicle[0], 4);
		attach_entity_to_entity(Savedvehicle[0], Savedvehicle[1], 0, 0, -3.9, 0, 0, 0, 0);

		ShowMessageOnScreen("~b~ Attached player to vehicle");
		towTruckCarTimeoutCounter = 0;

		towTruckCar = false;
	}

	towTruckCarTimeoutCounter++;
}

int TowTruck(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!towTruckCar) {
		towTruckCarIndex = selectedMenuIndexes->operator[](1);
		towTruckCar = true;
	}

	return 0;
}

bool rcCar = false;
int rcCarIndex = 0;
int rcCarTimeout = 310;
int rcCarTimeoutCounter = 0;

void RcCarProcess() {
	int subMenuIndex = rcCarIndex;

	// check to see if we are at our timeout limit
	if (rcCarTimeoutCounter >= rcCarTimeout) {
		rcCar = false;
		ShowMessageOnScreen("~b~ Failed to rc players car. Retrys timed out.");
		rcCarTimeoutCounter = 0;
		return;
	}

	int Handle = GetPlayerHandle(subMenuIndex);
	//int Player = GetPlayerHandle(subMenuIndex);
	//int Vehicle = GetCarCharIsIn(Player, 0);

	// Ours and victims car handles
	Savedvehicle[0] = GetCarCharIsIn(Handle, subMenuIndex);
	Savedvehicle[1] = GetCarCharIsIn(PlayerPedId(), PlayerId());

		if (Savedvehicle[0] == Savedvehicle[1])
	{
		ShowMessageOnScreen("~b~ You are trying to remote control your own car retard, If we allowed this we would freeze.");
		rcCarTimeoutCounter = 0;
		rcCar = false;
		return;
	}

	if (RequestNetworkControl(Handle, Savedvehicle[0])) {
		if (is_entity_visible(Savedvehicle[1])) {
			set_entity_visible(Savedvehicle[1], false);
		}

		set_vehicle_doors_locked(Savedvehicle[0], 4);
		attach_entity_to_entity(Savedvehicle[0], Savedvehicle[1], 0, 0, 0, 0, 0, 0, 0);
		set_entity_visible(Savedvehicle[0], true);

		ShowMessageOnScreen("~b~ RC car success");
		rcCarTimeoutCounter = 0;

		isrc = true;
		rcCar = false;
	}

	rcCarTimeoutCounter++;
}

int RcCar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	
	if (!rcCar) {
		rcCarIndex = selectedMenuIndexes->operator[](1);
		rcCar = true;
	}

	return 0;
}

bool lockPlayersCar = false;
int lockPlayersCarIndex = 0;
int lockPlayersCarTimeout = 310;
int lockPlayersCarTimeoutCounter = 0;

void LockPlayersDoorsProcess() {
	int subMenuIndex = lockPlayersCarIndex;

	// check to see if we are at our timeout limit
	if (lockPlayersCarTimeoutCounter >= lockPlayersCarTimeout) {
		lockPlayersCar = false;
		ShowMessageOnScreen("~b~ Failed to lock players car. Retrys timed out.");
		lockPlayersCarTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		set_vehicle_doors_locked(Vehicle, 4);
		ShowMessageOnScreen("~b~ Locked players doors");
		lockPlayersCarTimeoutCounter = 0;
		lockPlayersCar = false;
	}

	lockPlayersCarTimeoutCounter++;
}

int LockPlayersDoors(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!lockPlayersCar) {
		lockPlayersCarIndex = selectedMenuIndexes->operator[](1);
		lockPlayersCar = true;
	}

	return 0;
}

bool ChangePlate = false;
int ChangePlateIndex = 0;
int ChangePlateTimeout = 310;
int ChangePlateTimeoutCounter = 0;

void ChangePlateProccess() {
	int subMenuIndex = ChangePlateIndex;

	// check to see if we are at our timeout limit
	if (ChangePlateTimeoutCounter >= ChangePlateTimeout) {
		ChangePlate = false;
		ShowMessageOnScreen("~b~ Failed to change plate. Retrys timed out.");
		ChangePlateTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		//set_vehicle_doors_locked(Vehicle, 4);
		set_number_plate(Vehicle, " IM GAY ");
		ShowMessageOnScreen("~b~ Changed players plate to IM GAY");
		ChangePlateTimeoutCounter = 0;
		ChangePlate = false;
	}

	ChangePlateTimeoutCounter++;
}

int ChangePlatePlayer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	CarPed = selectedMenuIndexes->operator[](1);
	int player = selectedMenuIndexes->operator[](1);
	animid = selectedMenuIndexes->operator[](1);
	int ped = GetPlayerHandle(player);
	int Vehicle = GetCarCharIsIn(ped, 0);
	float Pos[3];
	GetEntityCoords(ped, Pos);
	set_entity_coords(PlayerPedId(), Pos[0], Pos[1], Pos[2]);
	kidnap = true;
	warp = true;
	set_vehicle_doors_locked(Vehicle, 4);
	//ShowMessageOnScreen("~b~ Not completed");
	return 0;
}

bool KickinggPlayer = false;
int KickingPlayerIndex = 0;
int KickingPlayerTimeout = 310;
int KickingPlayerTimeoutCounter = 0;
void LMAOProccess()
{
int subMenuIndex = KickingPlayerIndex;
	// check to see if we are at our timeout limit
	if (KickingPlayerTimeoutCounter >= KickingPlayerTimeout) {
		KickinggPlayer = false;
		ShowMessageOnScreen("~b~ Failed to control vehicle. Retrys timed out.");
		KickingPlayerTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
	    set_vehicle_doors_locked(Vehicle, 4);
		ShowMessageOnScreen("~b~ Locked player out of their personal vehicle!");
		KickingPlayerTimeoutCounter = 0;

		KickinggPlayer = false;
	}

	KickingPlayerTimeoutCounter++;
}

int LMAO(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	CarPed = selectedMenuIndexes->operator[](1);
	int player = selectedMenuIndexes->operator[](1);
	animid = selectedMenuIndexes->operator[](1);
	int ped = GetPlayerHandle(player);
	int Vehicle = GetCarCharIsIn(ped, 0);
	float Pos[3];
	GetEntityCoords(ped, Pos);
	set_entity_coords(PlayerPedId(), Pos[0], Pos[1], Pos[2]);
	if (is_ped_on_foot(ped)) {
	ShowMessageOnScreen("~b~ Player isn't in any vehicle, Teleporting you to them anyway");
	return 0;
	}
    if (!KickinggPlayer) {
		KickinggPlayer = true;
		KickingPlayerIndex = selectedMenuIndexes->operator[](1);
	}
	kidnap = true;
	//warp = true;
	//ShowMessageOnScreen("~b~ Not completed");
	return 0;
}

bool teleportingPlayer = false;
int teleportingPlayerIndex = 0;
int teleportingPlayerTimeout = 310;
int teleportingPlayerTimeoutCounter = 0;

void TeleportPlayerProcess() {
	int subMenuIndex = teleportingPlayerIndex;

	// check to see if we are at our timeout limit
	if (teleportingPlayerTimeoutCounter >= teleportingPlayerTimeout) {
		teleportingPlayer = false;
		ShowMessageOnScreen("~b~ Failed to teleport player. Retrys timed out.");
		teleportingPlayerTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		float Position[3];
		GetEntityCoords(PlayerPedId(), Position);

		set_entity_coords(Vehicle, Position[0], Position[1] + 2.0f, Position[2] + 12.0f, 0, 0, 0, 1);

		ShowMessageOnScreen("~b~ Teleported player");
		teleportingPlayerTimeoutCounter = 0;

		teleportingPlayer = false;
	}

	teleportingPlayerTimeoutCounter++;
}

int TeleportPlayerToMe(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	// Check to see if we are in the process of teleporting a player
	if (!teleportingPlayer) {
		teleportingPlayer = true;
		teleportingPlayerIndex = selectedMenuIndexes->operator[](1);
	}

	return 0;
}

bool Delete = false;
int DeleteIndex = 0;
int DeleteTimeout = 310;
int DeleteTimeoutCounter = 0;
int deletevehicle;
bool deleted = false;
void DeleteProcess() {
	int subMenuIndex = teleportingPlayerIndex;

	// check to see if we are at our timeout limit
	if (DeleteTimeoutCounter >= DeleteTimeout) {
		Delete = false;
		ShowMessageOnScreen("~b~ Failed to delete vehicle. Retrys timed out.");
		DeleteTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		//int car = get_entity_model(Vehicle);
		deletevehicle = Vehicle;
		deleted = true;
		ShowMessageOnScreen("~b~ Deleted Players Vehicle");
		DeleteTimeoutCounter = 0;
		Delete = false;
	}

	DeleteTimeoutCounter++;
}

int DeleteVehicle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	// Check to see if we are in the process of teleporting a player
	if (!Delete) {
		Delete = true;
		DeleteIndex = selectedMenuIndexes->operator[](1);
	}

	return 0;
}


bool da = false;
bool air = false;
bool dw = false;
bool waterwheel = false;
int DriveWater(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!dw) {
	dw = true;
	da = false;
	ShowMessageOnScreen("~b~ Drive on water on");
	model = -1003748966;
    objectspawn = true;
	waterwheel = true;
	air = false;
	}
	else if (dw) {
	dw = false;
	ShowMessageOnScreen("~b~ Drive on water off");
	}

	return 0;
}
bool driveairz = false;
bool speedo = false;
float speedmul;
int DriveAirGz(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!speedo) {
	ShowMessageOnScreen("~b~ Speedometer turned on");
	speedmul = 4.55;
	//driveairz = true;
	//zdrop = true;
	speedo = true;
	}
	else if (speedo) {
    ShowMessageOnScreen("~b~ Speedometer turned off");
	//driveairz = false;
	//zdrop = false;
	speedo = false;
	}
	return 0;
}

int DriveAir(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!da) {
	dw = false;
	da = true;
	float Pos[3];
	GetEntityCoords(GetCarCharIsIn(PlayerPedId(), 0), Pos); // 370 
	set_entity_coords(GetCarCharIsIn(PlayerPedId(), 0), Pos[0], Pos[1], 370, 1, 0, 0, 1);
	ShowMessageOnScreen("~b~ Drive in air on");
	model = -1003748966;
    objectspawn = true;
	waterwheel = true;
	air = true;
	}
	else if (da) {
	da = false;
	air = false;
	float gz;
	if (zdrop) { 
	float Pos[3];
	GetEntityCoords(GetCarCharIsIn(PlayerPedId(), 0), Pos);
	if(get_ground_z_for_3d_coord(Pos[0], Pos[1], 600.0f, &Pos[2])) {
	set_entity_coords(GetCarCharIsIn(PlayerPedId(), 0), Pos[0], Pos[1], Pos[2], 1, 0, 0, 1);
	}
	}
	ShowMessageOnScreen("~b~ Drive in air off");
	}
	return 0;
}

void drive_water() {
	//if (is_entity_in_water(GetCarCharIsIn(PlayerPedId(), 0))) {
	float Pos[3];
	GetEntityCoords(GetCarCharIsIn(PlayerPedId(), 0), Pos);
	if (!air){
	set_entity_coords(waterobj, Pos[0], Pos[1], - 0.9, 1, 0, 0, 1);
	}
	else {
	set_entity_coords(waterobj, Pos[0], Pos[1], 360, 1, 0, 0, 1);
	}
	set_entity_rotation(waterobj,180,90,180,2,1);
	set_entity_visible(waterobj, false);
	freeze_entity_position(waterobj, true);
}

bool fixPlayersCar = false;
int fixPlayersCarIndex = 0;
int fixPlayersCarTimeout = 310;
int fixPlayersCarTimeoutCounter = 0;

void FixVehicleOnlineProcess() {
	int subMenuIndex = fixPlayersCarIndex;

	// check to see if we are at our timeout limit
	if (fixPlayersCarTimeoutCounter >= fixPlayersCarTimeout) {
		fixPlayersCar = false;
		ShowMessageOnScreen("~b~ Failed to fix players car. Retrys timed out.");
		fixPlayersCarTimeoutCounter = 0;
		return;
	}

	int Player = GetPlayerHandle(subMenuIndex);
	int Vehicle = GetCarCharIsIn(Player, 0);

	if (RequestNetworkControl(Player, Vehicle)) {
		FixCar(Vehicle);
		set_vehicle_dirt_level(Vehicle, 0.0f);
		ShowMessageOnScreen("~b~ Fixed players car.");
		fixPlayersCarTimeoutCounter = 0;
		fixPlayersCar = false;
	}

	fixPlayersCarTimeoutCounter++;
}

int FixVehicleOnline(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	// Check to see if we are in the process of teleporting a player
	if (!fixPlayersCar) {
		fixPlayersCar = true;
		fixPlayersCarIndex = selectedMenuIndexes->operator[](1);
	}

	return 0;
}

int SuperRun(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	myplayerped = GetPlayerHandle(PlayerId());
    //Sleep(500);
    ShowMessageOnScreen("~b~ Toggled super run.");
    superruncheck = !superruncheck;//toggle
	return 0;
}

void super_run() {
	if (menuInputHandler->AButtonDown()) {
		//printf("running\n");
		apply_force_to_entity(/*myplayerped*/PlayerPedId(), true, 0, 3, 0, 0, 0, 0, true, true, true, true, false, true);
	}
}

int SuperJump(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	myplayerped = GetPlayerHandle(PlayerId()); 
    //Sleep(500);
    ShowMessageOnScreen("~b~ Toggled super jump.");
    superjump = !superjump;//toggle
	return 0;
}

bool superJumping = false;

void super_jump()
{
	if (!buttonpressed) {
		if (menuInputHandler->XButtonDown() && !superJumping) {
			//printf("X button pressed\n");
			apply_force_to_entity(myplayerped, true, 0, 0, 15, 0, 0, 0, true, true, true, true, false, true);
			//Sleep(600);
			//buttonpressed = false;
			//buttonpressed = true;
			superJumping = true;
		}
		else if (menuInputHandler->XButtonDown()) {
			superJumping = false;
		}
	}
}
int scriptsetModel = -1;
bool car = false;
int SpawnSultan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
    car = true;
	scriptsetModel = 0x39DA2754; // sultan
	//ShowMessageOnScreen("~b~ This doesn't work");
	return 0;
}
int SpawnFuto(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
    car = true;
	scriptsetModel = 2016857647; // sultan
	//ShowMessageOnScreen("~b~ This doesn't work");
	return 0;
}
int SpawnBuffalo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
    car = true;
	scriptsetModel = 736902334; // sultan
	//ShowMessageOnScreen("~b~ This doesn't work");
	return 0;
}
int SpawnRoos(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
    car = true;
	scriptsetModel = 117401876; // sultan
	//ShowMessageOnScreen("~b~ This doesn't work");
	return 0;
}
bool bguard = false;
int ChopSpawn(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	bguard = true;
	return 0;
}

bool movement = false;
char* anim1;
int DrunkMode(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	movement = true;
	anim1 = "move_m@drunk@verydrunk";
	ShowMessageOnScreen("~b~ Drunk mode activated");
	return 0;
}

int NormalM(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	movement = true;
	anim1 = "move_m@generic";
	ShowMessageOnScreen("~b~ Normal male mode activated");
	return 0;
}

int NormalF(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	movement = true;
	anim1 = "move_f@generic";
	ShowMessageOnScreen("~b~ Normal female mode activated");
	return 0;
}
bool anattack = false;
int AnimalAttack(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	//ShowMessageOnScreen("~b~ Whenever you change to a cougar or dog you can now attack people!");
	anattack = true;
	return 0;
}

int TeleportToOnlinePlayer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			float Position[3];
			GetEntityCoords(Handle, Position);
			set_entity_coords(myvehicle, Position[0], Position[1], Position[2], 0, 0, 0, 1);
		}
		else {
			float Position[3];
			GetEntityCoords(Handle, Position);
			set_entity_coords(myhandle, Position[0], Position[1], Position[2], 0, 0, 0, 1);
		}
		ShowMessageOnScreen("~b~ Teleported to online player.");
		return 0;
	}
}

int BlowUpOnlinePlayer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);

	float Position[3];
    GetEntityCoords(Handle, Position);
	AddExplosion(Position[0], Position[1], Position[2], BLIMP, FLT_MAX, true, false, 0.0f);
	AddExplosion(Position[0], Position[1], Position[2], TRAIN, FLT_MAX, true, false, 0.0f);
	ShowMessageOnScreen("~b~ Blew player up");

	return 0;
}

int BlowUpOnlinePlayerWater(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);

	float Position[3];
    GetEntityCoords(Handle, Position);
	AddExplosion(Position[0], Position[1], Position[2] - 0.8f, DIR_WATER_HYDRANT, 8.0f, true, false, 0.0f);
	ShowMessageOnScreen("~b~ Blasted player with water.");

	return 0;
}

int BlowUpOnlinePlayerInvisible(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);

	float Position[3];
    GetEntityCoords(Handle, Position);
	AddExplosion(Position[0], Position[1], Position[2], BLIMP, FLT_MAX, false, true, 0.0f);
	AddExplosion(Position[0], Position[1], Position[2], TRAIN, FLT_MAX, false, true, 0.0f);
	ShowMessageOnScreen("~b~ Invisible Nuke!");

	return 0;
}

int ChopAttack(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
/*
	task_combat_ped(chop, Handle, 0, 0x10);*/
	ShowMessageOnScreen("~b~ Not completed yet!");
	return 0;
}
int trollcli;
bool cash2, cash1 = false;
int FakeMes0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	trollcli = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(trollcli);
	cash2 = true;
	return 0;
}

int FakeMes1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	trollcli = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(trollcli);
	cash1 = true;
	return 0;
}


int FixMyCar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			FixCar(myvehicle);
			set_vehicle_dirt_level(myvehicle, 0.0f);
			ShowMessageOnScreen("~b~ Fixed Car.");
		}
	}
	else{
		ShowMessageOnScreen("~b~ You aren't in a vehicle.");
	}
	return 0;
}
bool collision = false;
int SetCarCol(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle) && !collision) {
			set_entity_collision(myvehicle, false);
			collision = true;
			ShowMessageOnScreen("~b~ Toggled vehicle collision off");
		}
		else if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle) && collision) {
			set_entity_collision(myvehicle, true);
			collision = false;
			ShowMessageOnScreen("~b~ Toggled vehicle collision on");
		}
	}
	else{
		ShowMessageOnScreen("~b~ You aren't in a vehicle.");
	}
	return 0;
}
bool lowered = false;
int lower = 0;
int LowerVehicle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	if (is_ped_in_any_vehicle(PlayerPedId()))
	{
			if (lower == 0)
			{
			lowered = true;
			lower = 1;
			ShowMessageOnScreen("~b~ Lowered car turned on.");
			}
			else if (lower == 1)
			{
            lowered = false;
			lower = 0;
			ShowMessageOnScreen("~b~ Lowered car turned off.");
			}
	}
	else{
		ShowMessageOnScreen("~b~ You aren't in a vehicle.");
	}
	return 0;
}

bool wanted = false;
int wantedvar = 0;
int WantedPlayer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
			if (wantedvar == 0)
			{
			wanted = true;
			wantedvar = 1;
			ShowMessageOnScreen("~b~ Cops have been turned off");
			}
			else if (wantedvar == 1)
			{
            wanted = false;
			wantedvar = 0;
			ShowMessageOnScreen("~b~ Cops turned back on!");
			}
	return 0;
}

void wantedloop() {
set_player_wanted_level(PlayerId(), 0);
}

bool field = false;
int fieldvar = 0;
int FieldToggle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
			if (fieldvar == 0)
			{
			field = true;
			fieldvar = 1;
			ShowMessageOnScreen("~b~ Force Field on");
			SetPlayerInvincible(PlayerId(), true);
			}
			else if (fieldvar == 1)
			{
            field = false;
			fieldvar = 0;
			ShowMessageOnScreen("~b~ Force Field off");
			SetPlayerInvincible(PlayerId(), false);
			}
	return 0;
}

void fieldloop() {
	float Position[3];
    GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
	AddExplosion(Position[0], Position[1], Position[2], BLIMP, FLT_MAX, false, true, 0.0f);
	AddExplosion(Position[0], Position[1], Position[2], TRAIN, FLT_MAX, false, true, 0.0f);
}



void lowerloop()
{
int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			if (lower == 1)
			{
            apply_force_to_entity(myvehicle, true, 0, 0, -0.2, 0, 0, 0, true, true, true, true, false, true);
			}
		}
	}
}

int SetCarInvisible(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			//FixCar(myvehicle);
			if (!carvisible)
			{
			set_entity_visible(myvehicle, false);
			ShowMessageOnScreen("~b~ Car is invisible");
			carvisible = true;
			}
			else if (carvisible)
			{
			set_entity_visible(myvehicle, true);
			ShowMessageOnScreen("~b~ Car is visible");
			carvisible = false;
			}
		}
	}
	else{
		ShowMessageOnScreen("~b~ You aren't in a vehicle.");
	}
	return 0;
}

int BurnOnlinePlayer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	//StartEntityFire(Handle);
	ShowMessageOnScreen("~b~ Burned online player");

	return 0;
}

int KickOnlinePlayer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	network_session_kick_player(subMenuIndex);
	ShowMessageOnScreen("~b~ Kicked online player");

	return 0;
}
int OnlinePlayerWanted(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
		set_player_wanted_level(PlayerId(), 5);
		set_player_wanted_level_now(PlayerId(), 5);
	/*
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	float Pos[3];
	GetEntityCoords(PlayerPedId(), Pos);
	if (is_ped_on_foot(GetPlayerHandle(subMenuIndex))) 
	ShowMessageOnScreen("~b~ Player isn't in a vehicle sorry");
	
	else {
		set_player_wanted_level(PlayerId(), 5);
		set_player_wanted_level_now(PlayerId(), 5);
		warp = true;
		set_entity_coords(GetPlayerHandle(PlayerId()), Pos[0], Pos[1], Pos[2], 0, 0, 0, 1);
		set_player_wanted_level(PlayerId(), 0);
		set_player_wanted_level_now(PlayerId(), 0);
		ShowMessageOnScreen("~b~ Gave player 5 star wanted level");
	}*/
	ShowMessageOnScreen("~b~ This isn't quite working yet, Teleport in to their car to give them your wanted level");
	return 0;
}
bool fwloaded = false;
bool fwvcheck = false;
char *fexp = "";
float fcoords[3];
int FireWorkExp(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
int subMenuIndex = selectedMenuIndexes->operator[](1);
GetEntityCoords(GetPlayerHandle(subMenuIndex), fcoords);
fexp = "scr_indep_firework_fountain";
fwvcheck = true;
return 0;
}
int FireWorkExp1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
int subMenuIndex = selectedMenuIndexes->operator[](1);
GetEntityCoords(GetPlayerHandle(subMenuIndex), fcoords);
fexp = "scr_indep_firework_shotburst";
fwvcheck = true;
return 0;
}
int FireWorkExp2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
int subMenuIndex = selectedMenuIndexes->operator[](1);
GetEntityCoords(GetPlayerHandle(subMenuIndex), fcoords);
fexp = "scr_indep_firework_starburst";
fwvcheck = true;
return 0;
}
int FireWorkExp3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
int subMenuIndex = selectedMenuIndexes->operator[](1);
GetEntityCoords(GetPlayerHandle(subMenuIndex), fcoords);
fexp = "scr_indep_firework_trailburst";
fwvcheck = true;
return 0;
}
char *fexp1 = "";
int FireWorkExp_0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
fexp1 = "scr_indep_firework_fountain";
return 0;
}
int FireWorkExp_1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
fexp1 = "scr_indep_firework_shotburst";
return 0;
}
int FireWorkExp_2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
fexp1 = "scr_indep_firework_starburst";
return 0;
}
int FireWorkExp_3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
fexp1 = "scr_indep_firework_trailburst";
return 0;
}
float fr, fg, fb;
float fwsize;
int FWOpt(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
fwsize = 1.0;
return 0;
}
int FWOpt1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
fwsize = 3.0;
return 0;
}
int FWOpt2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
fwsize = 5.0;
return 0;
}
int FWOpt3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
fr = 1.0, fg = 0, fb = 0;
return 0;
}
int FWOpt4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
fr = 0, fg = 1.0, fb = 0;
return 0;
}
int FWOpt5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
fr = 0, fg = 0, fb = 1.0;
return 0;
}
int FWOpt6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
fr = 1, fg = 0, fb = 0.603921568627451;
return 0;
}
int FWOpt7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
fr = 0.7254901960784314, fg = 0, fb = 0.5058823529411765;
return 0;
}
int FWOpt8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
fr = 1.0, fg = 0.5176470588235294, fb = 0.0352941176470588;
return 0;
}
int FWOpt9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
fr = 0, fg = 1.0, fb = 0.9686274509803922;
return 0;
}
bool col_loop = false;
int FWOpt10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
if (!col_loop)
{
	col_loop = true;
}
else if (col_loop)
{
	col_loop = false;
}
return 0;
}
int fwcol = 2;
void fw_col_loop()
{
	if (fwcol > 1)
	{
		fr = 1.0, fg = 0, fb = 0;
		fwcol++;
	}
	if (fwcol > 40)
	{
		fr = 0, fg = 1.0, fb = 0;
		fwcol++;
	}
	if (fwcol > 80)
	{
		fr = 0, fg = 0, fb = 1.0;
		fwcol++;
	}
	if (fwcol > 120)
	{
		fr = 1, fg = 0, fb = 0.603921568627451;
		fwcol++;
	}
	if (fwcol > 160)
	{
		fr = 0.7254901960784314, fg = 0, fb = 0.5058823529411765;
		fwcol++;
	}
	if (fwcol > 200)
	{
		fr = 1.0, fg = 0.5176470588235294, fb = 0.0352941176470588;
		fwcol++;
	}
	if (fwcol > 240)
	{
		fr = 0, fg = 1.0, fb = 0.9686274509803922;
		fwcol++;
	}
	if (fwcol > 280)
	{
		fwcol = 2;
	}
}


int RemoveOnlineWanted(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	set_player_wanted_level(subMenuIndex, 0);
	set_player_wanted_level_now(subMenuIndex, 0);
	ShowMessageOnScreen("~b~ Removed players wanted level");

	return 0;
}
int RemoveOnlinePlayerWeapons(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	RemoveWeapons(GetPlayerHandle(subMenuIndex));
	ShowMessageOnScreen("~b~ Removed players guns");

	return 0;
}
bool custom = false;
int PlayerAcuse(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	if (!custom){
	rocketid = 0;
	custom = true;
	ShowMessageOnScreen("~b~ You will now suffer no consequences for your destruction!");
	}
	else if (custom){
	custom = false;
	ShowMessageOnScreen("~b~ Tracker has been turned back on the game will now know you are the one behind the destruction!");
	}

	return 0;
}

int GiveStunGun(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	GiveWeaponDelayed(PlayerPedId(), 0x3656C8C1, 300, 1);
	ShowMessageOnScreen("~b~ Gave stun gun");

	return 0;
}

int InvisiblePlayer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	if (!playervisible)
	{
	set_entity_visible(PlayerPedId(), false);
	playervisible = true;
	ShowMessageOnScreen("~b~ Invisible player");
	}
	else if (playervisible)
	{
	set_entity_visible(PlayerPedId(), true);
	playervisible = false;
	ShowMessageOnScreen("~b~ Visible player");
	}
	return 0;
}

int TeleportInToCar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	CarPed = selectedMenuIndexes->operator[](1);
	int player = selectedMenuIndexes->operator[](1);
	animid = selectedMenuIndexes->operator[](1);
	int ped = GetPlayerHandle(player);
	float Pos[3];
	GetEntityCoords(ped, Pos);
	set_entity_coords(PlayerPedId(), Pos[0], Pos[1], Pos[2]);
	warp = true;
	return 0;
}

int GiveAllWeapons(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{

	GiveWeaponDelayed(PlayerPedId(), 0x3656C8C1, 9999, 1); // stun gun
	GiveWeaponDelayed(PlayerPedId(), 0x99B507EA, 9999, 1); // knife
	GiveWeaponDelayed(PlayerPedId(), 0x678B81B1, 9999, 1); // night stick
	GiveWeaponDelayed(PlayerPedId(), 0x4E875F73, 9999, 1); // hammer
	GiveWeaponDelayed(PlayerPedId(), 0x958A4A8F, 9999, 1); // bat
	GiveWeaponDelayed(PlayerPedId(), 0x440E4788, 9999, 1); // golf club
	GiveWeaponDelayed(PlayerPedId(), 0x84BD7BFD, 9999, 1); // crowbar
	GiveWeaponDelayed(PlayerPedId(), 0x1B06D571, 9999, 5); // pistol
	GiveWeaponDelayed(PlayerPedId(), 0x5EF9FEC4, 9999, 1); // combat pistol
	GiveWeaponDelayed(PlayerPedId(), 0x22D8FE39, 9999, 1); // ap pistol
	GiveWeaponDelayed(PlayerPedId(), 0x99AEEB3B, 9999, 1); // pistol 50.
	GiveWeaponDelayed(PlayerPedId(), 0x13532244, 9999, 1); // micro smg
	GiveWeaponDelayed(PlayerPedId(), 0x2BE6766B, 9999, 1); // smg
	GiveWeaponDelayed(PlayerPedId(), 0xEFE7E2DF, 9999, 1); // assault smg
	GiveWeaponDelayed(PlayerPedId(), 0xBFEFFF6D, 9999, 1); // assault rifle
	GiveWeaponDelayed(PlayerPedId(), 0x83BF0278, 9999, 1); // carbine rifle
	GiveWeaponDelayed(PlayerPedId(), 0xAF113F99, 9999, 1); // advanced rifle
	GiveWeaponDelayed(PlayerPedId(), 0x9D07F764, 9999, 1); // MG
	GiveWeaponDelayed(PlayerPedId(), 0x7FD62962, 9999, 1); // combat mg
	GiveWeaponDelayed(PlayerPedId(), 0x1D073A89, 9999, 1); // pump shotgun
	GiveWeaponDelayed(PlayerPedId(), 0x7846A318, 9999, 1); // sawnoff shotgun
	GiveWeaponDelayed(PlayerPedId(), 0xE284C527, 9999, 1); // assault shotgun
	GiveWeaponDelayed(PlayerPedId(), 0x9D61E50F, 9999, 1); // bullpupshotgun
	GiveWeaponDelayed(PlayerPedId(), 0x05FC3C11, 9999, 1); // sniper
	GiveWeaponDelayed(PlayerPedId(), 0x0C472FE2, 9999, 1); // heavy sniper
	GiveWeaponDelayed(PlayerPedId(), 0xA284510B, 9999, 1); // grenade launcher
	GiveWeaponDelayed(PlayerPedId(), 0xB1CA77B1, 9999, 1); // rpg
	GiveWeaponDelayed(PlayerPedId(), 0x42BF8A85, 9999, 1); // minigun
	GiveWeaponDelayed(PlayerPedId(), 0x93E220BD, 9999, 1); // grenades
	GiveWeaponDelayed(PlayerPedId(), 0x2C3731D9, 9999, 1); // sticky bomb
	GiveWeaponDelayed(PlayerPedId(), 0xFDBC8A50, 9999, 1); // smoke grenade
	GiveWeaponDelayed(PlayerPedId(), 0x34A67B97, 9999, 1); // petrol can
	GiveWeaponDelayed(PlayerPedId(), 0x060EC506, 9999, 1); // fire extinguisher
	GiveWeaponDelayed(PlayerPedId(), 0x24B17070, 9999, 1); // moltovs
	GiveWeaponDelayed(PlayerPedId(), 0x497FACC3, 9999, 1); // flare
    GiveWeaponDelayed(PlayerPedId(), 0xFDBADCED, 9999, 1); // digiscanner
	GiveWeaponDelayed(PlayerPedId(), 0x687652CE, 9999, 1); // stinger
	GiveWeaponDelayed(PlayerPedId(), 600439132, 9999, 1); // ball

	ShowMessageOnScreen("~b~ Gave all weapons");

	return 0;
}

int GiveWeaponsOnline(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int Handle = GetPlayerHandle(subMenuIndex);
	GiveWeaponDelayed(Handle, 0x3656C8C1, 9999, 1); // stun gun
	GiveWeaponDelayed(Handle, 0x99B507EA, 9999, 1); // knife
	GiveWeaponDelayed(Handle, 0x678B81B1, 9999, 1); // night stick
	GiveWeaponDelayed(Handle, 0x4E875F73, 9999, 1); // hammer
	GiveWeaponDelayed(Handle, 0x958A4A8F, 9999, 1); // bat
	GiveWeaponDelayed(Handle, 0x440E4788, 9999, 1); // golf club
	GiveWeaponDelayed(Handle, 0x84BD7BFD, 9999, 1); // crowbar
	GiveWeaponDelayed(Handle, 0x1B06D571, 9999, 1); // pistol
	GiveWeaponDelayed(Handle, 0x5EF9FEC4, 9999, 1); // combat pistol
	GiveWeaponDelayed(Handle, 0x22D8FE39, 9999, 1); // ap pistol
	GiveWeaponDelayed(Handle, 0x99AEEB3B, 9999, 1); // pistol 50.
	GiveWeaponDelayed(Handle, 0x13532244, 9999, 1); // micro smg
	GiveWeaponDelayed(Handle, 0x2BE6766B, 9999, 1); // smg
	GiveWeaponDelayed(Handle, 0xEFE7E2DF, 9999, 1); // assault smg
	GiveWeaponDelayed(Handle, 0xBFEFFF6D, 9999, 1); // assault rifle
	GiveWeaponDelayed(Handle, 0x83BF0278, 9999, 1); // carbine rifle
	GiveWeaponDelayed(Handle, 0xAF113F99, 9999, 1); // advanced rifle
	GiveWeaponDelayed(Handle, 0x9D07F764, 9999, 1); // MG
	GiveWeaponDelayed(Handle, 0x7FD62962, 9999, 1); // combat mg
	GiveWeaponDelayed(Handle, 0x1D073A89, 9999, 1); // pump shotgun
	GiveWeaponDelayed(Handle, 0x7846A318, 9999, 1); // sawnoff shotgun
	GiveWeaponDelayed(Handle, 0xE284C527, 9999, 1); // assault shotgun
	GiveWeaponDelayed(Handle, 0x9D61E50F, 9999, 1); // bullpupshotgun
	GiveWeaponDelayed(Handle, 0x05FC3C11, 9999, 1); // sniper
	GiveWeaponDelayed(Handle, 0x0C472FE2, 9999, 1); // heavy sniper
	GiveWeaponDelayed(Handle, 0xA284510B, 9999, 1); // grenade launcher
	GiveWeaponDelayed(Handle, 0xB1CA77B1, 9999, 1); // rpg
	GiveWeaponDelayed(Handle, 0x42BF8A85, 9999, 1); // minigun
	GiveWeaponDelayed(Handle, 0x93E220BD, 9999, 1); // grenades
	GiveWeaponDelayed(Handle, 0x2C3731D9, 9999, 1); // sticky bomb
	GiveWeaponDelayed(Handle, 0xFDBC8A50, 9999, 1); // smoke grenade
	GiveWeaponDelayed(Handle, 0x34A67B97, 9999, 1); // petrol can
	GiveWeaponDelayed(Handle, 0x060EC506, 9999, 1); // fire extinguisher
	GiveWeaponDelayed(Handle, 0x24B17070, 9999, 1); // moltovs
	GiveWeaponDelayed(Handle, 0x497FACC3, 9999, 1); // flare

	ShowMessageOnScreen("~b~ Gave online player all weapons");

	return 0;
}

int TakeOnlineAllWeapons(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	//int subMenuIndex = selectedMenuIndexes->operator[](1);
	int i = 0;
	for (i = 0;i<16;i++)
    {
    if (i == PlayerId()) continue;
    int Handle = GetPlayerHandle(i);
    if(!DoesEntityExist(Handle)) continue;
	RemoveWeapons(GetPlayerHandle(i));
	}
	ShowMessageOnScreen("~b~ Gave all players all weapons");
	return 0;
}

int GiveOnlineAllWeapons(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	int i = 0;
	for (i = 0;i<16;i++)
    {
    if (i == PlayerId()) continue;
    int Handle = GetPlayerHandle(i);
    if(!DoesEntityExist(Handle)) continue;
	GiveWeaponDelayed(Handle, 0x3656C8C1, 9999, 1); // stun gun
	GiveWeaponDelayed(Handle, 0x99B507EA, 9999, 1); // knife
	GiveWeaponDelayed(Handle, 0x678B81B1, 9999, 1); // night stick
	GiveWeaponDelayed(Handle, 0x4E875F73, 9999, 1); // hammer
	GiveWeaponDelayed(Handle, 0x958A4A8F, 9999, 1); // bat
	GiveWeaponDelayed(Handle, 0x440E4788, 9999, 1); // golf club
	GiveWeaponDelayed(Handle, 0x84BD7BFD, 9999, 1); // crowbar
	GiveWeaponDelayed(Handle, 0x1B06D571, 9999, 1); // pistol
	GiveWeaponDelayed(Handle, 0x5EF9FEC4, 9999, 1); // combat pistol
	GiveWeaponDelayed(Handle, 0x22D8FE39, 9999, 1); // ap pistol
	GiveWeaponDelayed(Handle, 0x99AEEB3B, 9999, 1); // pistol 50.
	GiveWeaponDelayed(Handle, 0x13532244, 9999, 1); // micro smg
	GiveWeaponDelayed(Handle, 0x2BE6766B, 9999, 1); // smg
	GiveWeaponDelayed(Handle, 0xEFE7E2DF, 9999, 1); // assault smg
	GiveWeaponDelayed(Handle, 0xBFEFFF6D, 9999, 1); // assault rifle
	GiveWeaponDelayed(Handle, 0x83BF0278, 9999, 1); // carbine rifle
	GiveWeaponDelayed(Handle, 0xAF113F99, 9999, 1); // advanced rifle
	GiveWeaponDelayed(Handle, 0x9D07F764, 9999, 1); // MG
	GiveWeaponDelayed(Handle, 0x7FD62962, 9999, 1); // combat mg
	GiveWeaponDelayed(Handle, 0x1D073A89, 9999, 1); // pump shotgun
	GiveWeaponDelayed(Handle, 0x7846A318, 9999, 1); // sawnoff shotgun
	GiveWeaponDelayed(Handle, 0xE284C527, 9999, 1); // assault shotgun
	GiveWeaponDelayed(Handle, 0x9D61E50F, 9999, 1); // bullpupshotgun
	GiveWeaponDelayed(Handle, 0x05FC3C11, 9999, 1); // sniper
	GiveWeaponDelayed(Handle, 0x0C472FE2, 9999, 1); // heavy sniper
	GiveWeaponDelayed(Handle, 0xA284510B, 9999, 1); // grenade launcher
	GiveWeaponDelayed(Handle, 0xB1CA77B1, 9999, 1); // rpg
	GiveWeaponDelayed(Handle, 0x42BF8A85, 9999, 1); // minigun
	GiveWeaponDelayed(Handle, 0x93E220BD, 9999, 1); // grenades
	GiveWeaponDelayed(Handle, 0x2C3731D9, 9999, 1); // sticky bomb
	GiveWeaponDelayed(Handle, 0xFDBC8A50, 9999, 1); // smoke grenade
	GiveWeaponDelayed(Handle, 0x34A67B97, 9999, 1); // petrol can
	GiveWeaponDelayed(Handle, 0x060EC506, 9999, 1); // fire extinguisher
	GiveWeaponDelayed(Handle, 0x24B17070, 9999, 1); // moltovs
	GiveWeaponDelayed(Handle, 0x497FACC3, 9999, 1); // flare

	ShowMessageOnScreen("~b~ Gave online players all weapons");

	return 0;
}
}

int BlowUpAllOnlinePlayers(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int i = 0;
	for (i = 0;i<16;i++)
    {
    if (i == PlayerId()) continue;
    int Handle = GetPlayerHandle(i);
    if(!DoesEntityExist(Handle)) continue;
	float Position[3];
    GetEntityCoords(Handle, Position);
	AddExplosion(Position[0], Position[1], Position[2], 16, 2.0f, true, false, 0.0f);
	}
	return 0;
	ShowMessageOnScreen("~b~ Blew up all players");
}
bool alltelefoot = false;
int TeleAllOnlinePlayers(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	alltelefoot = true;
	ShowMessageOnScreen("~b~ Teleporting all players");
	return 0;
}

int AllWay(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	alltelefootway = true;
	ShowMessageOnScreen("~b~ Teleporting all players");
	return 0;
}


bool allanim = false;
int AllPlayersDance(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
    animdict = "mini@strip_club@private_dance@part1";
    anim = "priv_dance_p1";
    animid = subMenuIndex;
	allanim = true;
	ShowMessageOnScreen("~b~ Starting animimation on all players");
	return 0;
}

int AllPlayersPoleDance(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
    animdict = "mini@strip_club@pole_dance@pole_dance1";
    anim = "pd_dance_01";
    animid = subMenuIndex;
	allanim = true;
	ShowMessageOnScreen("~b~ Starting animimation on all players");
	return 0;
}

int StopAll(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	int i = 0;
	for (i = 0;i<16;i++)
    {
    if (i == PlayerId()) continue;
    int Handle = GetPlayerHandle(i);
    if(!DoesEntityExist(Handle)) continue;
	clear_ped_tasks(Handle);
	}
	ShowMessageOnScreen("~b~ Stopping animimation on all players");
	return 0;
}

int AllPlayersElectrocute(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
    animdict = "ragdoll@human";
    anim = "electrocute";
    animid = subMenuIndex;
	allanim = true;
	ShowMessageOnScreen("~b~ Starting animimation on all players");
	return 0;
}

bool hasaimed = false;
bool hasaimedatplayer = false;
int arresthandle;
int aimbotClient = 0;
bool arrest = false;
bool arresthit = false;
void aimbotloop(int Client) {
	int i = Client,
		player_id = PlayerId(),
		player_ped_id = PlayerPedId();
	//for (i = 0;i<16;i++)
    {
		if (i == player_id) return;//continue;
		int Handle = GetPlayerHandle(i);
		if(!DoesEntityExist(Handle)) return;//continue;
		if(!isInDistance(Handle)) return;//continue;
		if(is_control_pressed(2, 180) && is_ped_on_foot(player_ped_id) && has_entity_clear_los_to_entity(player_ped_id, Handle, 17) && is_ped_on_foot(Handle)) {
			if (!arresthit) {
				hasaimedatplayer = true;
				//ShowMessageOnScreen("~b~ Locked on to player");
				arresthandle = Handle;
				arrest = true;
				arresthit = true;
			}
		}
		if (is_entity_dead(Handle))return;//continue;
	}
	if (is_control_just_released(2, 180)) {
		if (hasaimedatplayer) {
		//ShowMessageOnScreen("~b~ Released aim");
		hasaimed = true;
		hasaimedatplayer = false;
		arresthit = false;
		}
	}
}

void aimbotrelease() {
	if (hasaimed) {
	//clear_ped_tasks_immediately(PlayerPedId());
	clear_ped_tasks(PlayerPedId());
	hasaimed = false;
	}
}

void UltimateDeagleLoop()
{
float Pos[3];
float health;
     if (is_control_just_pressed(0, 24)){
		GetEntityCoords(PlayerPedId(), Pos);
        int vehHandle = get_closest_vehicle(Pos[0], Pos[1], Pos[2], 2000.0f, 0, 0);
		health = get_vehicle_petrol_tank_health(vehHandle);
        float x, y, z;
        GetCoordsInfrontOfSelf(&Pos[0], &Pos[1], &Pos[2]);
		if(network_request_control_of_entity(vehHandle) && (health > 1)) {
		ShowMessageOnScreen("~b~ ");
		freeze_entity_position(vehHandle, true);
        set_entity_coords(vehHandle, Pos[0], Pos[1], Pos[2], 0, 0, 0, 1);
        set_entity_heading(vehHandle, get_entity_heading(PlayerPedId()));
		freeze_entity_position(vehHandle, false);
        apply_force_to_entity(vehHandle, 1, 0.0, 1000.0f, 0.0, 0.0, -1.5f, 0.0f, 0, 1, 1, 1, false, true);
		}
		else { ShowMessageOnScreen("~b~ No vehicle in memory at this time."); }
	 }
	//3455827142:has_ped_been_damaged_by_weapon HAS_CHAR_BEEN_DAMAGED_BY_WEAPON(Test, WEAPON_DEAGLE) 82E13440
	//2955113218:get_current_ped_weapon GET_CURRENT_CHAR_WEAPON(GetPlayerPed(), &weapon); 82E13030
	//133986272:has_entity_been_damaged_by_entity HAS_CHAR_BEEN_DAMAGED_BY_CHAR(Test, GetPlayerPed(), false) 82D7BF80
}

int ToggleUltimateDeagle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	deagle = !deagle;
	return 0;
}
bool ammo;
int ToggleAmmo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!ammo) {
	ammo = true;
	//set_ped_infinite_ammo(PlayerPedId(), true);
	set_ped_infinite_ammo_clip(PlayerPedId(), true);
	ShowMessageOnScreen("~b~ Unlimited Ammo turned on!");
	}
	else if (ammo) {
	//set_ped_infinite_ammo(PlayerPedId(), false);
    set_ped_infinite_ammo_clip(PlayerPedId(), false);
	ShowMessageOnScreen("~b~ Unlimited Ammo turned off!");
    ammo = false;
	}
    //ShowMessageOnScreen("~r~ Sorry this has been disabled for now it isn't working properly!");
	return 0;
}

int ToggleAimbot(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!aimbot) {
	aimbot = true;
	aimbot_active = true;
	ShowMessageOnScreen("~b~ Aimbot turned on!");
	}
	else if (aimbot) {
	ShowMessageOnScreen("~b~ Aimbot turned off!");
	aimbot_active = false;
    aimbot = false;
	}
	return 0;
}
float excoords[3];
int exptype = 28;
bool hmmm = false;
int RocketGunExp0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	exptype = 12;
	ShowMessageOnScreen("~r~ Gas leak explosion set");
	return 0;
}
int RocketGunExp1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	exptype = 13;
	ShowMessageOnScreen("~r~ Hyrdrant explosion set");
	return 0;
}
int RocketGunExp2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	exptype = 19;
	ShowMessageOnScreen("~r~ Smoke cloud explosion set");
	return 0;
}
int RocketGunExp3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	exptype = 22;
	ShowMessageOnScreen("~r~ Flare explosion set");
	return 0;
}
int RocketGunExp4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	exptype = 24;
	ShowMessageOnScreen("~r~ Steam explosion set");
	return 0;
}
int RocketGunExp5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	exptype = 27;
	ShowMessageOnScreen("~r~ Small explosion set");
	return 0;
}
int RocketGunExp6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	exptype = 28;
	ShowMessageOnScreen("~r~ Medium explosion set");
	return 0;
}
int RocketGunExp7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	exptype = 29;
	ShowMessageOnScreen("~r~ Massive explosion set");
	return 0;
}
int ToggleRocketGun(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {

	if (!rocket_gun) {
		rocket_gun = true;
		//hmmm = true;
		ShowMessageOnScreen("~b~ Rocket guns turned on!");
	}
	else if (rocket_gun) {
		ShowMessageOnScreen("~b~ Rocket guns turned off!");
		rocket_gun = false;
		//hmmm = false;
	}
	return 0;
}

void rocketgun()
{
	int ped_id = PlayerPedId();
    if ( is_ped_shooting( ped_id ) )
    {
	/*	printf("Is shooting = true\n");
        float range = 5.0f,
		cam_coords[3],
		coords[3],
		Temp[2][3];
		get_gameplay_cam_coord(cam_coords);
		if( is_ped_on_foot(ped_id) )
		{
			printf("Is ped on foot = true\n");
			GetEntityCoords(ped_id, coords);
			range = Vec3DistanceSq( coords, cam_coords ) + 0.5f;
			printf("Range\n");
		}
		shoot_single_bullet_between_coords( get_coord_in_front_of_gameplaycam( range, Temp[0] ), get_coord_in_front_of_gameplaycam( 500.0f, Temp[1] ), 0, 1, get_hash_key("WEAPON_STINGER"), ped_id, 0, 1, 2500.0f );
		printf("Shot bullet\n");*/
		if (get_ped_last_weapon_impact_coord(PlayerPedId(), excoords))
		{
			//printf("Return = { %f, %f, %f }\n", excoords[0], excoords[1], excoords[2]);
			AddExplosion(excoords[0], excoords[1], excoords[2], exptype, 5.0, 1, 0, 0);
		}
		}
}


float fwcoords[3];
bool fw_gun_ready = false;
void fwgun()
{
int ped_id = PlayerPedId();
if (is_ped_shooting(ped_id))
{
if (get_ped_last_weapon_impact_coord(PlayerPedId(), fwcoords))
{
fw_gun_ready = true;
}
}
}

void rocketgun2()
{
	int ped_id = PlayerPedId();
    if ( is_ped_shooting( ped_id ) )
    {
		if (get_ped_last_weapon_impact_coord(PlayerPedId(), excoords))
		{
			AddExplosion(excoords[0], excoords[1], excoords[2], 36, 5.0, 1, 0, 0);
		}
		}
}


int TeleImpoundLot(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	float x,y,z;
	x = -1330.267822, y = -390.644684, z = 36.602779;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		}
		else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	//set_entity_coords(GetPlayerHandle(PlayerId()), -1330.267822, -390.644684, 36.602779, 1, 0, 0, 1);
	// Haven't coded this yet.
	ShowMessageOnScreen("~b~ Teleported to ammunation store!");
	return 0;
}
int TeleCoords(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	float Pos[3];
	GetEntityCoords(GetPlayerHandle(PlayerId()), Pos);
	printf("\tPosition = {%f, %f, %f};\n", Pos[0], Pos[1], Pos[2]);
	ShowMessageOnScreen("~b~ Position = %f   %f   %f", Pos[0], Pos[1], Pos[2]);
	return 0;
}

int ObjectCoords(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	float Pos[3];
	GetEntityCoords(objecthandle, Pos);
	printf("\tPosition = {%f, %f, %f};\n", Pos[0], Pos[1], Pos[2]);
	ShowMessageOnScreen("~b~ Position = %f   %f   %f", Pos[0], Pos[1], Pos[2]);
	return 0;
}

int ObjectHash(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
#ifdef PRIVATE
	int hash = get_entity_model(objecthandle);
	printf("Object Hash = %i \n", hash);
	ShowMessageOnScreen("~b~ Object Hash = %i", hash);
#else
	ShowMessageOnScreen("~r~ Sorry this is only available in the private version!");
#endif
	return 0;
}
bool objectcopy = false;
int ObjectCopy(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int hash = get_entity_model(objecthandle);
	model = hash;
	objectspawn = true;
	objectcopy = true;
	printf("Copied Object %i \n", hash);
	ShowMessageOnScreen("~b~ Copied Object Object = %i", hash);
	return 0;
}

bool deleted_obj = false;
int ObjectDelete(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int hash = get_entity_model(objecthandle);
	deleted_obj = true;
	printf("Deleted Object %i \n", hash);
	ShowMessageOnScreen("~b~ Deleted Object = %i", hash);
	return 0;
}

//	Position = {8.069606, 537.153015, 176.028015};

int TeleFranklinsCrib(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//set_entity_coords(GetPlayerHandle(PlayerId()), -1330.267822, -390.644684, 36.602779, 1, 0, 0, 1);
	// Haven't coded this yet.
	float x,y,z;
	x = 8.069606, y = 537.153015, z = 176.028015;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		} //Position = {-385.378601, 204.318146, 85.885498};
	//Position = {-385.930908, 203.293900, 86.273972};

		else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~b~ Teleported to Franklins crib!");
	return 0;
}

int TeleMicsCrib(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//set_entity_coords(GetPlayerHandle(PlayerId()), -1330.267822, -390.644684, 36.602779, 1, 0, 0, 1);
	// Haven't coded this yet.
	float x,y,z;
	x = -813.176453, y = 179.232452, z = 72.159149;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		}
		else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~b~ Teleported to Micheals crib!");
	return 0;
}

int TeleLsCustoms(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//set_entity_coords(GetPlayerHandle(PlayerId()), -1330.267822, -390.644684, 36.602779, 1, 0, 0, 1);
	// Haven't coded this yet.
	float x,y,z;
	x = -384.217834, y = -118.733658, z = 38.689579;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		}
		else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~b~ Teleported to LS Customs!");
	return 0;
}

int TeleArena(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//set_entity_coords(GetPlayerHandle(PlayerId()), -1330.267822, -390.644684, 36.602779, 1, 0, 0, 1);
	// Haven't coded this yet.
	float x,y,z;
	x = -1937.548950, y = -995.428772, z = 17.635166;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		}
		else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~b~ Teleported to Custom Arena!");
	return 0;
}

int TeleGarage(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//set_entity_coords(GetPlayerHandle(PlayerId()), -1330.267822, -390.644684, 36.602779, 1, 0, 0, 1);
	// Haven't coded this yet.
	float x,y,z; 
	x = 228.7188, y = -989.9847, z = -99.0;
	int myhandle = GetPlayerHandle(PlayerId());
	int myvehicle;
	if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		}
		else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
	}
	ShowMessageOnScreen("~b~ Teleported to 10 Car Garage!");
	return 0;
}


bool TeleportToWaypoint = false;
float WaypointPos[3];
int WaypointEntity;
int TeleWay(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//set_entity_coords(GetPlayerHandle(PlayerId()), -1330.267822, -390.644684, 36.602779, 1, 0, 0, 1);
	// Haven't coded this yet.
	int waypoint = get_first_blip_info_id(8);
	if(does_blip_exist(waypoint)) {
		get_blip_coords(waypoint, WaypointPos);
		int myhandle = PlayerPedId(),
			myvehicle;
		if (is_ped_in_any_vehicle(myhandle)) {
			myvehicle = GetCarCharIsIn(myhandle, 0);
			if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
				WaypointEntity = myvehicle;
				set_entity_coords(myvehicle, WaypointPos[0], WaypointPos[1], WaypointPos[2], 0, 0, 0, 1);
				load_all_objects_now();
			}
			else {
				WaypointEntity = myhandle;
				set_entity_coords(myhandle, WaypointPos[0], WaypointPos[1], WaypointPos[2], 0, 0, 0, 1);
				load_all_objects_now();
			}
			TeleportToWaypoint = true;
		}
	}
	else {
		ShowMessageOnScreen("~b~ Please set a waypoint first!");
	}
	return 0;
}

void Waypointloop() {
	if(get_ground_z_for_3d_coord(WaypointPos[0], WaypointPos[1], 600.0f, &WaypointPos[2])) {
		set_entity_coords(WaypointEntity, WaypointPos[0], WaypointPos[1], WaypointPos[2], 0, 0, 0, 1);
		TeleportToWaypoint = false;
		ShowMessageOnScreen("~b~ Teleported to Waypoint!");
	}
}


int StripperModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x9CF26183;//0x9CF26183;
	
	return 0;
}

int MonkeyModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = -1026527405;//0x9CF26183;
	
	return 0;
}

int MonkeySpaceModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = -598109171;//0x9CF26183;
	
	return 0;
}


bool alienspawn = false;
int AlienModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x64611296;//0x9CF26183;
	alienspawn = true;
	return 0;
}
bool invisiblemodel = false;
int InvisibleModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x2970A494;//0x9CF26183;
	invisiblemodel = true;
	return 0;
}

int OnlineStripper(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x2970A494;//0x9CF26183;
	return 0;
}

float x10, y10, z10, x20, y20, z20; 

bool ufomode = false;
int FlyingAnus(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	if (is_ped_in_any_vehicle(PlayerPedId())){
	objectspawn = true;
	model = 0xB467C540; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	x10 = 0, y10 = 0, z10 = + 3.9, x20 = 0, y20 = 0, z20 = 0;
	ShowMessageOnScreen("~b~ UFO spawned works best in the cargo plain!");
	ufomode = true;
	}
	else{
	ShowMessageOnScreen("~b~ You aren't in a vehicle");
	}
	return 0;
}
bool dodgem2 = false;
bool dodgem3 = false;
bool dodgemvehicle = false;
int DodgemCar(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	ShowMessageOnScreen("~b~ Dodgem car spawned works best in the comet!");
	dodgemvehicle = true;
	/*if (!dodgem2) {
	objectspawn = true;
	model = -77393630; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	x10 = - 0.3, y10 = 0.2, z10 = 0, x20 = 0, y20 = 0, z20 = 180;
	ufomode = true;
	objectspawn = true;
	model = 232216084; // spunk ramp 0xBF8918DE // UFO 0xB467C540 // z = -0.4 // y = -1.2 x = -0.2 z = 180
	x10 = - 0.2, y10 = - 1.2, z10 = -0.4, x20 = 0, y20 = 0, z20 = 180;
	//ShowMessageOnScreen("~b~ Dodgem car 2 spawned works best in the comet!");
	ufomode = true;
	objectspawn = true;
	model = 1382419899; // spunk ramp 0xBF8918DE // UFO 0xB467C540 // x = -0.3, y = -0.2, z = -0.3
	x10 = - 0.4, y10 = - 0.2, z10 = -0.3, x20 = 0, y20 = 0, z20 = 180;
	//ShowMessageOnScreen("~b~ Dodgem car 2 spawned works best in the comet!");
	ufomode = true;
	dodgem2 = true;
	}
	if (dodgem2 && !ufomode){
	objectspawn = true;
	model = 232216084; // spunk ramp 0xBF8918DE // UFO 0xB467C540 // z = -0.4 // y = -1.2 x = -0.2 z = 180
	x10 = - 0.2, y10 = - 1.2, z10 = -0.4, x20 = 0, y20 = 0, z20 = 180;
	//ShowMessageOnScreen("~b~ Dodgem car 2 spawned works best in the comet!");
	ufomode = true;
	dodgem3 = true;
	}
	if (dodgem3 && !ufomode){
	objectspawn = true;
	model = 1382419899; // spunk ramp 0xBF8918DE // UFO 0xB467C540 // x = -0.3, y = -0.2, z = -0.3
	x10 = - 0.4, y10 = - 0.2, z10 = -0.3, x20 = 0, y20 = 0, z20 = 180;
	//ShowMessageOnScreen("~b~ Dodgem car 2 spawned works best in the comet!");
	ufomode = true;
	dodgem2 = false;
	}
	}
	else{
	ShowMessageOnScreen("~b~ You aren't in a vehicle");
	}*/
	return 0;
}



int SpawnObject(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	objectspawn = true;
	normalspawn = true;
	//model = 0xBF8918DE; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	model = -1536924937;
	return 0;
}

int SpawnWeed(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	objectspawn = true;
	normalspawn = true;
	model = 452618762; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	ShowMessageOnScreen("~b~ Weed for everyone!");
	return 0;
}

int SpawnRamp(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	objectspawn = true;
	normalspawn = true;
	model = -1818980770; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	ShowMessageOnScreen("~b~ Spawned Ramp!");
	return 0;
}

int SpawnBody(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	objectspawn = true;
	normalspawn = true;
	model = -1240857364; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	ShowMessageOnScreen("~b~ Dead bodies!");
	return 0;
}//
bool derby = false;
int DerbyArena(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien bool  Playboy (naked)
	objectspawn = true;
	//normalspawn = true;
	derby = true;
	model = -1003748966; // spunk ramp 0xBF8918DE // UFO 0xB467C540

	//ShowMessageOnScreen("~b~ Derby Arena!");
	return 0;
}//
int cam;
float rot[3];
bool cam_mode = false;
bool cam_check = false;
bool cam_load = false;
int FlyMod(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//ShowMessageOnScreen("~r~ In Progress...");
	if (!cam_mode) {
	cam_load = true;
	cam_mode = true;
	ShowMessageOnScreen("~b~ First Person On");
	}
	else if (cam_mode) {
    cam_mode = false;
	set_cam_active(cam, false);
	ShowMessageOnScreen("~r~ First Person Can't be turned off yet sorry!");
	}
	return 0;
}
bool fly_car = false;
int FlyCarMod(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (is_ped_on_foot(PlayerPedId())) {
	ShowMessageOnScreen("~r~ This option is only available while in a vehicle");
	return 0;
	}
	if (!fly_car) {
	//GiveWeaponDelayed(PlayerPedId(), 0xFBAB5776, 1, 1);
    apply_force_to_entity(GetCarCharIsIn(PlayerPedId(), 0), true, 0, 0, 40, 0, 0, 0, true, true, true, true, false, true);
	//SetPlayerInvincible(PlayerId(), true);
	fly_car = true;
	}
	else if (fly_car) {
	fly_car = false;
	}
	return 0;
}

void fly_car_loop() 
{
if (!is_ped_on_foot(PlayerPedId())) 
{
apply_force_to_entity(GetCarCharIsIn(PlayerPedId(), 0), true, 0, 100, 100, 0, 0, 0, false, true, false, false, false, true);
}
}

bool super_check = false;
int SuperMod(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!super_check) {
	GiveWeaponDelayed(PlayerPedId(), 0xFBAB5776, 1, 1);
    apply_force_to_entity(PlayerPedId(), true, 0, 0, 40, 0, 0, 0, true, true, true, true, false, true);
	SetPlayerInvincible(PlayerId(), true);
	super_check = true;
	}
	else if (super_check) {
	super_check = false;
	}
	return 0;
}

void super_loop() 
{
 if (unk_0xCD71F11B(PlayerPedId()))
  {
   disable_control_action( 2, 124 );
   apply_force_to_entity(PlayerPedId(), true, 0, 100, 100, 0, 0, 0, false, true, false, false, false, true);
 }
}
#ifdef PRIVATE
int NormalSkin(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
gauge = 2;
return 0;
}

int BMWSkin(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
gauge = 1;
return 0;
}

int TestSkin(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
gauge = 3;
return 0;
}

int SimpleSkin(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
gauge = 4;
return 0;
}

#ifdef PRIVATE
int Rank(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
set_stat_int(get_hash_key("MP0_CHAR_XP_FM"), 2165850);
set_stat_int(get_hash_key("MP0_SCRIPT_INCREASE_STAM"), 100); // MP0_
		set_stat_int(get_hash_key("MP0_SCRIPT_INCREASE_STRN"), 100);
		set_stat_int(get_hash_key("MP0_SCRIPT_INCREASE_LUNG"), 100);
        set_stat_int(get_hash_key("MP0_SCRIPT_INCREASE_DRIV"), 100);
        set_stat_int(get_hash_key("MP0_SCRIPT_INCREASE_FLY"),  100);
        set_stat_int(get_hash_key("MP0_SCRIPT_INCREASE_SHO"),  100);
        set_stat_int(get_hash_key("MP0_SCRIPT_INCREASE_STL"),  100);
            // skills //
        set_stat_int(get_hash_key("MP0_RACES_WON"),  100);
		
		set_stat_int(get_hash_key("MP0_PISTOL_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_CMBTPISTOL_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_APPISTOL_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_MICROSMG_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_SMG_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_ASLTSMG_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_ASLTRIFLE_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_CRBNRIFLE_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_ADVRIFLE_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_HVYSNIPER_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_SNIPERRFL_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_ASLTSHTGN_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_PUMP_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_GRNLAUNCH_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_RPG_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_MINIGUNS_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_ASLTSMG_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_ASLTRIFLE_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_CRBNRIFLE_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_ADVRIFLE_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_HVYSNIPER_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_SNIPERRFL_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_MG_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_CMBTMG_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_PISTOL_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_CMBTPISTOL_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_APPISTOL_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_MICROSMG_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_SMG_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_ASLTSMG_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_ASLTRIFLE_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_CRBNRIFLE_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_ADVRIFLE_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_HVYSNIPER_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_SNIPERRFL_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_ASLTSHTGN_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_PUMP_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_GRNLAUNCH_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_RPG_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_MINIGUNS_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_ASLTSMG_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_ASLTRIFLE_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_CRBNRIFLE_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_ADVRIFLE_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_HVYSNIPER_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_SNIPERRFL_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_MG_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP0_CMBTMG_ENEMY_KILLS"),  600);

		set_stat_bool(get_hash_key("MP0_AWD_FMRACEWORLDRECHOLDER"),  1);
        set_stat_int(get_hash_key("MP0_AWD_ENEMYDRIVEBYKILLS"),  600);

            set_stat_int(get_hash_key("MP0_USJS_COMPLETED"),  50);
            set_stat_int(get_hash_key("MP0_USJS_FOUND"),  50);

            set_stat_bool(get_hash_key("MP0_AWD_FMWINALLRACEMODES"),  1);
            set_stat_bool(get_hash_key("MP0_AWD_FMWINEVERYGAMEMODE"),  1);
            set_stat_int(get_hash_key("MP0_DB_PLAYER_KILLS"), 1000); // drive by kills 
            set_stat_int(get_hash_key("MP0_KILLS_PLAYERS"), 1000);
            set_stat_int(get_hash_key("MP0_AWD_FMHORDWAVESSURVIVE"),  21);
            set_stat_int(get_hash_key("MP0_AWD_CAR_BOMBS_ENEMY_KILLS"), 25);
            set_stat_int(get_hash_key("MP0_AWD_FM_TDM_MVP"), 60);
            set_stat_int(get_hash_key("MP0_AWD_HOLD_UP_SHOPS"), 20);
            set_stat_int(get_hash_key("MP0_AWD_RACES_WON"), 101);
            set_stat_int(get_hash_key("MP0_AWD_NO_ARMWRESTLING_WINS"), 21);
            set_stat_bool(get_hash_key("MP0_AWD_FMATTGANGHQ"),  1);
            set_stat_int(get_hash_key("MP0_AWD_FMBBETWIN"), 50000);
            set_stat_int(get_hash_key("MP0_AWD_FM_DM_WINS"), 51);

            set_stat_bool(get_hash_key("MP0_AWD_FMFULLYMODDEDCAR"),  1);
            set_stat_int(get_hash_key("MP0_AWD_FM_DM_TOTALKILLS"),  500);
            set_stat_int(get_hash_key("MP0_MPPLY_DM_TOTAL_DEATHS"), 412);
            set_stat_int(get_hash_key("MP0_MPPLY_TIMES_FINISH_DM_TOP_3"), 36);
            set_stat_int(get_hash_key("MP0_PLAYER_HEADSHOTS"), 623);
            set_stat_int(get_hash_key("MP0_AWD_FM_DM_WINS"), 63);
            set_stat_int(get_hash_key("MP0_AWD_FM_TDM_WINS"), 13);
            set_stat_int(get_hash_key("MP0_AWD_FM_GTA_RACES_WON"), 12);
            set_stat_int(get_hash_key("MP0_AWD_FM_GOLF_WON"), 2);
            set_stat_int(get_hash_key("MP0_AWD_FM_SHOOTRANG_TG_WON"), 2);
            set_stat_int(get_hash_key("MP0_AWD_FM_SHOOTRANG_RT_WON"), 2);
            set_stat_int(get_hash_key("MP0_AWD_FM_SHOOTRANG_CT_WON"), 2);
            set_stat_int(get_hash_key("MP0_AWD_FM_SHOOTRANG_GRAN_WON"), 2);
            set_stat_int(get_hash_key("MP0_AWD_FM_TENNIS_WON"), 2);
            set_stat_int(get_hash_key("MP0_MPPLY_TENNIS_MATCHES_WON"), 2);
            set_stat_int(get_hash_key("MP0_MPPLY_TOTAL_TDEATHMATCH_WON"), 63);
            set_stat_int(get_hash_key("MP0_MPPLY_TOTAL_RACES_WON"), 101);
            set_stat_int(get_hash_key("MP0_MPPLY_TOTAL_DEATHMATCH_LOST"), 23);
            set_stat_int(get_hash_key("MP0_MPPLY_TOTAL_RACES_LOST"), 36);
            set_stat_int(get_hash_key("MP0_AWD_25_KILLS_STICKYBOMBS"), 50);
            set_stat_int(get_hash_key("MP0_AWD_50_KILLS_GRENADES"), 50);
            set_stat_int(get_hash_key("MP0_GRENADE_ENEMY_KILLS"), 50);
            set_stat_int(get_hash_key("MP0_AWD_20_KILLS_MELEE"), 50);
            //set_stat_int(get_hash_key(ConvertString(("NO_MASKS_UNLOCK"), 25);
            //set_stat_int(get_hash_key(ConvertString(("NO_TATTOOS_UNLOCK"), 61);

            set_stat_bool(get_hash_key("MP0_AWD_FMMOSTKILLSSURVIVE"),  1);

           // set_stat_int(get_hash_key(ConvertString(("AWD_ENEMYDRIVEBYKILLS"), 10);

            set_stat_int(get_hash_key("MP0_AWD_FMRALLYWONDRIVE"), 2);
            set_stat_int(get_hash_key("MP0_AWD_FMWINSEARACE"), 2);
            set_stat_int(get_hash_key("MP0_AWD_FMWINAIRRACE"), 2);
            set_stat_int(get_hash_key("MP0_MPPLY_TIMES_RACE_BEST_LAP"), 101);
            set_stat_int(get_hash_key("MP0_NUMBER_TURBO_STARTS_IN_RACE"), 100);
            set_stat_int(get_hash_key("MP0_AWD_FM_RACES_FASTEST_LAP"), 101);
            set_stat_int(get_hash_key("MP0_NUMBER_SLIPSTREAMS_IN_RACE"), 105);
           // set_stat_int(get_hash_key("MP0_CASH_GIFT_CREDITED"), 999);
            set_stat_int(get_hash_key("MP0_MPPLY_RACE_CHEAT_START"), 130);
            set_stat_int(get_hash_key("MP0_MPPLY_RACE_CHEAT_END"), 119);
            set_stat_int(get_hash_key("MP0_MPPLY_RACE_CHEAT_QUIT"), 11);
            set_stat_int(get_hash_key("MP0_MPPLY_DM_CHEAT_START"), 140);
            set_stat_int(get_hash_key("MP0_MPPLY_DM_CHEAT_END"), 115);
            set_stat_int(get_hash_key("MP0_MPPLY_DM_CHEAT_QUIT"), 25);
            set_stat_int(get_hash_key("MP0_MPPLY_MC_CHEAT_START"), 113);
            set_stat_int(get_hash_key("MP0_MPPLY_MC_CHEAT_END"), 97);
            set_stat_int(get_hash_key("MP0_MPPLY_MC_CHEAT_QUIT"), 16);
            set_stat_int(get_hash_key("MP0_MPPLY_OVERALL_CHEAT"), 0);

            set_stat_int(get_hash_key("MP0_LAP_DANCED_BOUGHT"), 50);

            set_stat_int(get_hash_key("MP0_AWD_FMKILLBOUNTY"), 50);
            set_stat_bool(get_hash_key("MP0_AWD_FMKILL3ANDWINGTARACE"),  1);
            set_stat_int(get_hash_key("MP0_AWD_FMREVENGEKILLSDM"), 60);
            set_stat_int(get_hash_key("MP0_AWD_SECURITY_CARS_ROBBED"), 40);
            set_stat_bool(get_hash_key("MP0_AWD_FMPICKUPDLCCRATE1ST"),  1);
return 0;
}

int Rank1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP1_CHAR_XP_FM"), 2165850);
set_stat_int(get_hash_key("MP1_SCRIPT_INCREASE_STAM"), 100); // MP1_
		set_stat_int(get_hash_key("MP1_SCRIPT_INCREASE_STRN"), 100);
		set_stat_int(get_hash_key("MP1_SCRIPT_INCREASE_LUNG"), 100);
        set_stat_int(get_hash_key("MP1_SCRIPT_INCREASE_DRIV"), 100);
        set_stat_int(get_hash_key("MP1_SCRIPT_INCREASE_FLY"),  100);
        set_stat_int(get_hash_key("MP1_SCRIPT_INCREASE_SHO"),  100);
        set_stat_int(get_hash_key("MP1_SCRIPT_INCREASE_STL"),  100);
            // skills //
        set_stat_int(get_hash_key("MP1_RACES_WON"),  100);
		
		set_stat_int(get_hash_key("MP1_PISTOL_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_CMBTPISTOL_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_APPISTOL_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_MICROSMG_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_SMG_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_ASLTSMG_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_ASLTRIFLE_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_CRBNRIFLE_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_ADVRIFLE_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_HVYSNIPER_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_SNIPERRFL_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_ASLTSHTGN_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_PUMP_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_GRNLAUNCH_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_RPG_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_MINIGUNS_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_ASLTSMG_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_ASLTRIFLE_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_CRBNRIFLE_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_ADVRIFLE_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_HVYSNIPER_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_SNIPERRFL_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_MG_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_CMBTMG_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_PISTOL_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_CMBTPISTOL_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_APPISTOL_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_MICROSMG_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_SMG_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_ASLTSMG_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_ASLTRIFLE_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_CRBNRIFLE_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_ADVRIFLE_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_HVYSNIPER_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_SNIPERRFL_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_ASLTSHTGN_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_PUMP_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_GRNLAUNCH_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_RPG_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_MINIGUNS_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_ASLTSMG_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_ASLTRIFLE_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_CRBNRIFLE_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_ADVRIFLE_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_HVYSNIPER_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_SNIPERRFL_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_MG_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP1_CMBTMG_ENEMY_KILLS"),  600);

		set_stat_bool(get_hash_key("MP1_AWD_FMRACEWORLDRECHOLDER"),  1);
        set_stat_int(get_hash_key("MP1_AWD_ENEMYDRIVEBYKILLS"),  600);

            set_stat_int(get_hash_key("MP1_USJS_COMPLETED"),  50);
            set_stat_int(get_hash_key("MP1_USJS_FOUND"),  50);

            set_stat_bool(get_hash_key("MP1_AWD_FMWINALLRACEMODES"),  1);
            set_stat_bool(get_hash_key("MP1_AWD_FMWINEVERYGAMEMODE"),  1);
            set_stat_int(get_hash_key("MP1_DB_PLAYER_KILLS"), 1000); // drive by kills 
            set_stat_int(get_hash_key("MP1_KILLS_PLAYERS"), 1000);
            set_stat_int(get_hash_key("MP1_AWD_FMHORDWAVESSURVIVE"),  21);
            set_stat_int(get_hash_key("MP1_AWD_CAR_BOMBS_ENEMY_KILLS"), 25);
            set_stat_int(get_hash_key("MP1_AWD_FM_TDM_MVP"), 60);
            set_stat_int(get_hash_key("MP1_AWD_HOLD_UP_SHOPS"), 20);
            set_stat_int(get_hash_key("MP1_AWD_RACES_WON"), 101);
            set_stat_int(get_hash_key("MP1_AWD_NO_ARMWRESTLING_WINS"), 21);
            set_stat_bool(get_hash_key("MP1_AWD_FMATTGANGHQ"),  1);
            set_stat_int(get_hash_key("MP1_AWD_FMBBETWIN"), 50000);
            set_stat_int(get_hash_key("MP1_AWD_FM_DM_WINS"), 51);

            set_stat_bool(get_hash_key("MP1_AWD_FMFULLYMODDEDCAR"),  1);
            set_stat_int(get_hash_key("MP1_AWD_FM_DM_TOTALKILLS"),  500);
            set_stat_int(get_hash_key("MP1_MPPLY_DM_TOTAL_DEATHS"), 412);
            set_stat_int(get_hash_key("MP1_MPPLY_TIMES_FINISH_DM_TOP_3"), 36);
            set_stat_int(get_hash_key("MP1_PLAYER_HEADSHOTS"), 623);
            set_stat_int(get_hash_key("MP1_AWD_FM_DM_WINS"), 63);
            set_stat_int(get_hash_key("MP1_AWD_FM_TDM_WINS"), 13);
            set_stat_int(get_hash_key("MP1_AWD_FM_GTA_RACES_WON"), 12);
            set_stat_int(get_hash_key("MP1_AWD_FM_GOLF_WON"), 2);
            set_stat_int(get_hash_key("MP1_AWD_FM_SHOOTRANG_TG_WON"), 2);
            set_stat_int(get_hash_key("MP1_AWD_FM_SHOOTRANG_RT_WON"), 2);
            set_stat_int(get_hash_key("MP1_AWD_FM_SHOOTRANG_CT_WON"), 2);
            set_stat_int(get_hash_key("MP1_AWD_FM_SHOOTRANG_GRAN_WON"), 2);
            set_stat_int(get_hash_key("MP1_AWD_FM_TENNIS_WON"), 2);
            set_stat_int(get_hash_key("MP1_MPPLY_TENNIS_MATCHES_WON"), 2);
            set_stat_int(get_hash_key("MP1_MPPLY_TOTAL_TDEATHMATCH_WON"), 63);
            set_stat_int(get_hash_key("MP1_MPPLY_TOTAL_RACES_WON"), 101);
            set_stat_int(get_hash_key("MP1_MPPLY_TOTAL_DEATHMATCH_LOST"), 23);
            set_stat_int(get_hash_key("MP1_MPPLY_TOTAL_RACES_LOST"), 36);
            set_stat_int(get_hash_key("MP1_AWD_25_KILLS_STICKYBOMBS"), 50);
            set_stat_int(get_hash_key("MP1_AWD_50_KILLS_GRENADES"), 50);
            set_stat_int(get_hash_key("MP1_GRENADE_ENEMY_KILLS"), 50);
            set_stat_int(get_hash_key("MP1_AWD_20_KILLS_MELEE"), 50);
            //set_stat_int(get_hash_key(ConvertString(("NO_MASKS_UNLOCK"), 25);
            //set_stat_int(get_hash_key(ConvertString(("NO_TATTOOS_UNLOCK"), 61);

            set_stat_bool(get_hash_key("MP1_AWD_FMMOSTKILLSSURVIVE"),  1);

           // set_stat_int(get_hash_key(ConvertString(("AWD_ENEMYDRIVEBYKILLS"), 10);

            set_stat_int(get_hash_key("MP1_AWD_FMRALLYWONDRIVE"), 2);
            set_stat_int(get_hash_key("MP1_AWD_FMWINSEARACE"), 2);
            set_stat_int(get_hash_key("MP1_AWD_FMWINAIRRACE"), 2);
            set_stat_int(get_hash_key("MP1_MPPLY_TIMES_RACE_BEST_LAP"), 101);
            set_stat_int(get_hash_key("MP1_NUMBER_TURBO_STARTS_IN_RACE"), 100);
            set_stat_int(get_hash_key("MP1_AWD_FM_RACES_FASTEST_LAP"), 101);
            set_stat_int(get_hash_key("MP1_NUMBER_SLIPSTREAMS_IN_RACE"), 105);
           // set_stat_int(get_hash_key("MP1_CASH_GIFT_CREDITED"), 999);
            set_stat_int(get_hash_key("MP1_MPPLY_RACE_CHEAT_START"), 130);
            set_stat_int(get_hash_key("MP1_MPPLY_RACE_CHEAT_END"), 119);
            set_stat_int(get_hash_key("MP1_MPPLY_RACE_CHEAT_QUIT"), 11);
            set_stat_int(get_hash_key("MP1_MPPLY_DM_CHEAT_START"), 140);
            set_stat_int(get_hash_key("MP1_MPPLY_DM_CHEAT_END"), 115);
            set_stat_int(get_hash_key("MP1_MPPLY_DM_CHEAT_QUIT"), 25);
            set_stat_int(get_hash_key("MP1_MPPLY_MC_CHEAT_START"), 113);
            set_stat_int(get_hash_key("MP1_MPPLY_MC_CHEAT_END"), 97);
            set_stat_int(get_hash_key("MP1_MPPLY_MC_CHEAT_QUIT"), 16);
            set_stat_int(get_hash_key("MP1_MPPLY_OVERALL_CHEAT"), 0);

            set_stat_int(get_hash_key("MP1_LAP_DANCED_BOUGHT"), 50);

            set_stat_int(get_hash_key("MP1_AWD_FMKILLBOUNTY"), 50);
            set_stat_bool(get_hash_key("MP1_AWD_FMKILL3ANDWINGTARACE"),  1);
            set_stat_int(get_hash_key("MP1_AWD_FMREVENGEKILLSDM"), 60);
            set_stat_int(get_hash_key("MP1_AWD_SECURITY_CARS_ROBBED"), 40);
            set_stat_bool(get_hash_key("MP1_AWD_FMPICKUPDLCCRATE1ST"),  1);
return 0;
}

int Rank2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	set_stat_int(get_hash_key("MP2_CHAR_XP_FM"), 2165850);
set_stat_int(get_hash_key("MP2_SCRIPT_INCREASE_STAM"), 100); // MP2_
		set_stat_int(get_hash_key("MP2_SCRIPT_INCREASE_STRN"), 100);
		set_stat_int(get_hash_key("MP2_SCRIPT_INCREASE_LUNG"), 100);
        set_stat_int(get_hash_key("MP2_SCRIPT_INCREASE_DRIV"), 100);
        set_stat_int(get_hash_key("MP2_SCRIPT_INCREASE_FLY"),  100);
        set_stat_int(get_hash_key("MP2_SCRIPT_INCREASE_SHO"),  100);
        set_stat_int(get_hash_key("MP2_SCRIPT_INCREASE_STL"),  100);
            // skills //
        set_stat_int(get_hash_key("MP2_RACES_WON"),  100);
		
		set_stat_int(get_hash_key("MP2_PISTOL_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_CMBTPISTOL_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_APPISTOL_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_MICROSMG_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_SMG_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_ASLTSMG_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_ASLTRIFLE_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_CRBNRIFLE_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_ADVRIFLE_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_HVYSNIPER_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_SNIPERRFL_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_ASLTSHTGN_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_PUMP_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_GRNLAUNCH_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_RPG_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_MINIGUNS_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_ASLTSMG_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_ASLTRIFLE_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_CRBNRIFLE_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_ADVRIFLE_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_HVYSNIPER_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_SNIPERRFL_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_MG_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_CMBTMG_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_PISTOL_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_CMBTPISTOL_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_APPISTOL_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_MICROSMG_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_SMG_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_ASLTSMG_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_ASLTRIFLE_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_CRBNRIFLE_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_ADVRIFLE_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_HVYSNIPER_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_SNIPERRFL_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_ASLTSHTGN_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_PUMP_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_GRNLAUNCH_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_RPG_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_MINIGUNS_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_ASLTSMG_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_ASLTRIFLE_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_CRBNRIFLE_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_ADVRIFLE_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_HVYSNIPER_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_SNIPERRFL_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_MG_ENEMY_KILLS"),  600);
        set_stat_int(get_hash_key("MP2_CMBTMG_ENEMY_KILLS"),  600);

		set_stat_bool(get_hash_key("MP2_AWD_FMRACEWORLDRECHOLDER"),  1);
        set_stat_int(get_hash_key("MP2_AWD_ENEMYDRIVEBYKILLS"),  600);

            set_stat_int(get_hash_key("MP2_USJS_COMPLETED"),  50);
            set_stat_int(get_hash_key("MP2_USJS_FOUND"),  50);

            set_stat_bool(get_hash_key("MP2_AWD_FMWINALLRACEMODES"),  1);
            set_stat_bool(get_hash_key("MP2_AWD_FMWINEVERYGAMEMODE"),  1);
            set_stat_int(get_hash_key("MP2_DB_PLAYER_KILLS"), 1000); // drive by kills 
            set_stat_int(get_hash_key("MP2_KILLS_PLAYERS"), 1000);
            set_stat_int(get_hash_key("MP2_AWD_FMHORDWAVESSURVIVE"),  21);
            set_stat_int(get_hash_key("MP2_AWD_CAR_BOMBS_ENEMY_KILLS"), 25);
            set_stat_int(get_hash_key("MP2_AWD_FM_TDM_MVP"), 60);
            set_stat_int(get_hash_key("MP2_AWD_HOLD_UP_SHOPS"), 20);
            set_stat_int(get_hash_key("MP2_AWD_RACES_WON"), 101);
            set_stat_int(get_hash_key("MP2_AWD_NO_ARMWRESTLING_WINS"), 21);
            set_stat_bool(get_hash_key("MP2_AWD_FMATTGANGHQ"),  1);
            set_stat_int(get_hash_key("MP2_AWD_FMBBETWIN"), 50000);
            set_stat_int(get_hash_key("MP2_AWD_FM_DM_WINS"), 51);

            set_stat_bool(get_hash_key("MP2_AWD_FMFULLYMODDEDCAR"),  1);
            set_stat_int(get_hash_key("MP2_AWD_FM_DM_TOTALKILLS"),  500);
            set_stat_int(get_hash_key("MP2_MPPLY_DM_TOTAL_DEATHS"), 412);
            set_stat_int(get_hash_key("MP2_MPPLY_TIMES_FINISH_DM_TOP_3"), 36);
            set_stat_int(get_hash_key("MP2_PLAYER_HEADSHOTS"), 623);
            set_stat_int(get_hash_key("MP2_AWD_FM_DM_WINS"), 63);
            set_stat_int(get_hash_key("MP2_AWD_FM_TDM_WINS"), 13);
            set_stat_int(get_hash_key("MP2_AWD_FM_GTA_RACES_WON"), 12);
            set_stat_int(get_hash_key("MP2_AWD_FM_GOLF_WON"), 2);
            set_stat_int(get_hash_key("MP2_AWD_FM_SHOOTRANG_TG_WON"), 2);
            set_stat_int(get_hash_key("MP2_AWD_FM_SHOOTRANG_RT_WON"), 2);
            set_stat_int(get_hash_key("MP2_AWD_FM_SHOOTRANG_CT_WON"), 2);
            set_stat_int(get_hash_key("MP2_AWD_FM_SHOOTRANG_GRAN_WON"), 2);
            set_stat_int(get_hash_key("MP2_AWD_FM_TENNIS_WON"), 2);
            set_stat_int(get_hash_key("MP2_MPPLY_TENNIS_MATCHES_WON"), 2);
            set_stat_int(get_hash_key("MP2_MPPLY_TOTAL_TDEATHMATCH_WON"), 63);
            set_stat_int(get_hash_key("MP2_MPPLY_TOTAL_RACES_WON"), 101);
            set_stat_int(get_hash_key("MP2_MPPLY_TOTAL_DEATHMATCH_LOST"), 23);
            set_stat_int(get_hash_key("MP2_MPPLY_TOTAL_RACES_LOST"), 36);
            set_stat_int(get_hash_key("MP2_AWD_25_KILLS_STICKYBOMBS"), 50);
            set_stat_int(get_hash_key("MP2_AWD_50_KILLS_GRENADES"), 50);
            set_stat_int(get_hash_key("MP2_GRENADE_ENEMY_KILLS"), 50);
            set_stat_int(get_hash_key("MP2_AWD_20_KILLS_MELEE"), 50);
            //set_stat_int(get_hash_key(ConvertString(("NO_MASKS_UNLOCK"), 25);
            //set_stat_int(get_hash_key(ConvertString(("NO_TATTOOS_UNLOCK", 61);

            set_stat_bool(get_hash_key("MP2_AWD_FMMOSTKILLSSURVIVE"),  1);

           // set_stat_int(get_hash_key(ConvertString(("AWD_ENEMYDRIVEBYKILLS"), 10);

            set_stat_int(get_hash_key("MP2_AWD_FMRALLYWONDRIVE"), 2);
            set_stat_int(get_hash_key("MP2_AWD_FMWINSEARACE"), 2);
            set_stat_int(get_hash_key("MP2_AWD_FMWINAIRRACE"), 2);
            set_stat_int(get_hash_key("MP2_MPPLY_TIMES_RACE_BEST_LAP"), 101);
            set_stat_int(get_hash_key("MP2_NUMBER_TURBO_STARTS_IN_RACE"), 100);
            set_stat_int(get_hash_key("MP2_AWD_FM_RACES_FASTEST_LAP"), 101);
            set_stat_int(get_hash_key("MP2_NUMBER_SLIPSTREAMS_IN_RACE"), 105);
           // set_stat_int(get_hash_key("MP2_CASH_GIFT_CREDITED"), 999);
            set_stat_int(get_hash_key("MP2_MPPLY_RACE_CHEAT_START"), 130);
            set_stat_int(get_hash_key("MP2_MPPLY_RACE_CHEAT_END"), 119);
            set_stat_int(get_hash_key("MP2_MPPLY_RACE_CHEAT_QUIT"), 11);
            set_stat_int(get_hash_key("MP2_MPPLY_DM_CHEAT_START"), 140);
            set_stat_int(get_hash_key("MP2_MPPLY_DM_CHEAT_END"), 115);
            set_stat_int(get_hash_key("MP2_MPPLY_DM_CHEAT_QUIT"), 25);
            set_stat_int(get_hash_key("MP2_MPPLY_MC_CHEAT_START"), 113);
            set_stat_int(get_hash_key("MP2_MPPLY_MC_CHEAT_END"), 97);
            set_stat_int(get_hash_key("MP2_MPPLY_MC_CHEAT_QUIT"), 16);
            set_stat_int(get_hash_key("MP2_MPPLY_OVERALL_CHEAT"), 0);

            set_stat_int(get_hash_key("MP2_LAP_DANCED_BOUGHT"), 50);

            set_stat_int(get_hash_key("MP2_AWD_FMKILLBOUNTY"), 50);
            set_stat_bool(get_hash_key("MP2_AWD_FMKILL3ANDWINGTARACE"),  1);
            set_stat_int(get_hash_key("MP2_AWD_FMREVENGEKILLSDM"), 60);
            set_stat_int(get_hash_key("MP2_AWD_SECURITY_CARS_ROBBED"), 40);
            set_stat_bool(get_hash_key("MP2_AWD_FMPICKUPDLCCRATE1ST"),  1);
return 0;
}
#endif

float speed_loc = 0.1;
bool speed_req = false;
bool speedo_ready = false;
bool analog_loop = false;
int Analog(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!analog_loop) {
	analog_loop = true;
	speed_loc = 0.09;
	speed_req = true;
	if (gauge == 0)
	gauge = 4;
	}
	else if (analog_loop) {
	analog_loop = false;
	}
	return 0;
}
bool dark = false;
bool damaged = false;
int idamage;
void analog_speedo() 
{
	if (!is_ped_on_foot(PlayerPedId()))
	{
	int ispeed;
	int car = GetCarCharIsIn(PlayerPedId(), 0);//GET_CAR_CHAR_IS_USING(GetPlayerPed(), &veh_speed);
    float speed = get_entity_speed(car);
	float damage = get_vehicle_engine_health(car);
	idamage = (int) damage; // float to int
	if (idamage < 750)
	{
	damaged = true;
	}
	else
	{
	damaged = false;
	}
	if (get_clock_hours() > 19 || (get_clock_hours() < 7))
	{
	dark = true;
	}
	else if (get_clock_hours() < 7)
	{
	dark = true;
	}
	else 
	{
	dark = false;
	}
	if (gauge == 1)
	{
    speed = speed * 4.30; 
	ispeed = (int) speed; // float to int
	if (dark)
	{
	draw_sprite("mpmissmarkers256", "sea_race_icon", 0.12f, 0.2f, 0.28f, 0.41f, 0.0f, 255, 255, 255, 225);
	if (speed > 293)
	{
	//draw_sprite("mpmissmarkers256", "foot_race_icon", 0.12f, 0.2f, 0.2f, 0.18f, 294, 255, 255, 255, 255);
	draw_sprite("mpmissmarkers256", "foot_race_icon", 0.12f, 0.2f, 0.28f, 0.41f, 210, 255, 255, 255, 225);
	}
	else
	{
	if (speed < 80)
	{
	draw_sprite("mpmissmarkers256", "foot_race_icon", 0.12f, 0.2f, 0.28f, 0.41f, speed - 88, 255, 255, 255, 225);
	}
	else 
	{
	draw_sprite("mpmissmarkers256", "foot_race_icon", 0.12f, 0.2f, 0.28f, 0.41f, speed - 88, 255, 255, 255, 225);
	}
	}
	}
	else if (!dark)
	{
	draw_sprite("mpmissmarkers256", "last_team_standing_icon", 0.12f, 0.2f, 0.28f, 0.41f, 0.0f, 255, 255, 255, 225);
	if (speed > 293)
	{
	draw_sprite("mpmissmarkers256", "survival_icon", 0.12f, 0.2f, 0.28f, 0.41f, 210, 255, 255, 255, 225);
	}
	else
	{
	if (speed < 80)
	{
	draw_sprite("mpmissmarkers256", "survival_icon", 0.12f, 0.2f, 0.28f, 0.41f, speed - 88, 255, 255, 255, 225);
	}
	else
	{
	draw_sprite("mpmissmarkers256", "survival_icon", 0.12f, 0.2f, 0.28f, 0.41f, speed - 88, 255, 255, 255, 225);
	}
	}
	}
	}
	else if (gauge == 2)
	{
	speed = speed * 4.55; 
	ispeed = (int) speed; // float to int
	PrintToScreenNum(ispeed, speed_loc, 0.26000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 5);
	if (ispeed < 120)
	{
	PrintToScreenNum(ispeed, speed_loc, 0.26000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 5);
	}
	if (ispeed > 120)
	{
	PrintToScreenNum(ispeed, speed_loc, 0.26000000, 255, 255, 0, 255, 0.80000000, 0.80000000, 0, 5);
	}
	if (ispeed > 180)
	{
	PrintToScreenNum(ispeed, speed_loc, 0.26000000, 255, 165, 0, 255, 0.80000000, 0.80000000, 0, 5);
	}
	if (ispeed > 240)
	{
	PrintToScreenNum(ispeed, speed_loc, 0.26000000, 255, 0, 0, 255, 0.80000000, 0.80000000, 0, 5);
	}
	draw_sprite("mpmissmarkers256", "custom_icon", 0.12f, 0.2f, 0.2f, 0.3f, 0.0f, 255, 255, 255, 225);
	if (speed > 293)
	{
	draw_sprite("mpmissmarkers256", "tennis_icon", 0.12f, 0.2f, 0.2f, 0.3f, 294, 255, 255, 255, 255);
	}
	else
	{
	draw_sprite("mpmissmarkers256", "tennis_icon", 0.12f, 0.2f, 0.2f, 0.3f, speed, 255, 255, 255, 255);
	}
	}
	else if (gauge == 3)
	{
	speed = speed * 4.55; 
	ispeed = (int) speed; // float to int
	PrintToScreenNum(ispeed, 0.1, 0.27000000, 0, 77, 33, 225, 0.50000000, 0.50000000, 0, 5);
	draw_sprite("mpmissmarkers256", "basejump_icon", 0.12f, 0.2f, 0.2f, 0.3f, 0.0f, 255, 255, 255, 225);
	if (speed > 293)
	{
	draw_sprite("mpmissmarkers256", "deathmatch_marker_256", 0.12f, 0.2f, 0.2f, 0.3f, 294 - 89, 255, 255, 255, 255);
	}
	else
	{
	draw_sprite("mpmissmarkers256", "deathmatch_marker_256", 0.12f, 0.2f, 0.2f, 0.3f, speed - 89, 255, 255, 255, 255);
	}
	}
	else if (gauge == 4)
	{
	speed = speed * 5.45; 
	ispeed = (int) speed; // float to int
	if (!dark) // day damage gauge
	{
	draw_sprite("mpmissmarkers256", "vehicledeathmatch_icon", 0.12f, 0.2f, 0.35f, 0.45f, 0.0f, 255, 255, 255, 225);
	if (damaged)
	draw_sprite("mpmissmarkers256", "gangattack_icon", 0.12f, 0.2f, 0.35f, 0.45f, 0.0f, 255, 255, 255, 225);
	if (speed > 250)
	{
	draw_sprite("mpmissmarkers256", "darts_icon", 0.12f, 0.2f, 0.35f, 0.45f, 251 - 65, 255, 255, 255, 255);
	}
	else
	{
	draw_sprite("mpmissmarkers256", "darts_icon", 0.12f, 0.2f, 0.35f, 0.45f, speed - 65, 255, 255, 255, 255);
	}
	}
	else if (dark) // night time
	{
	draw_sprite("mpmissmarkers256", "bike_race_icon", 0.12f, 0.2f, 0.35f, 0.45f, 0.0f, 255, 255, 255, 225);
	if (damaged)
	draw_sprite("mpmissmarkers256", "gangattack_icon", 0.12f, 0.2f, 0.35f, 0.45f, 0.0f, 255, 255, 255, 225);
	if (speed > 250)
	{
	draw_sprite("mpmissmarkers256", "corona_point", 0.12f, 0.2f, 0.35f, 0.45f, 251 - 65, 255, 255, 255, 255);
	}
	else
	{
	draw_sprite("mpmissmarkers256", "corona_point", 0.12f, 0.2f, 0.35f, 0.45f, speed - 65, 255, 255, 255, 255);
	}
	}
	}
	}
}
#endif
void cam_loop()
{
	if (cam_check)
	{
	if (is_ped_on_foot(PlayerPedId()))
	{ 
	        float lineThickness = 0.001f;
            float lineLength = 0.02f;
            draw_rect(0.5f, 0.5f, lineLength, lineThickness, 255, 0, 0, 255);
            draw_rect(0.5f, 0.5f, lineThickness, lineLength + 0.01f, 255, 0, 0, 255);
	}
	set_cam_active(cam, true);
	get_gameplay_cam_rot(2, rot);
	set_cam_rot(cam, rot);
	}
}

/*void ufoloop() {
rock
}*/

/*bool bUfo;
void ufomode_1_loop()
{
	if ( (is_control_pressed( 2, 176 ) && is_control_just_pressed( 2, 182 )) )
	{
		bUfo = !bUfo;
		set_ped_stealth_movement( PlayerPedId(), 0, 0 );
		ShowMessageOnScreen( "Fly mod %s.", bUfo ? "on", "off" );
		if ( ! (bUfo ) )
		{
			//freeze_your_car_or_player( false )
			int Handle = are_you_in_veh_if_so_get_handle();
			if ( !Handle )
				Handle = PlayerPedId();
			apply_force_to_entity( Handle, 1, 0.0f, 0.0f, -0.1f, 0.0f, 0.0f, 0.0f, 0, 1, 0, 0, 0, 1 );
		}
	}
	if ( bUfo )
		ufomode_1();
}



void ufomode_1()
{
	int Handle = are_you_in_veh_if_so_get_handle();
	bool isInVeh = Handle != 0;
	if ( !isInVeh )
		Handle = PlayerPedId();
	float var_1 = is_control_pressed( 2, 194 ) ? 4.0f : 1.0f,
		z = get_gameplay_cam_rot( 2 )[2],//z
		temp;

	set_entity_heading( Handle, z );
	set_gameplay_cam_relative_heading( 0.0f );
	temp = get_gameplay_cam_relative_pitch() + 3.0f ;

	if ( isInVeh )// unsure :/
		temp += 4.0f;

	set_gameplay_cam_relative_pitch( temp, 1.0f );
	freeze_entity_position( Handle, 1 );

	if (!((((get_control_normal( 2, 181 ) == 0.0f && get_control_normal( 2, 180 )) == 0.0f &&
		get_control_normal( 2, 186 )) == 0.0f && get_control_normal( 2, 185 ) == 0.0f)))
	{
		float var_3 = get_control_normal( 2, 186 ) * -1.0f * var_1,
			var_4 = get_control_normal( 2, 180 ) * -1.0f * var_1;

		var_4 = get_control_normal( 2, 181 ) * var_1 + var_4;

		set_entity_coords_no_offset( Handle, get_offset_from_entity_in_world_coords( Handle, get_control_normal( 2, 185 ) * var_1, var_3, var_4 ), 0, 0, 0 );
	}
}*/

bool xmas = false;
int ToggleXmas(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	
	int pointer = *(int *)(Var_Pointer + 4);
	pointer += (4605 * 4);
	xmas ^= true;//Toggle xmas
	if (xmas) {
	*(int *)(pointer + 0x20) = 1;
	*(int *)pointer = 1;
	}
	else if (!xmas) {
	*(int *)(pointer + 0x20) = 0;
	*(int *)pointer = 0;
	}
	ShowMessageOnScreen("~b~ XMAS %s", xmas ? "Activated" : "Disabled");
	return 0;
}//

int FWLimit(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int pointer = *(int *)(Var_Pointer + 4);
	pointer += (5878 * 4);
	*(int *)pointer = 999999999;
	ShowMessageOnScreen("Fireworks limit removed!");
return 0;
}

bool nyloaded = false;
int LoadNY(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	nyloaded = true;
	ShowMessageOnScreen("North Yankton Loaded (Only you can see this)!");
return 0;
}


bool fan_garage = false;
bool fan_delete = false;
bool garagefun = false;
int GarageFan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!fan_garage) {
    objectspawn = true;
	model = 1952396163;
	garagefun = true;
	fan_garage = true;
	}
	else if (fan_garage) {
	fan_delete = true;
	fan_garage = false;
	}
	ShowMessageOnScreen("~b~ Garage Troll %s", fan_garage ? "Activated" : "Disabled");

	return 0;
}//

bool bounty = false;
int ToggleBounty(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int value = -2147000;
	int pointer = *(int *)(Var_Pointer + 4);
	pointer += (143 * 4);
	bounty ^= true;//Toggle bounty
	if(bounty) {
		*(int *)pointer = value;
	}
	else {
		*(int *)pointer = 1;
	}
	ShowMessageOnScreen("~b~ Massive Bounty %s", bounty ? "Activated" : "Disabled");

	return 0;
}//

int SpawnBodyParts(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	objectspawn = true;
	normalspawn = true;
	model = -1268580434; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	ShowMessageOnScreen("~b~ Body parts spawned!");
	return 0;
}//

int SpawnEgg(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	objectspawn = true;
	normalspawn = true;
	model = 1803116220; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	ShowMessageOnScreen("~b~ Alien egg spawned!");
	return 0;
}//

int SpawnShit(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	objectspawn = true;
	normalspawn = true;
	model = -2071359746; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	ShowMessageOnScreen("~b~ Big shit spawned!");
	return 0;
}//

int SpawnAsteroid(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	objectspawn = true;
	normalspawn = true;
	model = -543669801; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	ShowMessageOnScreen("~b~ Big asteroid spawned!");
	return 0;
}//

int SpawnUfo(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	objectspawn = true;
	normalspawn = true;
	model = 0xB467C540; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	ShowMessageOnScreen("~b~ Big Ufo spawned!");
	return 0;
}//

int SpawnFerris(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	objectspawn = true;
	normalspawn = true;
	model = -1003748966; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	ShowMessageOnScreen("~b~ Ferris Wheel spawned!");
	return 0;
}//

int SpawnLine(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	objectspawn = true;
	normalspawn = true;
	model = -1157901789; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	ShowMessageOnScreen("~b~ Start line spawned!");
	return 0;
}//

int SpawnPipe(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	objectspawn = true;
	normalspawn = true;
	model = 1185512375; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	ShowMessageOnScreen("~b~ Gate spawned!");
	return 0;
}//

int BarrierS(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	objectspawn = true;
	normalspawn = true;
	model = 868148414; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	ShowMessageOnScreen("~b~ Short Barrier spawned!");
	return 0;
}//

int BarrierL(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	objectspawn = true;
	normalspawn = true;
	model = 1603241576; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	ShowMessageOnScreen("~b~ Long Barrier spawned!");
	return 0;
}//

int WBarrier(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	objectspawn = true;
	normalspawn = true;
	model = 24969275; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	ShowMessageOnScreen("~b~ Wooden Barrier spawned!");
	return 0;
}//

int AWBarrier(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	objectspawn = true;
	normalspawn = true;
	model = 1867879106; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	ShowMessageOnScreen("~b~ Arrow Wooden Barrier spawned!");
	return 0;
}//

int MBarrier(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	objectspawn = true;
	normalspawn = true;
	model = 54588191; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	ShowMessageOnScreen("~b~ Metal Barrier spawned!");
	return 0;
}//

int RoadCone(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	objectspawn = true;
	normalspawn = true;
	model = -534360227; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	ShowMessageOnScreen("~b~ Road Cone spawned!");
	return 0;
}//

int SpawnContainer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	objectspawn = true;
	normalspawn = true;
	model = -629735826; // spunk ramp 0xBF8918DE // UFO 0xB467C540
	ShowMessageOnScreen("~b~ Container Spawned!");
	return 0;
}//

int MoveUp(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) { // working
	if (DoesEntityExist(objecthandle)) {
	float Pos[3];
	network_request_control_of_entity(objecthandle);
	GetEntityCoords(objecthandle, Pos);
	objectcoordz = Pos[2];
	objectcoordz += 0.1;
	network_request_control_of_entity(objecthandle);
	set_entity_coords(objecthandle, Pos[0], Pos[1], objectcoordz, 1, 0, 0, 1);
	ShowMessageOnScreen("~b~ Moved Object Up");
	return 0;
}
}

int MoveDown(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) { // working
	if (DoesEntityExist(objecthandle)) {
	float Pos[3];
	network_request_control_of_entity(objecthandle);
	GetEntityCoords(objecthandle, Pos);
	objectcoordz = Pos[2];
	objectcoordz -= 0.1;
	network_request_control_of_entity(objecthandle);
	set_entity_coords(objecthandle, Pos[0], Pos[1], objectcoordz, 1, 0, 0, 1);
	ShowMessageOnScreen("~b~ Moved Object Down");
	return 0;
}
}

int MoveForward(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) { // was move right
	if (DoesEntityExist(objecthandle)) {
	float Pos[3];
    network_request_control_of_entity(objecthandle);
	GetEntityCoords(objecthandle, Pos);
	objectcoordy = Pos[1];
	objectcoordy += 0.1;
	network_request_control_of_entity(objecthandle);
	set_entity_coords(objecthandle, Pos[0], objectcoordy, Pos[2], 1, 0, 0, 1);
	ShowMessageOnScreen("~b~ + Y Axis");
	return 0;
}
}
bool snap = false;
int SnapGround(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) { // was move right
	if (DoesEntityExist(objecthandle)) {
	//float Position[3];
	//GetEntityCoords(objecthandle, Position);
	float Position[3], dim_min[3], dim_max[3];
	get_model_dimensions(get_entity_model(PlayerPedId()), dim_min, dim_max);
	get_offset_from_entity_in_world_coords(PlayerPedId(), dim_min[0], dim_min[1] + 4.0f, 0.0f, Position);
	get_ground_z_for_3d_coord(Position[0], Position[1], Position[2], &Position[2]);
	set_entity_coords(objecthandle, Position[0], Position[1], Position[2], 1, 0, 0, 1);
	ShowMessageOnScreen("~b~ Snapped Object To Ground Height");
	return 0;
}
}


int MoveBackward(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) { // was move forward
	if (DoesEntityExist(objecthandle)) {
	float Pos[3];
	network_request_control_of_entity(objecthandle);
	GetEntityCoords(objecthandle, Pos);
	objectcoordy = Pos[1];
	objectcoordy -= 0.1;
	network_request_control_of_entity(objecthandle);
	set_entity_coords(objecthandle, Pos[0], objectcoordy, Pos[2], 1, 0, 0, 1);
	ShowMessageOnScreen("~b~ - Y Axis");
	return 0;
}
}

int MoveLeft(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) { // was move backward
	if (DoesEntityExist(objecthandle)) {
	float Pos[3];
	network_request_control_of_entity(objecthandle);
	GetEntityCoords(objecthandle, Pos);
	objectcoordx = Pos[0];
	objectcoordx -= 0.1;
	network_request_control_of_entity(objecthandle);
	set_entity_coords(objecthandle, objectcoordx, Pos[1], Pos[2], 1, 0, 0, 1);
	ShowMessageOnScreen("~b~ - X Axis");
	return 0;
}
}

int MoveRight(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) { // was move left
	if (DoesEntityExist(objecthandle)) {
	float Pos[3];
	network_request_control_of_entity(objecthandle);
	GetEntityCoords(objecthandle, Pos);
	objectcoordx = Pos[0];
	objectcoordx += 0.1;
	network_request_control_of_entity(objecthandle);
	set_entity_coords(objecthandle, objectcoordx, Pos[1], Pos[2], 1, 0, 0, 1);
	ShowMessageOnScreen("~b~ + X Axis");
	return 0;
}
}

int HeadingLeft(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
	network_request_control_of_entity(objecthandle);
	objectyaw = get_entity_heading(objecthandle);
	objectyaw += 2.0;
	network_request_control_of_entity(objecthandle);
	set_entity_rotation(objecthandle,objectpitch,objectroll,objectyaw,2,1);
	ShowMessageOnScreen("~b~ + Yaw");
	return 0;
}
}

int HeadingRight(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
	network_request_control_of_entity(objecthandle);
	objectyaw = get_entity_heading(objecthandle);
	objectyaw -= 2.0;
	network_request_control_of_entity(objecthandle);
	set_entity_rotation(objecthandle,objectpitch,objectroll,objectyaw,2,1);
	ShowMessageOnScreen("~b~ - Yaw");
	return 0;
}
}

int ObjectFlat(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
	network_request_control_of_entity(objecthandle);
	objectheading = get_entity_heading(objecthandle);
	objectroll = 0;
	objectpitch = 0;
	network_request_control_of_entity(objecthandle);
	set_entity_heading(objecthandle, objectheading + 0.1);
	ShowMessageOnScreen("~b~ Object Set Straight");
	return 0;
}
}

int FreezeObject(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
	network_request_control_of_entity(objecthandle);
	freeze_entity_position(objecthandle, true);
	ShowMessageOnScreen("~b~ Frozen Object");
	return 0;
}
}

int UnfreezeObject(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
	network_request_control_of_entity(objecthandle);
	freeze_entity_position(objecthandle, false);
	ShowMessageOnScreen("~b~ Unfrozen Object");
	return 0;
}
}

int PlusPitch(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
	network_request_control_of_entity(objecthandle);
	objectyaw = get_entity_heading(objecthandle);
	objectpitch = get_entity_pitch(objecthandle);
	objectpitch += 1.0;
	network_request_control_of_entity(objecthandle);
	set_entity_rotation(objecthandle,objectpitch,objectroll,objectyaw,2,1);
	ShowMessageOnScreen("~b~ + Pitch");
	return 0;
}
}

int MinusPitch(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
	network_request_control_of_entity(objecthandle);
	objectyaw = get_entity_heading(objecthandle);
	objectpitch = get_entity_pitch(objecthandle);
	objectpitch -= 1.0;
	network_request_control_of_entity(objecthandle);
	set_entity_rotation(objecthandle,objectpitch,objectroll,objectyaw,2,1);
	ShowMessageOnScreen("~b~ - Pitch");
	return 0;
}
}

int PlusRoll(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
	network_request_control_of_entity(objecthandle);
	objectyaw = get_entity_heading(objecthandle);
	objectpitch = get_entity_pitch(objecthandle);
	objectroll += 1.0;
	network_request_control_of_entity(objecthandle);
	set_entity_rotation(objecthandle,objectpitch,objectroll,objectyaw,2,1);
	ShowMessageOnScreen("~b~ + Roll");
	return 0;
}
}

int MinusRoll(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (DoesEntityExist(objecthandle)) {
	network_request_control_of_entity(objecthandle);
	objectyaw = get_entity_heading(objecthandle);
	objectpitch = get_entity_pitch(objecthandle);
	objectroll -= 1.0;
	network_request_control_of_entity(objecthandle);
	set_entity_rotation(objecthandle,objectpitch,objectroll,objectyaw,2,1);
	ShowMessageOnScreen("~b~ - Roll");
	return 0;
}
}

int BoarModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0xCE5FF074;
	return 0;
}

int FootModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 1641334641;
	return 0;
}

int JesusModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 3459037009;
	return 0;
}

int RangerModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 1011059922;
	return 0;
}

int MexicanModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 3367706194;
	return 0;
}

int ChopModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x14EC17EA;
	return 0;
}

int ChopModel1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x14EC17EA;
	return 0;
}

int CoyoteModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x644AC75E;
	return 0;
}

int HuskyModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x4E8F95A2;
	return 0;
}

int MtLion(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x1250D7BA;
	return 0;
}

int ShepModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x431FC24C;
	return 0;
}

int ChimpModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = -1469565163;
	return 0;
}

int RetModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x349F33E1;
	return 0;
}

int PigModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0xB11BAB56;
	return 0;
}

int RotModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x9563221D;
	return 0;
}

int ZombieModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0xAC4B4506;
	return 0;
}

int GunmanModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0xB881AEE;
	return 0;
}

int PrisonnModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0xB1BB9B59;
	return 0;
}

int SwatModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x8D8F1B10;
	return 0;
}

int ClownModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x4498DDE;
	return 0;
}

int Bugstars(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x48114518;
	return 0;
}

int Diper(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x5442C66B;
	return 0;
}

int Fatso(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0xB5CF80E4;
	return 0;
}

int NakedMan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x55446010;
	return 0;
}

int SpaceMan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0xE7B31432;
	return 0;
}

int StatueMan(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x795AC7A8;
	return 0;
}

int Johhny(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x87CA80AE;
	return 0;
}

int FBI(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x3AE4A33B;
	return 0;
}

bool norandomcomps = false;
int Micheal(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0xD7114C9;
	norandomcomps = true;
	return 0;
}

int Hippy(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = -2126242959;
	//norandomcomps = true;
	return 0;
}

int Gangster(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = -1031795266;
	return 0;
}

int Trevor(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x9B810FA2;
	norandomcomps = true;
	return 0;
}

int Franklin(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0x9B22DBAF; 
	norandomcomps = true;
	return 0;
}

int LolWander(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animid = subMenuIndex;
	MakePlayerComeTome(subMenuIndex);
	return 0;
}
bool telefoot_prison = false;
int PrisonTele(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animid = subMenuIndex;
	telefoot_prison = true;
	return 0;
}

int TeleportWayOnline(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animid = subMenuIndex;
	telefoot_way = true;
	return 0;
}

int LolWanderTele(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animid = subMenuIndex;
	MakePlayerComeTomeFoot(subMenuIndex);
	return 0;
}


int KidNap(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animid = subMenuIndex;
	nap = true;
	return 0;
}

int PlayerLeave(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animid = subMenuIndex;
	kidnap = true;
	return 0;
}


bool vm_anim = false;
int StunLoop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "ragdoll@human";
	anim = "electrocute";
	animid = subMenuIndex;
	vm_anim = true;
	return 0;
}

int FireLoop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "ragdoll@human";
	anim = "on_fire";
	animid = subMenuIndex;
	vm_anim = true;
	return 0;
}

int PoleDance(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "mini@strip_club@pole_dance@pole_dance1";
	anim = "pd_dance_01";
	animid = subMenuIndex;
	vm_anim = true;
	return 0;
}

int PoleDance2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "mini@strip_club@pole_dance@pole_dance2";
	anim = "pd_dance_02";
	animid = subMenuIndex;
	vm_anim = true;
	return 0;
}

int PoleDance3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "mini@strip_club@pole_dance@pole_dance3";
	anim = "pd_dance_03";
	animid = subMenuIndex;
	vm_anim = true;
	return 0;
}

int PrivateDance(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "mini@strip_club@private_dance@part1";
	anim = "priv_dance_p1";
	animid = subMenuIndex;
	vm_anim = true;
	return 0;
}

int FuckAir(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "rcmpaparazzo_2";
	anim = "shag_loop_a";
	animid = subMenuIndex;
	vm_anim = true;
	return 0;
}

int FuckAir2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "rcmpaparazzo_2";
	anim = "shag_loop_poppy";
	animid = subMenuIndex;
	vm_anim = true;
	return 0;
}

int Tazer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "stungun@sitting";
	anim = "damage_vehicle";
	animid = subMenuIndex;
	vm_anim = true;
	return 0;
}

int Tazer2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "stungun@standing";
	anim = "damage";
	animid = subMenuIndex;
	vm_anim = true;
	return 0;
}

int ProsMale(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "mini@prostitutes@sexnorm_veh";
	anim = "sex_loop_male";
	animid = subMenuIndex;
	vm_anim = true;
	return 0;
}

int ProsFemale(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "mini@prostitutes@sexnorm_veh";
	anim = "sex_loop_prostitute";
	animid = subMenuIndex;
	vm_anim = true;
	return 0;
}

int BJMale(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "mini@prostitutes@sexnorm_veh";
	anim = "bj_loop_male";
	animid = subMenuIndex;
	vm_anim = true;
	return 0;
}

int BJFemale(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "mini@prostitutes@sexnorm_veh";
	anim = "bj_loop_prostitute";
	animid = subMenuIndex;
	vm_anim = true;
	return 0;
}

int Situps(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "amb@world_human_sit_ups@male@base";
	anim = "base";
	animid = subMenuIndex;
	vm_anim = true;
	return 0;
}//

int Pushups(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "amb@world_human_push_ups@male@base";
	anim = "base";
	animid = subMenuIndex;
	vm_anim = true;
	return 0;
}

int ArmsWave(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "random@car_thief@victimpoints_ig_3";
	anim = "arms_waving";
	animid = subMenuIndex;
	vm_anim = true;
	return 0;
}

int Chop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@amb@";
	anim = "hump_loop_chop";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int ChopF(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@amb@";
	anim = "hump_loop_ladydog";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int CopKneel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "random@arrests";
	anim = "kneeling_arrest_idle";
	animid = subMenuIndex;
	vm_anim = true;
	return 0;
}

int CopHands(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@move";
	anim = "dump_enter";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

void enablevehmods() {
int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
set_vehicle_mod_kit(vehicle, 0);
}
bool wheelsmodded = false;
int StockTyres(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ Stock tyres applied, If your wheels changed with the tyres just change your wheels in the menu!");
	return 0;
}

int CustomTyres(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 23, wheel, 1);
	ShowMessageOnScreen("~b~ Custom tyres applied, If your wheels changed with the tyres just change your wheels in the menu!");
	return 0;
}

int BpTyres(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyres_can_burst(vehicle, 0);
	ShowMessageOnScreen("~b~ Your tyres are now bulletproof!");
	return 0;
}

int NoArmour(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 16);
	ShowMessageOnScreen("~b~ Armour removed");
	return 0;
}

int StockWheels(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 23);
	ShowMessageOnScreen("~b~ Stock wheels applied");
	return 0;
}
int Smoke0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 255, 0, 0);
	ShowMessageOnScreen("~b~ Red tyre smoke applied");
	return 0;
}
int Smoke1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 0, 255, 0);
	ShowMessageOnScreen("~b~ Green tyre smoke applied");
	return 0;
}
int Smoke2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 0, 0, 255);
	ShowMessageOnScreen("~b~ Blue tyre smoke applied");
	return 0;
}
int Smoke3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 127, 0, 255);
	ShowMessageOnScreen("~b~ Purple tyre smoke applied");
	return 0;
}
int Smoke4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 255, 51, 255);
	ShowMessageOnScreen("~b~ Pink tyre smoke applied");
	return 0;
}
int Smoke5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 102, 178, 255);
	ShowMessageOnScreen("~b~ Sky blue tyre smoke applied");
	return 0;
}
int Smoke6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 255, 128, 0);
	ShowMessageOnScreen("~b~ Orange tyre smoke applied");
	return 0;
}
int Smoke7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 255, 255, 0);
	ShowMessageOnScreen("~b~ Yellow tyre smoke applied");
	return 0;
}
int Smoke8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_tyre_smoke_color(vehicle, 0, 255, 255);
	ShowMessageOnScreen("~b~ Cyan tyre smoke applied");
	return 0;
}
int StockFb(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 1);
	ShowMessageOnScreen("~b~ Stock front bumper installed");
	return 0;
}
bool turbo_check = false;
int TurboToggle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	if (!turbo_check) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
    toggle_vehicle_mod(vehicle, 18, 1);
	ShowMessageOnScreen("~b~ Turbo installed");
	turbo_check = true;
	}
	else if (turbo_check) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	toggle_vehicle_mod(vehicle, 18, 0);
	ShowMessageOnScreen("~b~ Turbo uninstalled");
	turbo_check = false;
	}
	return 0;
}

bool light_check = false;
int LightToggle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	if (!light_check) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
    toggle_vehicle_mod(vehicle, 22, 1);
	ShowMessageOnScreen("~b~ Xenon Lights installed");
	light_check = true;
	}
	else if (light_check) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	toggle_vehicle_mod(vehicle, 22, 0);
	ShowMessageOnScreen("~b~ Xenon Lights uninstalled");
	light_check = false;
	}
	return 0;
}

int Tint0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
    set_vehicle_window_tint(vehicle, 4);
	ShowMessageOnScreen("~b~ Tint removed!");
	return 0;
}
int Tint1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
    set_vehicle_window_tint(vehicle, 3);
	ShowMessageOnScreen("~b~ Light tint installed!");
	return 0;
}
int Tint2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
    set_vehicle_window_tint(vehicle, 2);
	ShowMessageOnScreen("~b~ Dark tint installed!");
	return 0;
}
int Tint3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
    set_vehicle_window_tint(vehicle, 1);
	ShowMessageOnScreen("~b~ Limo tint installed!");
	return 0;
}
int Tint4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
    set_vehicle_window_tint(vehicle, 5);
	ShowMessageOnScreen("~b~ Chr0m3's Black tint installed!");
	return 0;
}
int Tint5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
    set_vehicle_window_tint(vehicle, 7);
	ShowMessageOnScreen("~b~ Chr0m3's Green tint installed!");
	return 0;
}
bool door0 = false;
int OpenDoor0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	if (!door0) {
    set_vehicle_door_open(vehicle, 0);
	ShowMessageOnScreen("~b~ Drivers door opened");
	door0 = true;
	}
	else if (door0) {
    set_vehicle_door_shut(vehicle, 0);
	ShowMessageOnScreen("~b~ Drivers door closed");
	door0 = false;
	}
	return 0;
}
bool door1 = false;
int OpenDoor1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	if (!door1) {
    set_vehicle_door_open(vehicle, 1);
	ShowMessageOnScreen("~b~ Passenger door opened");
	door1 = true;
	}
	else if (door1) {
    set_vehicle_door_shut(vehicle, 1);
	ShowMessageOnScreen("~b~ Passenger door closed");
	door1 = false;
	}
	return 0;
}
bool door2 = false;
int OpenDoor2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	if (!door2) {
    set_vehicle_door_open(vehicle, 2);
	ShowMessageOnScreen("~b~ Drivers rear door opened");
	door2 = true;
	}
	else if (door2) {
    set_vehicle_door_shut(vehicle, 2);
	ShowMessageOnScreen("~b~ Drivers rear door closed");
	door2 = false;
	}
	return 0;
}
bool door3 = false;
int OpenDoor3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	if (!door3) {
    set_vehicle_door_open(vehicle, 3);
	ShowMessageOnScreen("~b~ Passenger rear door opened");
	door3 = true;
	}
	else if (door3) {
    set_vehicle_door_shut(vehicle, 3);
	ShowMessageOnScreen("~b~ Passenger rear door closed");
	door3 = false;
	}
	return 0;
}
bool door4 = false;
int OpenDoor4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	if (!door4) {
    set_vehicle_door_open(vehicle, 4);
	ShowMessageOnScreen("~b~ Hood opened");
	door4 = true;
	}
	else if (door4) {
    set_vehicle_door_shut(vehicle, 4);
	ShowMessageOnScreen("~b~ Hood closed");
	door4 = false;
	}
	return 0;
}
bool door5 = false;
int OpenDoor5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	if (!door5) {
    set_vehicle_door_open(vehicle, 5);
	ShowMessageOnScreen("~b~ Boot opened");
	door5 = true;
	}
	else if (door5) {
    set_vehicle_door_shut(vehicle, 5);
	ShowMessageOnScreen("~b~ Boot closed");
	door5 = false;
	}
	return 0;
}
int RemoveHood(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
    set_vehicle_door_broken(vehicle, 4, 1);
	ShowMessageOnScreen("~b~ Hood removed!");
	return 0;
}

int RemoveBoot(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_door_broken(vehicle, 5, 1);
	ShowMessageOnScreen("~b~ Boot Removed");
	return 0;
}

int Armour0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 16, 0, 0);
	ShowMessageOnScreen("~b~ 20 percent Armour installed");
	return 0;
}

int Armour1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 16, 1, 0);
	ShowMessageOnScreen("~b~ 40 percent Armour installed");
	return 0;
}

int Armour2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 16, 2, 0);
	ShowMessageOnScreen("~b~ 60 percent Armour installed");
	return 0;
}

int Armour3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 16, 3, 0);
	ShowMessageOnScreen("~b~ 80 percent Armour installed");
	return 0;
}

int Armour4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 16, 4, 0);
	ShowMessageOnScreen("~b~ 100 percent Armour installed");
	return 0;
}

int Fb0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 1, 0, 0);
	ShowMessageOnScreen("~b~ Front bumper 1 installed");
	return 0;
}
int Fb1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 1, 1, 0);
	ShowMessageOnScreen("~b~ Front bumper 2 installed");
	return 0;
}
int Fb2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 1, 2, 0);
	ShowMessageOnScreen("~b~ Front bumper 3 installed");
	return 0;
}

int StockSk(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 3);
	ShowMessageOnScreen("~b~ Stock side skirts installed");
	return 0;
}

int Sk0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 3, 0, 0);
	ShowMessageOnScreen("~b~ Side skirts 1 installed");
	return 0;
}
int Sk1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 3, 1, 0);
	ShowMessageOnScreen("~b~ Side skirts 2 installed");
	return 0;
}
int Sk2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 3, 2, 0);
	ShowMessageOnScreen("~b~ Side skirts 3 installed");
	return 0;
}

int StockHood(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 7);
	ShowMessageOnScreen("~b~ Stock hood installed");
	return 0;
}

int Hood0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 7, 0, 0);
	ShowMessageOnScreen("~b~ Hood 1 installed");
	return 0;
}
int Hood1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 7, 1, 0);
	ShowMessageOnScreen("~b~ Hood 2 installed");
	return 0;
}
int Hood2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 7, 2, 0);
	ShowMessageOnScreen("~b~ Hood 3 installed");
	return 0;
}

int Hood3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 7, 3, 0);
	ShowMessageOnScreen("~b~ Hood 4 installed");
	return 0;
}

int Hood4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 7, 4, 0);
	ShowMessageOnScreen("~b~ Hood 5 installed");
	return 0;
}

int StockInterior(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 5);
	ShowMessageOnScreen("~b~ Stock interior applied");
	return 0;
}

int Interior0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 5, 0, 0);
	ShowMessageOnScreen("~b~ Custom interior installed");
	return 0;
}

int StockGrill(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 6);
	ShowMessageOnScreen("~b~ Stock grille installed");
	return 0;
}

int Grill0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 6, 0, 0);
	ShowMessageOnScreen("~b~ Grille 1 installed");
	return 0;
}
int Grill1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 6, 1, 0);
	ShowMessageOnScreen("~b~ Grille 2 installed");
	return 0;
}
int Grill2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 6, 2, 0);
	ShowMessageOnScreen("~b~ Grille 3 installed");
	return 0;
}

int StockRb(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 2);
	ShowMessageOnScreen("~b~ Stock rear bumper installed");
	return 0;
}

int Rb0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 2, 0, 0);
	ShowMessageOnScreen("~b~ Rear bumper 1 installed");
	return 0;
}
int Rb1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 2, 1, 0);
	ShowMessageOnScreen("~b~ Rear bumper 2 installed");
	return 0;
}
int Rb2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 2, 2, 0);
	ShowMessageOnScreen("~b~ Rear bumper 3 installed");
	return 0;
}

int StockSpoiler(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 0);
	ShowMessageOnScreen("~b~ Stock spoiler installed");
	return 0;
}

int Spoiler0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 0, 0, 0);
	ShowMessageOnScreen("~b~ Spoiler 1 installed");
	return 0;
}
int Spoiler1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 0, 1, 0);
	ShowMessageOnScreen("~b~ Spoiler 2 installed");
	return 0;
}
int Spoiler2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 0, 2, 0);
	ShowMessageOnScreen("~b~ Spoiler 3 installed");
	return 0;
}

int ExStock(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 4);
	ShowMessageOnScreen("~b~ Stock exhaust installed");
	return 0;
}

int Ex0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 4, 0, 0);
	ShowMessageOnScreen("~b~ Exhaust 1 installed");
	return 0;
}
int Ex1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 4, 1, 0);
	ShowMessageOnScreen("~b~ Exhaust 2 installed");
	return 0;
}
int Ex2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 4, 2, 0);
	ShowMessageOnScreen("~b~ Exhaust 2 installed");
	return 0;
}


int SuspStock(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 15);
	ShowMessageOnScreen("~b~ Stock suspension installed");
	return 0;
}

int Susp0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 15, 0, 0);
	ShowMessageOnScreen("~b~ Lowered suspension installed");
	return 0;
}

int Susp1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 15, 1, 0);
	ShowMessageOnScreen("~b~ Street suspension installed");
	return 0;
}

int Susp2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 15, 2, 0);
	ShowMessageOnScreen("~b~ Sports suspension installed");
	return 0;
}
int Susp3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 15, 3, 0);
	ShowMessageOnScreen("~b~ Competition suspension installed");
	return 0;
}

int BrakeStock(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 12);
	ShowMessageOnScreen("~b~ Stock brakes installed");
	return 0;
}

int Brake0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 12, 0, 0);
	ShowMessageOnScreen("~b~ Street brakes installed");
	return 0;
}

int Brake1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 12, 1, 0);
	ShowMessageOnScreen("~b~ Sports brakes installed");
	return 0;
}

int Brake2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 12, 2, 0);
	ShowMessageOnScreen("~b~ Race brakes installed");
	return 0;
}

int TranStock(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 13);
	ShowMessageOnScreen("~b~ Stock transmission installed");
	return 0;
}
int Tran0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 13, 0, 0);
	ShowMessageOnScreen("~b~ Street transmission installed");
	return 0;
}
int Tran1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 13, 1, 0);
	ShowMessageOnScreen("~b~ Sports transmission installed");
	return 0;
}
int Tran2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 13, 2, 0);
    ShowMessageOnScreen("~b~ Race transmission installed");
	return 0;
}
int EngineStock(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	remove_vehicle_mod(vehicle, 11);
	ShowMessageOnScreen("~b~ Stock engine installed");
	return 0;
}
int Engine0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 11, 0, 0);
	ShowMessageOnScreen("~b~ New engine has been installed!");
	return 0;
}
int Engine1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 11, 1, 0);
	ShowMessageOnScreen("~b~ New engine has been installed!");
	return 0;
}
int Engine2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 11, 2, 0);
	ShowMessageOnScreen("~b~ New engine has been installed!");
	return 0;
}
int Engine3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_mod(vehicle, 11, 3, 0);
	ShowMessageOnScreen("~b~ New engine has been installed!");
	return 0;
}

int HighEnd0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 0;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int HighEnd1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 1;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int HighEnd2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 2;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int HighEnd3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 3;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int HighEnd4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 4;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int HighEnd5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 5;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int HighEnd6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 6;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int HighEnd7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 7;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int HighEnd8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 8;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int HighEnd9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 9;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int HighEnd10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 10;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int HighEnd11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 11;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int HighEnd12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 12;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int HighEnd13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 13;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int HighEnd14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 14;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int HighEnd15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 15;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int HighEnd16(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 16;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int HighEnd17(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 17;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int HighEnd18(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 18;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int HighEnd19(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 19;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 7);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Lowrider0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 0;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Lowrider1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 1;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Lowrider2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 2;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Lowrider3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 3;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Lowrider4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 4;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Lowrider5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 5;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Lowrider6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 6;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Lowrider7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 7;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Lowrider8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 8;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Lowrider9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 9;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Lowrider10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 10;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Lowrider11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 11;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Lowrider12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 12;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Lowrider13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 13;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Lowrider14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 14;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 2);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Muscle0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 0;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Muscle1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 1;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Muscle2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 2;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Muscle3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 3;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Muscle4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 4;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Muscle5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 5;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Muscle6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 6;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Muscle7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 7;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Muscle8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 8;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Muscle9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 9;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Muscle10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 10;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Muscle11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 11;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Muscle12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 12;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Muscle13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 13;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Muscle14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 14;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Muscle15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 15;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Muscle16(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 16;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Muscle17(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 17;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 1);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Offroad0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 0;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Offroad1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 1;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Offroad2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 2;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Offroad3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 3;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Offroad4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 4;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Offroad5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 5;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Offroad6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 6;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Offroad7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 7;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Offroad8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 8;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Offroad9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 9;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 4);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Sport0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 0;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Sport1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 1;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Sport2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 2;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Sport3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 3;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Sport4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 4;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Sport5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 5;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Sport6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 6;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Sport7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 7;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Sport8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 8;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Sport9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 9;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Sport10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 10;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Sport11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 11;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Sport12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 12;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Sport13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 13;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Sport14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 14;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Sport15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 15;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Sport16(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 16;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Sport17(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 17;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Sport18(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 18;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Sport19(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 19;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Sport20(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 20;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Sport21(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 21;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Sport22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 22;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Sport23(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 23;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Sport24(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 24;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 0);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int SUV0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 0;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int SUV1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 1;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int SUV2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 2;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int SUV3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 3;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int SUV4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 4;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int SUV5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 5;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int SUV6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 6;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int SUV7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 7;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int SUV8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 8;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int SUV9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 9;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int SUV10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 10;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int SUV11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 11;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int SUV12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 12;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int SUV13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 13;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int SUV14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 14;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int SUV15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 15;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int SUV16(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 16;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int SUV17(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 17;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int SUV18(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 18;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 3);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Tuner0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 0;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Tuner1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 1;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Tuner2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 2;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Tuner3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 3;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Tuner4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 4;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Tuner5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 5;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Tuner6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 6;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Tuner7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 7;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Tuner8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 8;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Tuner9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 9;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Tuner10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 10;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Tuner11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 11;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Tuner12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 12;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Tuner13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 13;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Tuner14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 14;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Tuner15(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 15;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Tuner16(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 16;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Tuner17(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 17;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Tuner18(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 18;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}
int Tuner19(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 19;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Tuner20(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 20;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Tuner21(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 21;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Tuner22(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 22;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}

int Tuner23(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	enablevehmods();
	wheel = 23;
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_wheel_type(vehicle, 5);
	set_vehicle_mod(vehicle, 23, wheel, 0);
	ShowMessageOnScreen("~b~ New wheels have been applied!");
	return 0;
}


	int Weather0(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
	{
	set_override_weather("BLIZZARD");
	ShowMessageOnScreen("~b~ Weather change been applied!");
	return 0;
	}
	int Weather1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
	{
	set_override_weather("CLEAR");
	ShowMessageOnScreen("~b~ Weather change been applied!");
	return 0;
	}
	int Weather2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
	{
	set_override_weather("CLEARING");
	ShowMessageOnScreen("~b~ Weather change been applied!");
	return 0;
	}
	int Weather3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
	{
	set_override_weather("CLOUDS");
	ShowMessageOnScreen("~b~ Weather change been applied!");
	return 0;
	}
	int Weather4(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
	{
	set_override_weather("EXTRASUNNY");
	ShowMessageOnScreen("~b~ Weather change been applied!");
	return 0;
	}
	int Weather5(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
	{
	set_override_weather("FOGGY");
	ShowMessageOnScreen("~b~ Weather change been applied!");
	return 0;
	}
	int Weather6(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
	{
	set_override_weather("NEUTRAL");
	ShowMessageOnScreen("~b~ Weather change been applied!");
	return 0;
	}
	int Weather7(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
	{
	set_override_weather("OVERCAST");
	ShowMessageOnScreen("~b~ Weather change been applied!");
	return 0;
	}
	int Weather8(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
	{
	set_override_weather("RAIN");
	ShowMessageOnScreen("~b~ Weather change been applied!");
	return 0;
	}
	int Weather9(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
	{
	set_override_weather("SMOG");
	ShowMessageOnScreen("~b~ Weather change been applied!");
	return 0;
	}
	int Weather10(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
	{
	set_override_weather("SNOW");
	ShowMessageOnScreen("~b~ Weather change been applied!");
	return 0;
	}
	int Weather11(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
	{
	set_override_weather("SNOWLIGHT");
	ShowMessageOnScreen("~b~ Weather change been applied!");
	return 0;
	}
	int Weather12(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
	{
	set_override_weather("THUNDER");
	ShowMessageOnScreen("~b~ Weather change been applied!");
	return 0;
	}
	/*int Weather13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
	{
	int time = get_clock_hours();
	if (time == 23) {
	time = 0;
    network_override_clock_time(0, 0, 0);
	ShowMessageOnScreen("~b~ Set to hour 24");
	}
	else {
    time++;
    network_override_clock_time(time, 0, 0);
	ShowMessageOnScreen("~b~ Set to hour %i", time);
	}
	return 0;
	}
	int Weather14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
	{
	int time = get_clock_hours();
	if (time == 1) {
	time = 0;
    network_override_clock_time(0, 0, 0);
	ShowMessageOnScreen("~b~ Set to hour 24");
	}
	else {
    time--;
    network_override_clock_time(time, 0, 0);
	ShowMessageOnScreen("~b~ Set to hour %i", time);
	}
	return 0;
	}*/

int Weather13(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
	{
    int time = get_clock_hours() + 1;
    if (time > 23) 
        time = 0;
    network_override_clock_time(time, 0, 0);
    ShowMessageOnScreen("~b~ Set to hour %i", time);
    return 0;
	}

int Weather14(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
    int time = get_clock_hours() - 1;
    if (time < 0)
        time = 23;
    network_override_clock_time(time, 0, 0);
    ShowMessageOnScreen("~b~ Set to hour %i", time);
    return 0;
}

#ifdef PRIVATE

bool Peg_Global = false;
int car_hash = 0x1FD824AF;
int pointer1;
int pointer2;
int Peg1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	/*int pointer = *(int *)(Var_Pointer + 4);
	pointer1 = pointer += (2131539 * 4); 
	pointer2 = pointer += (2134525 * 4);*/
	pointer1 = GlobalToAddress(2390986, 2697);
	pointer1 = GlobalToAddress(2394984, 1643 + 42);
	Peg_Global = true;
	ShowMessageOnScreen("~b~ Call up pegasus and order any vehicle and it will be a space docker!, May not work all the time!");
	return 0;
}

void pegasusloop() {
	*(int *)pointer1 = car_hash;
	*(int *)pointer2 = car_hash;
}

#endif

	/*Pegasus->AddStaticItem("Space Docker", false, Peg1, NULL);
	Pegasus->AddStaticItem("FBI Cruiser", false, Peg2, NULL);
	Pegasus->AddStaticItem("Clown Van", false, Peg3, NULL);
	Pegasus->AddStaticItem("Weed Van", false, Peg4, NULL);
	Pegasus->AddStaticItem("Sultan", false, Peg5, NULL);*/


bool Create = false;
int ToggleCreator(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	Create ^= true;// toggle
	snap ^= true;
	ShowMessageOnScreen("~b~ Creator mode %s!", Create ? "enabled, aim at an object" : "disabled");
	return 0;
}

void create_loop()
{
	if(unk_0x8866D9D0(PlayerId(), &objecthandle)) {
	if (IsEntityVehicle(objecthandle)) {
	ShowMessageOnScreen("~b~ Vehiche handle returned you can now move this vehicle with the object spawner options");
	}
	if (IsEntityObject(objecthandle)) {
    ShowMessageOnScreen("~b~ Object handle returned you can now move this object with the object spawner options");
	}
	}
}

void speed()
{
	int ispeed;
	if (!is_ped_on_foot(PlayerPedId()))
	{
	int car = GetCarCharIsIn(PlayerPedId(), 0);//GET_CAR_CHAR_IS_USING(GetPlayerPed(), &veh_speed);
	/*if (is_vehicle_in_burnout(car)) { ShowMessageOnScreen("~r~ Skid it up brah!!"); }
	else { ShowMessageOnScreen("No skid :("); }*/
    float speed = get_entity_speed(car);
    speed = speed * speedmul; // MaxSpeed (Default: 3.61)! (5.86)
    ispeed = (int) speed; // float to int
	PrintToScreen("Speed KM/H:", 0.05000000, 0.22000000, 0, 132, 202, 255, 0.80000000, 0.80000000, 0, 6);
	PrintToScreenNum(ispeed, 0.05000000, 0.26000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);
	if (ispeed < 120)
	{
	PrintToScreenNum(ispeed, 0.05000000, 0.26000000, 0, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);
	}
	if (ispeed > 120)
	{
	PrintToScreenNum(ispeed, 0.05000000, 0.26000000, 255, 255, 0, 255, 0.80000000, 0.80000000, 0, 6);
	}
	if (ispeed > 180)
	{
	PrintToScreenNum(ispeed, 0.05000000, 0.26000000, 255, 165, 0, 255, 0.80000000, 0.80000000, 0, 6);
	}
	if (ispeed > 240)
	{
	PrintToScreenNum(ispeed, 0.05000000, 0.26000000, 255, 0, 0, 255, 0.80000000, 0.80000000, 0, 6);
	}
	}
}

#ifdef personal

bool drop = false;
float cash[3];
int CashDrop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	cashclient = subMenuIndex;
	if (!drop) {
	drop = true;
	ShowMessageOnScreen("~b~ Cash Drop Active");
	//GetEntityCoords(GetPlayerHandle(subMenuIndex), cash);
	}
	else if (drop) {
	drop = false;
	ShowMessageOnScreen("~b~ Cash Drop Disabled");
	}
	return 0;
}
	/*for (int i = 0; i < Trailamount; i++) {
			float sin = (float)round(sin(i) * radius) + cash[1];
			float cos = (float)round(cos(i) * radius) + cash[0];
		}*/
int cashCount = 0,
	cashwait;
int cashcoount = 120; //3
int cashwaitam = 1000; //500
void cashloop() 
{
	GetEntityCoords(GetPlayerHandle(cashclient), cash);
	if(cashCount <= cashcoount) {
		create_ambient_pickup( get_hash_key("PICKUP_MONEY_VARIABLE"), cash, 0, 100000, 1, 0, 1 );
		create_ambient_pickup( get_hash_key("PICKUP_MONEY_VARIABLE"), cash, 0, 100000, 1, 0, 1 );
		create_ambient_pickup( get_hash_key("PICKUP_MONEY_VARIABLE"), cash, 0, 100000, 1, 0, 1 );
		cashCount += 3;
	}
	else
	{
		if(cashwait == 0)
			cashwait = GetTickCount();
		if((GetTickCount() - cashwait) > cashwaitam)
			cashCount = cashwait = 0;
		}
/*
create_ambient_pickup( get_hash_key("PICKUP_MONEY_VARIABLE"), cash, 0, 100000, 1, 0, 1 );
create_ambient_pickup( get_hash_key("PICKUP_MONEY_VARIABLE"), cash, 0, 100000, 1, 0, 1 );
create_ambient_pickup( get_hash_key("PICKUP_MONEY_VARIABLE"), cash, 0, 100000, 1, 0, 1 );
create_ambient_pickup( get_hash_key("PICKUP_MONEY_VARIABLE"), cash, 0, 100000, 1, 0, 1 );*/

}
#endif


bool cower;
int Cower(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animid = subMenuIndex;
	cower = true;
	/*animdict = "random@arrests";
	anim = "idle_2_hands_up";
	animid = subMenuIndex;
	vm_anim = true;*/

	return 0;
}
int StopLoop(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	StopPlayerTasks(subMenuIndex);
	return 0;
}


int BuffDude(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 0xDA116E7E;
	return 0;
}
bool comps = false;
int Random(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	comps = true;
	return 0;
}
int RageModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 880829941;
	return 0;
}

int MalePants(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 2109968527;
	return 0;
}
bool slender = false;
int Slendy(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	slender = true;
	scriptsetModel = 0x92991b72;
	return 0;
}
int FemalePants(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	scriptsetModel = 602513566;
	return 0;
}
bool activenos = false;
int ToggleNos(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//set_vehicle_boost_active
	activenos = !activenos;
	ShowMessageOnScreen("~b~ Nos is now %s.", activenos ? "On, Press LS To Use Nitrous!" : "off");
	return 0;
}
bool drift = false;
int Slidey(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//set_vehicle_boost_active
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	if (!drift) {
	unk_0x90D3A0D9(vehicle, 1);
	ShowMessageOnScreen("~b~ Time to drift!, This is terrible (Not my fault it's using one of rockstars natives)");
	drift = true;
	}
	else if (drift) {
	unk_0x90D3A0D9(vehicle, 0);
	ShowMessageOnScreen("~b~ Slidey car turned off.");
	drift = false;
	}
	return 0;
}

bool handdrift = false;
int SlideyHand(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//set_vehicle_boost_active
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	if (!handdrift) {
	//unk_0x90D3A0D9(vehicle, 1);
	ShowMessageOnScreen("~b~ Time to drift!, Press or hold A to activate slide");
	handdrift = true;
	}
	else if (handdrift) {
	//unk_0x90D3A0D9(vehicle, 0);
	ShowMessageOnScreen("~b~ Handbrake Slidey car turned off");
	handdrift = false;
	}
	return 0;
}

void slideyloop() {
	if (is_control_pressed(2, 174)) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
    unk_0x90D3A0D9(vehicle, 1);
	}
	if (is_control_just_released(2, 174)) {
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
    unk_0x90D3A0D9(vehicle, 0);
	}
}


int Lock(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//set_vehicle_boost_active
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_doors_locked(vehicle, 4);
	ShowMessageOnScreen("~b~ Vehicle has been locked!");
	return 0;
}

int Unlock(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//set_vehicle_boost_active
	int vehicle = GetCarCharIsIn(PlayerPedId(), 0);
	set_vehicle_doors_locked(vehicle, 0);
	ShowMessageOnScreen("~b~ Vehicle has been Unlocked!");
	return 0;
}


bool rocket, requested;
int ToggleRocket(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!rocket) {
	ShowMessageOnScreen("~b~ Vehicle Rockets On, Press LS To Shoot them!");
	rocket = true;
	requested = false;
	custom = false;
	}
	else if (rocket) {
	ShowMessageOnScreen("~b~ Vehicle Rockets Off");
	rocket = false;
	custom = false;
	}
	//ShowMessageOnScreen("~b~ Vehicle rockets are currently not working");
	return 0;
}

bool fwrocket;
int ToggleFWVehicle(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!fwrocket) {
	ShowMessageOnScreen("~b~ Vehicle Fireworks On, Press LS To Shoot them!");
	fwrocket = true;
	custom = false;
	}
	else if (fwrocket) {
	ShowMessageOnScreen("~b~ Vehicle Fireworks Off");
	fwrocket = false;
	custom = false;
	}
	//ShowMessageOnScreen("~b~ Vehicle rockets are currently not working");
	return 0;
}

void fwrocketloop() {
	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		targetpos2[3],
		launchpos1[3],
		launchpos2[3],
		rocket_speed;
	int PedID;
	if (is_ped_in_any_vehicle(PedID = PlayerPedId()))
	{

		if ( is_control_just_pressed( 2, 197 ) && !is_ped_on_foot(PedID)) // ls
		{
			printf("Pressed LS\n");
			int vehicle = GetCarCharIsIn(PedID, 0 ),
			Model = get_entity_model(vehicle);
			printf("Got vehicle %i \n", vehicle);
			get_model_dimensions( Model, dim_min, dim_max );
			printf("Got dimensions\n");

			if ( is_control_pressed( 2, 198 ) ) // rs
			{
				printf("Pressed RS\n");
				get_offset_from_entity_in_world_coords( vehicle, dim_min[0] - 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos1 ) ;
				get_offset_from_entity_in_world_coords( vehicle, dim_max[0] + 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos2 ) ;
				get_offset_from_entity_in_world_coords( vehicle, dim_min[0] - 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos1 );
				get_offset_from_entity_in_world_coords( vehicle, dim_max[0] + 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos2 );
				printf("Got offset\n");
			}
			else
			{
				printf("Got vehicle %i \n", vehicle);
				get_offset_from_entity_in_world_coords( vehicle, dim_min[0] - 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos1 );
				get_offset_from_entity_in_world_coords( vehicle, dim_max[0] + 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos2 );
				get_offset_from_entity_in_world_coords( vehicle, dim_min[0] - 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos1 );
				get_offset_from_entity_in_world_coords( vehicle, dim_max[0] + 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos2 );
				printf("Got offset 2\n");
				if ( Model == get_hash_key("surfer") || Model == get_hash_key("blazer") )
				{
					printf("Checked entity model\n"); 
					targetpos1[2] += 3.5f;
					targetpos2[2] += 3.5f;
				}
				else
				{
					printf("Checked entity model 2\n");
					targetpos1[2]--;
					targetpos2[2]--;
				}
			}
			float vSpeed = get_entity_speed( vehicle );
			if ( ( vSpeed * vSpeed ) > 1500 )
			{
				rocket_speed = ( vSpeed * vSpeed ) + 100;
				printf("Got and multiplied rocket / car speed\n");
			}
			else
			{
				rocket_speed = 1500;
			}
			if (custom){
			shoot_single_bullet_between_coords( launchpos1, targetpos1, 250, 0, get_hash_key("WEAPON_FIREWORK"), rocketid, 1, 1, rocket_speed );
			shoot_single_bullet_between_coords( launchpos2, targetpos2, 250, 0, get_hash_key("WEAPON_FIREWORK"), rocketid, 1, 1, rocket_speed );
			}
			else{
			shoot_single_bullet_between_coords( launchpos1, targetpos1, 250, 0, get_hash_key("WEAPON_FIREWORK"), PedID, 1, 1, rocket_speed );
			shoot_single_bullet_between_coords( launchpos2, targetpos2, 250, 0, get_hash_key("WEAPON_FIREWORK"), PedID, 1, 1, rocket_speed );
			}
			printf("Fired vehicle rockets \n");
		}
	}
}


void rocketloop() {
	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		targetpos2[3],
		launchpos1[3],
		launchpos2[3],
		rocket_speed;
	int PedID;
	if (is_ped_in_any_vehicle(PedID = PlayerPedId()))
	{

		if ( is_control_just_pressed( 2, 197 ) && !is_ped_on_foot(PedID)) // ls
		{
			printf("Pressed LS\n");
			int vehicle = GetCarCharIsIn(PedID, 0 ),
			Model = get_entity_model(vehicle);
			printf("Got vehicle %i \n", vehicle);
			get_model_dimensions( Model, dim_min, dim_max );
			printf("Got dimensions\n");

			if ( is_control_pressed( 2, 198 ) ) // rs
			{
				printf("Pressed RS\n");
				get_offset_from_entity_in_world_coords( vehicle, dim_min[0] - 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos1 ) ;
				get_offset_from_entity_in_world_coords( vehicle, dim_max[0] + 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos2 ) ;
				get_offset_from_entity_in_world_coords( vehicle, dim_min[0] - 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos1 );
				get_offset_from_entity_in_world_coords( vehicle, dim_max[0] + 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos2 );
				printf("Got offset\n");
			}
			else
			{
				printf("Got vehicle %i \n", vehicle);
				get_offset_from_entity_in_world_coords( vehicle, dim_min[0] - 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos1 );
				get_offset_from_entity_in_world_coords( vehicle, dim_max[0] + 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos2 );
				get_offset_from_entity_in_world_coords( vehicle, dim_min[0] - 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos1 );
				get_offset_from_entity_in_world_coords( vehicle, dim_max[0] + 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos2 );
				printf("Got offset 2\n");
				if ( Model == get_hash_key("surfer") || Model == get_hash_key("blazer") )
				{
					printf("Checked entity model\n"); 
					targetpos1[2] += 3.5f;
					targetpos2[2] += 3.5f;
				}
				else
				{
					printf("Checked entity model 2\n");
					targetpos1[2]--;
					targetpos2[2]--;
				}
			}
			float vSpeed = get_entity_speed( vehicle );
			if ( ( vSpeed * vSpeed ) > 1500 )
			{
				rocket_speed = ( vSpeed * vSpeed ) + 100;
				printf("Got and multiplied rocket / car speed\n");
			}
			else
			{
				rocket_speed = 1500;
			}
			if (custom){
			shoot_single_bullet_between_coords( launchpos1, targetpos1, 250, 0, get_hash_key("WEAPON_VEHICLE_ROCKET"), rocketid, 1, 1, rocket_speed );
			shoot_single_bullet_between_coords( launchpos2, targetpos2, 250, 0, get_hash_key("WEAPON_VEHICLE_ROCKET"), rocketid, 1, 1, rocket_speed );
			}
			else{
			shoot_single_bullet_between_coords( launchpos1, targetpos1, 250, 0, get_hash_key("WEAPON_VEHICLE_ROCKET"), PedID, 1, 1, rocket_speed );
			shoot_single_bullet_between_coords( launchpos2, targetpos2, 250, 0, get_hash_key("WEAPON_VEHICLE_ROCKET"), PedID, 1, 1, rocket_speed );
			}
			printf("Fired vehicle rockets \n");
		}
	}
}

bool mg;
int ToggleMg(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!mg) {
	ShowMessageOnScreen("~b~ Vehicle Super Machineguns On, Press	X To Shoot them!");
	mg = true;
	requested = false;
	custom = false;
	}
	else if (mg) {
	ShowMessageOnScreen("~b~ Vehicle Super Machineguns Off");
	mg = false;
	custom = false;
	}
	//ShowMessageOnScreen("~b~ Vehicle MG's are currently not working");
	return 0;
}

void mgloop() {
	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		targetpos2[3],
		launchpos1[3],
		launchpos2[3],
		rocket_speed;
	int PedID;
	if (is_ped_in_any_vehicle(PedID = PlayerPedId()))
	{

		if (menuInputHandler->XButtonDown() && !is_ped_on_foot(PedID)) // ls
		{
			//printf("Pressed LS\n");
			int vehicle = GetCarCharIsIn(PedID, 0 ),
			Model = get_entity_model(vehicle);
			//printf("Got vehicle %i \n", vehicle);
			get_model_dimensions( Model, dim_min, dim_max );
			//printf("Got dimensions\n");

			if ( is_control_pressed( 2, 198 ) ) // rs
			{
				//printf("Pressed RS\n");
				get_offset_from_entity_in_world_coords( vehicle, dim_min[0] - 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos1 ) ;
				get_offset_from_entity_in_world_coords( vehicle, dim_max[0] + 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos2 ) ;
				get_offset_from_entity_in_world_coords( vehicle, dim_min[0] - 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos1 );
				get_offset_from_entity_in_world_coords( vehicle, dim_max[0] + 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos2 );
				//printf("Got offset\n");
			}
			else
			{
				//printf("Got vehicle %i \n", vehicle);
				get_offset_from_entity_in_world_coords( vehicle, dim_min[0] - 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos1 );
				get_offset_from_entity_in_world_coords( vehicle, dim_max[0] + 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos2 );
				get_offset_from_entity_in_world_coords( vehicle, dim_min[0] - 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos1 );
				get_offset_from_entity_in_world_coords( vehicle, dim_max[0] + 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos2 );
				//printf("Got offset 2\n");
				if ( Model == get_hash_key("surfer") || Model == get_hash_key("blazer") )
				{
					//printf("Checked entity model\n"); 
					targetpos1[2] += 3.5f;
					targetpos2[2] += 3.5f;
				}
				else
				{
					//printf("Checked entity model 2\n");
					targetpos1[2]--;
					targetpos2[2]--;
				}
			}
			float vSpeed = get_entity_speed( vehicle );
			if ( ( vSpeed * vSpeed ) > 1500 )
			{
				rocket_speed = ( vSpeed * vSpeed ) + 100;
				//printf("Got and multiplied rocket / car speed\n");
			}
			else
			{
				rocket_speed = 1500;
			}
			if (custom){
			shoot_single_bullet_between_coords( launchpos1, targetpos1, 10, 1, get_hash_key("WEAPON_REMOTESNIPER"), rocketid, 0, 1, -1082130432 );
			shoot_single_bullet_between_coords( launchpos2, targetpos2, 10, 1, get_hash_key("WEAPON_REMOTESNIPER"), rocketid, 0, 1, -1082130432 );
			}
			else{
			shoot_single_bullet_between_coords( launchpos1, targetpos1, 10, 1, get_hash_key("WEAPON_REMOTESNIPER"), PedID, 0, 1, -1082130432 );
			shoot_single_bullet_between_coords( launchpos2, targetpos2, 10, 1, get_hash_key("WEAPON_REMOTESNIPER"), PedID, 0, 1, -1082130432 );
			}
			//printf("Fired vehicle rockets \n");
		}
	}
}

bool Mini;
int ToggleMini(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!Mini) {
	ShowMessageOnScreen("~b~ Vehicle Machineguns On, Press X To Shoot them!");
	Mini = true;
	requested = false;
	custom = false;
	}
	else if (Mini) {
	ShowMessageOnScreen("~b~ Vehicle Machineguns Off");
	Mini = false;
	custom = false;
	}
	return 0;
}

void miniloop() {
	float dim_min[3],
		dim_max[3],
		targetpos1[3],
		targetpos2[3],
		launchpos1[3],
		launchpos2[3],
		rocket_speed;
	int PedID;
	if (is_ped_in_any_vehicle(PedID = PlayerPedId()))
	{

		if (menuInputHandler->XButtonDown() && !is_ped_on_foot(PedID)) // ls
		{
			//printf("Pressed LS\n");
			int vehicle = GetCarCharIsIn(PedID, 0 ),
			Model = get_entity_model(vehicle);
			//printf("Got vehicle %i \n", vehicle);
			get_model_dimensions( Model, dim_min, dim_max );
			//printf("Got dimensions\n");

			if ( is_control_pressed( 2, 198 ) ) // rs
			{
				//printf("Pressed RS\n");
				get_offset_from_entity_in_world_coords( vehicle, dim_min[0] - 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos1 ) ;
				get_offset_from_entity_in_world_coords( vehicle, dim_max[0] + 0.2f, dim_min[1] - 0.5f, 0.0f, launchpos2 ) ;
				get_offset_from_entity_in_world_coords( vehicle, dim_min[0] - 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos1 );
				get_offset_from_entity_in_world_coords( vehicle, dim_max[0] + 0.2f, dim_min[1] - 300.5f, 0.5f, targetpos2 );
				//printf("Got offset\n");
			}
			else
			{
				//printf("Got vehicle %i \n", vehicle);
				get_offset_from_entity_in_world_coords( vehicle, dim_min[0] - 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos1 );
				get_offset_from_entity_in_world_coords( vehicle, dim_max[0] + 0.2f, dim_min[1] + 0.5f, 0.0f, launchpos2 );
				get_offset_from_entity_in_world_coords( vehicle, dim_min[0] - 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos1 );
				get_offset_from_entity_in_world_coords( vehicle, dim_max[0] + 0.2f, dim_min[1] + 300.5f, 0.5f, targetpos2 );
				//printf("Got offset 2\n");
				if ( Model == get_hash_key("surfer") || Model == get_hash_key("blazer") )
				{
					//printf("Checked entity model\n"); 
					targetpos1[2] += 3.5f;
					targetpos2[2] += 3.5f;
				}
				else
				{
					//printf("Checked entity model 2\n");
					targetpos1[2]--;
					targetpos2[2]--;
				}
			}
			float vSpeed = get_entity_speed( vehicle );
			if ( ( vSpeed * vSpeed ) > 1500 )
			{
				rocket_speed = ( vSpeed * vSpeed ) + 100;
				//printf("Got and multiplied rocket / car speed\n");
			}
			else
			{
				rocket_speed = 1500;
			}
			if (custom){
			shoot_single_bullet_between_coords( launchpos1, targetpos1, 10, 0, get_hash_key("WEAPON_ASSAULTRIFLE"), rocketid, 1, 1, -1082130432 );
			shoot_single_bullet_between_coords( launchpos2, targetpos2, 10, 0, get_hash_key("WEAPON_ASSAULTRIFLE"), rocketid, 1, 1, -1082130432 );
			}
			else{
			shoot_single_bullet_between_coords( launchpos1, targetpos1, 10, 0, get_hash_key("WEAPON_ASSAULTRIFLE"), PedID, 1, 1, -1082130432 );
			shoot_single_bullet_between_coords( launchpos2, targetpos2, 10, 0, get_hash_key("WEAPON_ASSAULTRIFLE"), PedID, 1, 1, -1082130432 );
			}
			//printf("Fired vehicle rockets \n");
		}
	}
}

void nosloop() {
	if (menuInputHandler->BButtonLSDown()) {
		int Handle = GetCarCharIsIn(PlayerPedId(), 0);
		if(Handle != 0)
		{
			if (is_vehicle_on_all_wheels(Handle)){
			set_vehicle_boost_active(Handle, 1);
			unk_0x1D980479("RaceTurbo", 0, 0);
			apply_force_to_entity(Handle, true, 0, 3.0f, 0, 0, 0, 0, true, true, true, true, false, true);
			set_vehicle_boost_active(Handle, 0);
			}
		}
	}
}

DWORD WINAPI KeyboardThread(LPVOID Value)
{
	int Index = (int)Value;
	switch(Index)
	{
	case 0:
		if (custom_per) {
			ZeroMemory(&Overlapped2, sizeof(Overlapped2));
			XShowKeyboardUI(0, VKBD_LATIN_NUMERIC, L"", L"Chr0m3's Custom Performance", L"Please enter your desired performance 0 - 1000", Username2, 15, &Overlapped2 );
			while(!XHasOverlappedIoCompleted(&Overlapped2))
				Sleep(100);
			float result = _wtof(Username2);
			printf("Entered Float = %f \n", result);
			set_vehicle_rpm(GetCarCharIsIn(PlayerPedId(), 0), result);
			custom_per = false;
		}
	    break;
	case 1:
	    if (custom_plate) {
		ZeroMemory(&Overlapped2, sizeof(Overlapped2));
	    XShowKeyboardUI(0, VKBD_DEFAULT, L"", L"Chr0m3's Custom Plate Shop", L"Please enter your desired plate", Username2, 8, &Overlapped2 );
	    while(!XHasOverlappedIoCompleted(&Overlapped2))
			Sleep(100);
		char str[9];
        wcstombs(str, Username2, 9);
		set_number_plate(GetCarCharIsIn(PlayerPedId(), 0), str);
		custom_plate = false;
		}
		break;
	case 2:
		ZeroMemory(&Overlapped2, sizeof(Overlapped2));
	    XShowKeyboardUI(0, VKBD_DEFAULT, L"", L"Chr0m3's Custom Model Changer", L"Please enter your desired model name (Example U_M_M_Jesus_01) \nNOTE: You may need to enter model more then once for it to register!", Username2, 20, &Overlapped2 );
	    while(!XHasOverlappedIoCompleted(&Overlapped2))
		Sleep(100);
		char str2[20];
        wcstombs(str2, Username2, 20);
		scriptsetModel = get_hash_key(str2);
	break;
	case 3:
		ZeroMemory(&Overlapped2, sizeof(Overlapped2));
	    XShowKeyboardUI(0, VKBD_DEFAULT, L"", L"Chr0m3's Custom Vehicles", L"Please enter your desired vehicle name (Example pony2) \nNOTE: You may need to enter model more then once for it to register!", Username2, 20, &Overlapped2 );
	    while(!XHasOverlappedIoCompleted(&Overlapped2))
		Sleep(100);
		char str1[20];
        wcstombs(str1, Username2, 20);
		car = true;
		scriptsetModel = get_hash_key(str1);
	break;
		case 4:
		ZeroMemory(&Overlapped2, sizeof(Overlapped2));
	    XShowKeyboardUI(0, VKBD_DEFAULT, L"", L"Chr0m3's Custom Object", L"Please enter your desired object name (Example p_spinning_anus_s) \nNOTE: You may need to enter model more then once for it to register!", Username2, 20, &Overlapped2 );
	    while(!XHasOverlappedIoCompleted(&Overlapped2))
		Sleep(100);
		char str3[20];
        wcstombs(str3, Username2, 20);
		objectspawn = true;
	    normalspawn = true;
	    model = get_hash_key(str3);
	break;
	}
	return 0;
}

int TogglePerf(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	custom_per = true;
	CreateThread(0, 0, KeyboardThread, 0, 0, 0);
	return 0;
}

int CustomModel(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	//scriptsetModel = -1026527405;//0x9CF26183;
	wtf = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)2, 0, 0);
	return 0;
}

int CustomVeh(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
	CreateThread(0, 0, KeyboardThread, (LPVOID)3, 0, 0);
	return 0;
}

int CustomObject(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	CreateThread(0, 0, KeyboardThread, (LPVOID)4, 0, 0);
	return 0;
}//
void supercar() {
}

bool speedon = false;
int Speed(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!speedon) {
	*(float*)0x82004F24 = 0.45f;
	ShowMessageOnScreen("~b~ Super speed / grip turned on");
	speedon = true;
	}
	else {
	*(float*)0x82004F24 = 0.16666667f;	
	ShowMessageOnScreen("~b~ Super speed / grip turned off");
	speedon = false;
	}
	return 0;
}

int GiveCash(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	//int Addr = 0x83AF8068;
	//*(__int64 *)(*(int *)(*(int *)(*(int *)Addr + 4) + ((*(int *)(Addr + 4) << 3) + 4)) + 8) = 999999999;
	((void(*)(int,int,int))0x82C5D738)(999999999, 0, 1);
	ShowMessageOnScreen("~b~ Cash given!");
	return 0;
}

int AttachPedHandle;
int AttachBouy(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	AttachPedHandle = selectedMenuIndexes->operator[](1);
	//0x64611296 Alien 0x9CF26183 Playboy (naked)
	/*printf("wtf\n");
	AttachPedHandle = selectedMenuIndexes->operator[](1);
	printf("Error here? \n");
	attachspawn = true;
	printf("1 Error here? \n");
	objectspawn = true;
	printf("2 Error here? \n");
	scriptsetModel = 0x1B276762;
	printf("3 Error here? \n");*/
	attach_entity_to_entity(PlayerPedId(), GetPlayerHandle(AttachPedHandle), -1, 0, -0.3, 0, 0, 0, 0);
	ShowMessageOnScreen("~b~ Attached to player!");
	return 0;
}
bool pedobject;
int spawnedobject;
bool spawn_egg = false;
int AttachBouy2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	spawn_egg = true;
	spawnedobject = 1803116220;
	z10 = 1.0;
	ShowMessageOnScreen("~b~ Attached egg to player!");
	return 0;
}

bool spawn_sword = false;
int Sword(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
//#ifdef PRIVATE
	GiveWeaponDelayed(PlayerPedId(), 0x99B507EA, 9999, 1); // knife
	//spawnedobject = get_hash_key("prop_boxing_glove_01");
	spawnedobject = get_hash_key("prop_cs_katana_01");
	spawn_sword = true;
	ShowMessageOnScreen("~b~ You have been given a sword!");
//#else
	//ShowMessageOnScreen("~r~ Sorry this is only available in the private version!");
//#endif
	return 0;
}

bool spawn_glove = false;
int Glove(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters)
{
//#ifdef PRIVATE
	spawnedobject = get_hash_key("prop_boxing_glove_01");
	spawn_glove = true;
	ShowMessageOnScreen("~b~ You have been given a boxing glove!");
	//#else
	//ShowMessageOnScreen("~r~ Sorry this is only available in the private version!");
//#endif
	return 0;
}

bool spawn_cone = false;
int AttachCone(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	spawn_cone = true;
	spawnedobject = -534360227;
	//z10 = 0.7;
	ShowMessageOnScreen("~b~ Attached cone to player!");
	return 0;
}

bool rapid_fire = false;
int RapidFire(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!rapid_fire) {
    ShowMessageOnScreen("~b~ Firework guns on");
	rapid_fire = true;
	}
	else if (rapid_fire)
	{
	ShowMessageOnScreen("~b~ Firework guns off");
	rapid_fire = false;
	}
	return 0;
}

bool firework_gun = false;
int FireworkGun(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!firework_gun) {
	fexp1 = "scr_indep_firework_starburst";
	fr = 1.0, fg = 0, fb = 0;
    ShowMessageOnScreen("~b~ Firework guns on");
	fwsize = 1.0;
	firework_gun = true;
	}
	else if (firework_gun)
	{
	ShowMessageOnScreen("~b~ Firework guns off");
	firework_gun = false;
	}
	return 0;
}

/*void set_self_ammo_as_max_ammo()
{
 Var32 var_0;
 Var32 var_1;
 var_0 = int get_current_weapon_hash();
 Stack.Push( set_ammo_in_clip( player_ped_id(), var_0, get_max_ammo_in_clip( player_ped_id(), var_0, 1 ) ) );
 if ( is_ped_shooting( player_ped_id() ) )
 {
  if ( (((GetHash("WEAPON_RPG") == var_0 || GetHash("WEAPON_STINGER") == var_0) || GetHash("WEAPON_PASSENGER_ROCKET") == var_0) || GetHash("WEAPON_STUNGUN") == var_0) )
  {
   set_current_ped_weapon( player_ped_id(), GetHash("WEAPON_MICROSMG"), 1 );
   set_current_ped_weapon( player_ped_id(), var_0, 1 );
  }
 }
}*/


bool creator_obj = false;
int AttachCreator(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	if (Create) {
	creator_obj = true;
	ShowMessageOnScreen("~b~ Attached object to player!");
	}
	else { ShowMessageOnScreen("~r~ You can't use this unless you have object selected using creator mode");
}
	return 0;
}

int AttachWeed(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 452618762;
	z10 = 0;
	ShowMessageOnScreen("~b~ Attached weed to player!");
	return 0;
}

int AttachNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	animid = selectedMenuIndexes->operator[](1);
	pedobject = true;
	spawnedobject = 1433474877;
	z10 = 0;
	ShowMessageOnScreen("~b~ Attached beer neon to player!");
	return 0;
}//

int PiggieBack(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	AttachPedHandle = selectedMenuIndexes->operator[](1);
	attach_entity_to_entity(PlayerPedId(), GetPlayerHandle(AttachPedHandle), -1, 0, -0.3, 0, 0, 0, 0);
	animdict = "mini@prostitutes@sexnorm_veh";
	anim = "bj_loop_male";
	animid = PlayerId();
	vm_anim = true;
	ShowMessageOnScreen("~b~ Piggy back!");
	return 0;
}
bool funnyshit = false;
int FuckPlayer(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	AttachPedHandle = selectedMenuIndexes->operator[](1);
	attach_entity_to_entity(PlayerPedId(), GetPlayerHandle(AttachPedHandle), -1, 0, -0.3, 0, 0, 0, 0);
	if (!funnyshit) {
    animdict = "rcmpaparazzo_2";
	anim = "shag_loop_a";
	animid = AttachPedHandle;
	vm_anim = true;
	funnyshit = true; // player
	}
	if (funnyshit) {
	animdict = "rcmpaparazzo_2";
	anim = "shag_loop_poppy";
	animid = PlayerId();
	vm_anim = true;
	funnyshit = false; // you
	}
	ShowMessageOnScreen("~b~ Enjoy the root!");
	return 0;
}

int ChopPiss1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@move";
	anim = "pee_right_enter";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int ChopPiss2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@move";
	anim = "pee_right_idle";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int ChopPiss3(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@move";
	anim = "pee_right_exit";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int ChopDump(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@move";
	anim = "dump_loop";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int ChopAttack2(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@melee@streamed_core@";
	anim = "attack";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int ChopAttack1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	int subMenuIndex = selectedMenuIndexes->operator[](1);
	animdict = "creatures@rottweiler@melee@streamed_core@";
	anim = "ground_attack_0";
	animid = PlayerId();
	vm_anim = true;
	return 0;
}

int Detach(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	detach_entity(PlayerPedId());
	ShowMessageOnScreen("~b~ Detached");
	return 0;
}
	float z = 0;
	float unk = 4.0;
	float unk1 = 2.5;
int RedNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	neonr = 255, neong = 0, neonb = 0;
	z = 0;
	unk = 4.0;
	unk1 = 2.5;
	return 0;
}

int GreenNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	neonr = 0, neong = 255, neonb = 0;
	z = 0;
	unk = 4.0;
	unk1 = 2.5;
	return 0;
}
int BlueNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	neonr = 0, neong = 0, neonb = 255;
	z = 0;
	unk = 4.0;
	unk1 = 2.5;
	return 0;
}
int PinkNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	neonr = 255, neong = 51, neonb = 255;
	z = 0;
	unk = 4.0;
	unk1 = 2.5;
	return 0;
}
int PurpleNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	neonr = 153, neong = 0, neonb = 153;
	z = 0;
	unk = 4.0;
	unk1 = 2.5;
	return 0;
}
int OrangeNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	neonr = 255, neong = 128, neonb = 0;
	z = 0;
	unk = 4.0;
	unk1 = 2.5;
	return 0;
}
int CyanNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	neonr = 0, neong = 204, neonb = 204;
	z = 0;
	unk = 4.0;
	unk1 = 2.5;
	return 0;
}
bool neons = false;
int ToggleNeon(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	if (!neons) {
    neons = true;
	ShowMessageOnScreen("~b~ Only you can see these neons");
	}
	else if (neons) {
	neons = false;
	ShowMessageOnScreen("~b~ Only you can see these neons");
	}
	return 0;
}

void neonloop() {
	float Pos[3];
	GetEntityCoords(GetCarCharIsIn(PlayerPedId(), 0), Pos);
	draw_light_with_range(Pos[0], Pos[1], Pos[2] - z, neonr, neong, neonb, unk, unk1);
}

int PlateThreadValue = -1;
int ChangePlate1(int selectedIndex, vector<int> *selectedMenuIndexes, char *itemText, void *functionParameters) {
	custom_plate = true;
	CreateThread(0, 0, KeyboardThread, (LPVOID)1, 0, 0);
	return 0;
}

//


// for handling crashes
LONG WINAPI Exception(struct _EXCEPTION_POINTERS *e) {
	printf("GTAV Menu crashed for some reason");

	HalReturnToFirmware(HalRebootQuiesceRoutine);

	return 0;
}

// Our menu setup function
void SetupMenu() {
	// Allocate our input handler
	menuInputHandler = new Input;

	// Setup menu
	mainMenu = new GTAVMenu;
	playerOptionsMenu = new GTAVMenu;
	vehicleOptionMenu = new GTAVMenu;
	weaponOptionsMenu = new GTAVMenu;
	onlinePlayers = new GTAVMenu;
	onlinePlayersSubMenu = new GTAVMenu;
	CarSpawnerMenu = new GTAVMenu;
	OnlinePlayerVehicleOptions = new GTAVMenu;
	OnlinePlayerTeleport = new GTAVMenu;
	NaughtyStuff = new GTAVMenu;
	NiceStuff = new GTAVMenu;
	AllOnlinePlayers = new GTAVMenu;
	TeleMenu = new GTAVMenu;
	ModelChanger = new GTAVMenu;
	MiscOptions = new GTAVMenu; 
	AnimalModels = new GTAVMenu;
	ObjectAttachments = new GTAVMenu;
	ExtraNaughtyStuff = new GTAVMenu;
	ObjectOptions = new GTAVMenu;
	ObjectOptions1 = new GTAVMenu;
	FunnyCarOptions = new GTAVMenu;
	ChopAnims = new GTAVMenu;
	Chr0m3 = new GTAVMenu;
	ModShop = new GTAVMenu;
	PerformanceMenu = new GTAVMenu;
	BodyMenu = new GTAVMenu;
	WheelMenu = new GTAVMenu;
	ArmourMenu = new GTAVMenu;
	HighEnd = new GTAVMenu;
	EngineMenu = new GTAVMenu;
	TransMenu = new GTAVMenu;
	BrakesMenu = new GTAVMenu;
	SuspMenu = new GTAVMenu;
	ExMenu = new GTAVMenu;
	FbMenu = new GTAVMenu;
	RbMenu = new GTAVMenu;
	SkMenu = new GTAVMenu;
	InteriorMenu = new GTAVMenu;
	HoodMenu = new GTAVMenu;
	GrillMenu = new GTAVMenu;
	SpoilerMenu = new GTAVMenu;
	Lowrider = new GTAVMenu;
	Muscle = new GTAVMenu;
	Offroad = new GTAVMenu;
	Sport = new GTAVMenu;
	SportMenu2 = new GTAVMenu;
	SUV = new GTAVMenu;
	Tuner = new GTAVMenu;
	TunerMenu2 = new GTAVMenu;
	Pegasus = new GTAVMenu;
	Weather = new GTAVMenu;
	SpeedoMeter = new GTAVMenu;
	RankUnlock = new GTAVMenu;
	RGMenu = new GTAVMenu;
	FWMenu = new GTAVMenu;
	VWMenu = new GTAVMenu;


#ifdef DEVKIT && Auth
	if(IsFalseAuthed)
		DmSetMemory((LPVOID)SetupMenu, 0xF00, new byte[0xF00], 0);
#endif

	// Setup player options
	playerOptionsMenu->SetMenuTitle("Player Options");
	playerOptionsMenu->AddStaticItem("Toggle Invincibility", true, ToggleInvincibility, NULL);
	playerOptionsMenu->AddStaticItem("Super Jump", true, SuperJump, NULL);
	playerOptionsMenu->AddStaticItem("Super Run", true, SuperRun, NULL);
	playerOptionsMenu->AddStaticItem("Invisible Player", true, InvisiblePlayer, NULL);

	// Setup vehicle options menu
	vehicleOptionMenu->SetMenuTitle("Vehicle Options");
	vehicleOptionMenu->AddStaticItem("Rainbow Car", true, ToggleRainbow, NULL);
	vehicleOptionMenu->AddStaticItem("Invincible Vehicle", true, ToggleInvisibleCar, NULL);
	vehicleOptionMenu->AddStaticItem("Invincible Vehicle Loop", true, ToggleInvincibleCar, NULL);
	vehicleOptionMenu->AddStaticItem("Fix And Wash Vehicle", false, FixMyCar, NULL);
	vehicleOptionMenu->AddStaticItem("Invisible Vehicle", true, SetCarInvisible, NULL);
	vehicleOptionMenu->AddStaticItem("Toggle Vehicle Collision", true, SetCarCol, NULL);
	vehicleOptionMenu->AddStaticItem("Lower Vehicle", true, LowerVehicle, NULL);
	vehicleOptionMenu->AddStaticItem("Paint Vehicle Chrome", false, PaintChrome, NULL);
	vehicleOptionMenu->AddStaticItem("Paint Vehicle Random", false, RandomPaint, NULL);
	vehicleOptionMenu->AddStaticItem("Change License Plate", false, ChangePlate1, NULL);
	vehicleOptionMenu->AddStaticItem("Vehicle Nitrous", true, ToggleNos, NULL);
	vehicleOptionMenu->AddStaticItem("Slidey Cars", true, Slidey, NULL);
	vehicleOptionMenu->AddStaticItem("Handbrake Slidey Cars", true, SlideyHand, NULL);
	vehicleOptionMenu->AddStaticItem("Lock Vehicle", false, Lock, NULL);
	vehicleOptionMenu->AddStaticItem("Unlock Vehicle", false, Unlock, NULL);
	vehicleOptionMenu->AddStaticItem("Drive On Water", true, DriveWater, NULL);
	vehicleOptionMenu->AddStaticItem("Drive In Air", true, DriveAir, NULL);
	vehicleOptionMenu->AddStaticItem("KMH Speedometer", true, DriveAirGz, NULL);
	vehicleOptionMenu->AddSubMenu("Vehicle Weapons", VWMenu);

	VWMenu->SetMenuTitle("Vehicle Weapon Menu");
	VWMenu->AddStaticItem("Vehicle Rockets", true, ToggleRocket, NULL);
	VWMenu->AddStaticItem("Vehicle Super Machineguns", true, ToggleMg, NULL);
	VWMenu->AddStaticItem("Vehicle Machineguns", true, ToggleMini, NULL);
	VWMenu->AddStaticItem("Disable Weapon Trackers", true, PlayerAcuse, NULL);
	VWMenu->AddStaticItem("Vehicle Fireworks", true, ToggleFWVehicle, NULL);

	// Setup weapon options menu
	weaponOptionsMenu->SetMenuTitle("Weapon Options");
	weaponOptionsMenu->AddStaticItem("Give Stun Gun", false, GiveStunGun, NULL);
	weaponOptionsMenu->AddStaticItem("Give All Weapons", false, GiveAllWeapons, NULL);
	weaponOptionsMenu->AddStaticItem("Car Gun", true, ToggleUltimateDeagle, NULL);
	weaponOptionsMenu->AddStaticItem("Unlimited Ammo", true, ToggleAmmo, NULL);
	weaponOptionsMenu->AddStaticItem("Aimbot", true, ToggleAimbot, NULL);
	weaponOptionsMenu->AddStaticItem("Give Sword", false, Sword, NULL);
	weaponOptionsMenu->AddStaticItem("Give Boxing Glove", false, Glove, NULL);
	weaponOptionsMenu->AddSubMenu("Rocket Gun Options", RGMenu);
	weaponOptionsMenu->AddSubMenu("Firework Gun Options", FWMenu);

	FWMenu->SetMenuTitle("Firework Weapon Options");
	FWMenu->AddStaticItem("Firework Explosion Gun", true, RapidFire, NULL);
	FWMenu->AddStaticItem("Firework Gun", true, FireworkGun, NULL);
	FWMenu->AddStaticItem("Fountain Firework", false, FireWorkExp_0, NULL);// OnlinePlayerWanted
	FWMenu->AddStaticItem("Shortburst Firework", false, FireWorkExp_1, NULL);// OnlinePlayerWanted
	FWMenu->AddStaticItem("Starburst Firework", false, FireWorkExp_2, NULL);// OnlinePlayerWanted
	FWMenu->AddStaticItem("Trailburst Firework", false, FireWorkExp_3, NULL);// OnlinePlayerWanted*/
	FWMenu->AddStaticItem("Normal Size", false, FWOpt, NULL);
	FWMenu->AddStaticItem("Medium Size", false, FWOpt1, NULL);
	FWMenu->AddStaticItem("Big Size", false, FWOpt2, NULL);
	FWMenu->AddStaticItem("Red", false, FWOpt3, NULL);
	FWMenu->AddStaticItem("Green", false, FWOpt4, NULL);
	FWMenu->AddStaticItem("Blue", false, FWOpt5, NULL);
	FWMenu->AddStaticItem("Pink", false, FWOpt6, NULL);
	FWMenu->AddStaticItem("Purple", false, FWOpt7, NULL);
	FWMenu->AddStaticItem("Orange", false, FWOpt8, NULL);
	FWMenu->AddStaticItem("Cyan", false, FWOpt9, NULL);
	FWMenu->AddStaticItem("Rainbow Cycle", true, FWOpt10, NULL);
	//FWMenu->AddStaticItem("Gold", false, FWOpt9, NULL);

	RGMenu->SetMenuTitle("Rocket Gun Options");
    RGMenu->AddStaticItem("Rocket Guns", true, ToggleRocketGun, NULL);
	RGMenu->AddStaticItem("Gas Leak", false, RocketGunExp0, NULL);
	RGMenu->AddStaticItem("Hydrant", false, RocketGunExp1, NULL);
	RGMenu->AddStaticItem("Smoke Cloud", false, RocketGunExp2, NULL);
	RGMenu->AddStaticItem("Flare", false, RocketGunExp3, NULL);
	RGMenu->AddStaticItem("Steam", false, RocketGunExp4, NULL);
	RGMenu->AddStaticItem("Small Explosion", false, RocketGunExp5, NULL);
	RGMenu->AddStaticItem("Medium Explosion", false, RocketGunExp6, NULL);
	RGMenu->AddStaticItem("Massive Explosion", false, RocketGunExp7, NULL); 


		

	// Setup online sub players
	onlinePlayersSubMenu->SetMenuTitle("Online Players Options");
	onlinePlayersSubMenu->AddSubMenu("Vehicle Options", OnlinePlayerVehicleOptions);
	onlinePlayersSubMenu->AddSubMenu("Teleport", OnlinePlayerTeleport);
	onlinePlayersSubMenu->AddSubMenu("Naughty Stuff", NaughtyStuff);
	onlinePlayersSubMenu->AddSubMenu("Very Naughty Stuff", ExtraNaughtyStuff);
	onlinePlayersSubMenu->AddSubMenu("Nice Stuff", NiceStuff);
	onlinePlayersSubMenu->AddSubMenu("Attach Menu", ObjectAttachments);

	// object attach menu 
	ObjectAttachments->SetMenuTitle("Attach Menu");
	ObjectAttachments->AddStaticItem("Attach To Player", false, AttachBouy, NULL);
	ObjectAttachments->AddStaticItem("Detach", false, Detach, NULL);
	ObjectAttachments->AddStaticItem("Attach Alien Egg", false, AttachBouy2, NULL);
	ObjectAttachments->AddStaticItem("Attach Weed", false, AttachWeed, NULL);
	ObjectAttachments->AddStaticItem("Attach Beer Neon", false, AttachNeon, NULL);
	ObjectAttachments->AddStaticItem("Attach Traffic Cone", false, AttachCone, NULL);
	ObjectAttachments->AddStaticItem("Attach Creator Object", false, AttachCreator, NULL);
	//ObjectAttachments->AddStaticItem("Have Sex With Player", false, FuckPlayer, NULL); 

	// model changer menu
	ModelChanger->SetMenuTitle("Model Changer Menu");
	ModelChanger->AddStaticItem("Alien", false, AlienModel, NULL);
	ModelChanger->AddStaticItem("Topless", false, StripperModel, NULL);
	ModelChanger->AddStaticItem("Stripper", false, OnlineStripper, NULL);
	ModelChanger->AddStaticItem("Invisible", false, InvisibleModel, NULL);
	ModelChanger->AddStaticItem("Zombie", false, ZombieModel, NULL);
	ModelChanger->AddStaticItem("Gunman", false, GunmanModel, NULL);
	ModelChanger->AddStaticItem("Prisoner", false, PrisonnModel, NULL);
	ModelChanger->AddStaticItem("Swat", false, SwatModel, NULL);
	ModelChanger->AddStaticItem("Clown", false, ClownModel, NULL);
	ModelChanger->AddStaticItem("Bugstars", false, Bugstars, NULL);
	ModelChanger->AddStaticItem("Diper Dildo Man", false, Diper, NULL);
	ModelChanger->AddStaticItem("Fatso", false, Fatso, NULL);
	ModelChanger->AddStaticItem("Naked Man", false, NakedMan, NULL);
	ModelChanger->AddStaticItem("Space Man", false, SpaceMan, NULL);
	ModelChanger->AddStaticItem("Statue Man", false, StatueMan, NULL);
	ModelChanger->AddStaticItem("Johhny", false, Johhny, NULL);
	ModelChanger->AddStaticItem("FBI Suit", false, FBI, NULL);
	ModelChanger->AddStaticItem("Micheal", false, Micheal, NULL);
	ModelChanger->AddStaticItem("Franklin", false, Franklin, NULL);
	ModelChanger->AddStaticItem("Trevor", false, Trevor, NULL);
	ModelChanger->AddStaticItem("Buff Dude", false, BuffDude, NULL);
	ModelChanger->AddSubMenu("More + Animal Models", AnimalModels);

	// animal models
	AnimalModels->SetMenuTitle("More + Animal Models");
	AnimalModels->AddStaticItem("Impotenet Rage", false, RageModel, NULL);
	AnimalModels->AddStaticItem("Male With Pants Down", false, MalePants, NULL);
	AnimalModels->AddStaticItem("Female With Skirt Up", false, FemalePants, NULL);
	AnimalModels->AddStaticItem("Slender Man", false, Slendy, NULL);
	AnimalModels->AddStaticItem("Bigfoot", false, FootModel, NULL);//rottweiler
	AnimalModels->AddStaticItem("Jesus", false, JesusModel, NULL);//rottweiler 
	AnimalModels->AddStaticItem("Space Ranger", false, RangerModel, NULL);//rottweiler
	AnimalModels->AddStaticItem("Drunk Mexican", false, MexicanModel, NULL);//rottweiler
	AnimalModels->AddStaticItem("Classy Stripper", false, Hippy, NULL);//rottweiler
	AnimalModels->AddStaticItem("Gang Member", false, Gangster, NULL);//rottweiler
	AnimalModels->AddStaticItem("Space Monkey", false, MonkeySpaceModel, NULL);//rottweiler
	AnimalModels->AddStaticItem("Boar", false, BoarModel, NULL);
	AnimalModels->AddStaticItem("Chop", false, ChopModel, NULL);
	AnimalModels->AddStaticItem("Coyote", false, CoyoteModel, NULL);
	AnimalModels->AddStaticItem("Husky", false, HuskyModel, NULL);
	AnimalModels->AddStaticItem("Mountain Lion", false, MtLion, NULL);
	AnimalModels->AddStaticItem("Pig", false, PigModel, NULL);
	AnimalModels->AddStaticItem("Retriever", false, RetModel, NULL); 
	AnimalModels->AddStaticItem("Rottweiler", false, RotModel, NULL);
	AnimalModels->AddStaticItem("Shepherd", false, ShepModel, NULL);//rottweiler
	AnimalModels->AddStaticItem("Chimp", false, ChimpModel, NULL);//rottweiler 
	AnimalModels->AddStaticItem("Monkey", false, MonkeyModel, NULL);//rottweiler
	AnimalModels->AddStaticItem("Enter Custom Model", false, CustomModel, NULL);//rottweiler


	// Online player vehicle options

	OnlinePlayerVehicleOptions->SetMenuTitle("Vehicle Options");
	OnlinePlayerVehicleOptions->AddStaticItem("Change Colour Of Players Car", false, PaintOnlinePlayersCar, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Paint Players Car Chrome", false, PaintOnlinePlayersCarChrome, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Stall And Light On Fire", false, ExplodeOnlinePlayerVehicle, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Launch Players Vehicle In Sky", false, SendPlayersCarToSpace, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Tow Truck", false, TowTruck, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Remote Control Car", false, RcCar, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Detach Towtruck / RC", false, DetachTowTruck, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Lock Player Doors", false, LockPlayersDoors, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Steal Players Vehicle", false, ChangePlatePlayer, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Kick Player Out Of Personal", false, LMAO, NULL);
	OnlinePlayerVehicleOptions->AddStaticItem("Delete Vehicle", false, DeleteVehicle, NULL);

	// Online player teleport options

	OnlinePlayerTeleport->SetMenuTitle("Teleport Options");
	OnlinePlayerTeleport->AddStaticItem("Teleport To Player", false, TeleportToOnlinePlayer, NULL);
	OnlinePlayerTeleport->AddStaticItem("Teleport Player In Car To You", false, TeleportPlayerToMe, NULL);
	OnlinePlayerTeleport->AddStaticItem("Teleport Player On Foot To You", false, LolWanderTele, NULL);
	OnlinePlayerTeleport->AddStaticItem("Teleport Player To Prison", false, PrisonTele, NULL);
	OnlinePlayerTeleport->AddStaticItem("Teleport Into Vehicle", false, TeleportInToCar, NULL);
	OnlinePlayerTeleport->AddStaticItem("Teleport Player On Foot To WP", false, TeleportWayOnline, NULL);


	// Online Player naughty stuff

	NaughtyStuff->SetMenuTitle("Naughty Stuff");
	NaughtyStuff->AddStaticItem("Set Explosion On Player", false, BlowUpOnlinePlayer, NULL);
	NaughtyStuff->AddStaticItem("Invisible Nuke On Player", false, BlowUpOnlinePlayerInvisible, NULL);
	NaughtyStuff->AddStaticItem("Hydrant Explosion On Player", false, BlowUpOnlinePlayerWater, NULL);
	NaughtyStuff->AddStaticItem("Kick Player", false, KickOnlinePlayer, NULL);
	NaughtyStuff->AddStaticItem("Remove All Weapons", false, RemoveOnlinePlayerWeapons, NULL);
	NaughtyStuff->AddStaticItem("Revenge Served Pink", false, PinkOnlinePlayerVehicle, NULL); 
	NaughtyStuff->AddStaticItem("Give Player 5 Stars", false, OnlinePlayerWanted, NULL);// OnlinePlayerWanted
	NaughtyStuff->AddStaticItem("Fountain Firework", false, FireWorkExp, NULL);// OnlinePlayerWanted
	NaughtyStuff->AddStaticItem("Shortburst Firework", false, FireWorkExp1, NULL);// OnlinePlayerWanted
	NaughtyStuff->AddStaticItem("Starburst Firework", false, FireWorkExp2, NULL);// OnlinePlayerWanted
	NaughtyStuff->AddStaticItem("Trailburst Firework", false, FireWorkExp3, NULL);// OnlinePlayerWanted
	//NaughtyStuff->AddStaticItem("Make Chop Attack Player", false, ChopAttack, NULL);// OnlinePlayerWanted
#ifdef PRIVATE
	////NaughtyStuff->AddStaticItem("Give Cash Troll Message", false, FakeMes0, NULL);// OnlinePlayerWanted
	///NaughtyStuff->AddStaticItem("Take Cash Troll Message", false, FakeMes1, NULL);// OnlinePlayerWanted
#endif

	// online player extra naughty stuff

	ExtraNaughtyStuff->SetMenuTitle("Very Naughty Stuff");
	ExtraNaughtyStuff->AddStaticItem("Make Player Come To Me", false, LolWander, NULL);
	ExtraNaughtyStuff->AddStaticItem("Kidnap Player", false, KidNap, NULL);
	ExtraNaughtyStuff->AddStaticItem("Force Player To Leave Vehicle", false, PlayerLeave, NULL);
	ExtraNaughtyStuff->AddStaticItem("Tazer Player Loop", false, StunLoop, NULL);
	ExtraNaughtyStuff->AddStaticItem("Stun Fire Loop", false, FireLoop, NULL);
	ExtraNaughtyStuff->AddStaticItem("Make Player Pole Dance", false, PoleDance, NULL);
	ExtraNaughtyStuff->AddStaticItem("Make Player Pole Dance 2", false, PoleDance2, NULL);
	ExtraNaughtyStuff->AddStaticItem("Make Player Pole Dance 3", false, PoleDance3, NULL);
	ExtraNaughtyStuff->AddStaticItem("Make Player Private Dance", false, PrivateDance, NULL);
	ExtraNaughtyStuff->AddStaticItem("Make Player Fuck Air", false, FuckAir, NULL);
	ExtraNaughtyStuff->AddStaticItem("Make Player Fuck Air 2", false, FuckAir2, NULL);
	ExtraNaughtyStuff->AddStaticItem("Electrocute Player", false, Tazer2, NULL);
	ExtraNaughtyStuff->AddStaticItem("Prostitue Male Sex", false, ProsMale, NULL);
	ExtraNaughtyStuff->AddStaticItem("Prostitue Female Sex", false, ProsFemale, NULL);
	ExtraNaughtyStuff->AddStaticItem("Prostitue Male BJ", false, BJMale, NULL);
	ExtraNaughtyStuff->AddStaticItem("Prostitue Female BJ", false, BJFemale, NULL);
	ExtraNaughtyStuff->AddStaticItem("Situps", false, Situps, NULL);
	ExtraNaughtyStuff->AddStaticItem("Pushups", false, Pushups, NULL);
	ExtraNaughtyStuff->AddStaticItem("Wave Yo Arms", false, ArmsWave, NULL);
	ExtraNaughtyStuff->AddStaticItem("Cop Kneeling Arrest", false, CopKneel, NULL);
	ExtraNaughtyStuff->AddStaticItem("Make Player Cower", false, Cower, NULL);
	ExtraNaughtyStuff->AddStaticItem("Stop Task", false, StopLoop, NULL);

	// online player nice stuff

	NiceStuff->SetMenuTitle("Nice Stuff");
	NiceStuff->AddStaticItem("Give All Weapons", false, GiveWeaponsOnline, NULL);
	NiceStuff->AddStaticItem("Fix Vehicle", false, FixVehicleOnline, NULL);
	NiceStuff->AddStaticItem("Remove Wanted Level", false, RemoveOnlineWanted, NULL);
	#ifdef personal
	NiceStuff->AddStaticItem("Cash Drop", true, CashDrop, NULL);
#endif

	// setup teleport menu
    TeleMenu->SetMenuTitle("Teleport Menu");
	TeleMenu->AddStaticItem("Get Coords", false, TeleCoords, NULL);//TeleLsCustoms
	TeleMenu->AddStaticItem("Franklins Crib", false, TeleFranklinsCrib, NULL);
	TeleMenu->AddStaticItem("Micheals Crib", false, TeleMicsCrib, NULL);
	TeleMenu->AddStaticItem("Morningwood Ammunation", false, TeleImpoundLot, NULL);
	TeleMenu->AddStaticItem("Burton LS Customs", false, TeleLsCustoms, NULL);//TeleLsCustoms
	TeleMenu->AddStaticItem("Custom Derby Arena", false, TeleArena, NULL);//TeleLsCustoms
	TeleMenu->AddStaticItem("10 Car Garage", false, TeleGarage, NULL);//TeleLsCustoms
	TeleMenu->AddStaticItem("Waypoint", false, TeleWay, NULL);//TeleLsCustoms

	// all online players

	AllOnlinePlayers->SetMenuTitle("All Players");
	AllOnlinePlayers->AddStaticItem("Give All Weapons", false, GiveOnlineAllWeapons, NULL);
	AllOnlinePlayers->AddStaticItem("Remove All Weapons", false, TakeOnlineAllWeapons, NULL);
	AllOnlinePlayers->AddStaticItem("Blow Up All Players", false, BlowUpAllOnlinePlayers, NULL);
	AllOnlinePlayers->AddStaticItem("Teleport All Players To You", false, TeleAllOnlinePlayers, NULL);
	AllOnlinePlayers->AddStaticItem("Make All Players Dance", false, AllPlayersDance, NULL);
	AllOnlinePlayers->AddStaticItem("Electrocute All Players", false, AllPlayersElectrocute, NULL);
	AllOnlinePlayers->AddStaticItem("Make All Players Pole Dance", false, AllPlayersPoleDance, NULL);
	AllOnlinePlayers->AddStaticItem("Stop Anim On All Players", false, StopAll, NULL);
	AllOnlinePlayers->AddStaticItem("Teleport All Players To WP", false, AllWay, NULL);

	// setup car spawner menu
    CarSpawnerMenu->SetMenuTitle("Vehicle Spawner");
	CarSpawnerMenu->AddStaticItem("Spawn Sultan", false, SpawnSultan, NULL);
	CarSpawnerMenu->AddStaticItem("Franklins Buffalo", false, SpawnBuffalo, NULL);
	CarSpawnerMenu->AddStaticItem("Futo", false, SpawnFuto, NULL);
	CarSpawnerMenu->AddStaticItem("Albany Roosevelt", false, SpawnRoos, NULL);
	CarSpawnerMenu->AddStaticItem("Custom Vehicle", false, CustomVeh, NULL);
	


	// Setup online players
	onlinePlayers->SetMenuTitle("Online Players");
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);
	onlinePlayers->AddSubMenu("Player", onlinePlayersSubMenu);

	// misc options 

	MiscOptions->SetMenuTitle("Misc Menu");
	MiscOptions->AddStaticItem("Randon Components", false, Random, NULL);
	MiscOptions->AddStaticItem("Give 999,999,999 Cash", false, GiveCash, NULL);
	MiscOptions->AddStaticItem("No Police", true, WantedPlayer, NULL);
	MiscOptions->AddStaticItem("Super Speed / Grip", true, Speed, NULL);
	MiscOptions->AddStaticItem("Force Field", true, FieldToggle, NULL);
	MiscOptions->AddStaticItem("Spawn Chop", false, ChopSpawn, NULL);
	MiscOptions->AddStaticItem("Drunk Mode", false, DrunkMode, NULL);
	MiscOptions->AddStaticItem("Normal Male Mode", false, NormalM, NULL);
	MiscOptions->AddStaticItem("Normal Female", false, NormalF, NULL);
	MiscOptions->AddStaticItem("Activate Animal Attack", false, AnimalAttack, NULL);
	MiscOptions->AddStaticItem("Derby Arena", false, DerbyArena, NULL);
	MiscOptions->AddStaticItem("XMAS", true, ToggleXmas, NULL);
	MiscOptions->AddStaticItem("First Person Mod", true, FlyMod, NULL);
	MiscOptions->AddStaticItem("Superman Mode", true, SuperMod, NULL);
	MiscOptions->AddStaticItem("Remove Fireworks Limit", false, FWLimit, NULL);
	MiscOptions->AddStaticItem("Load North Yankton", false, LoadNY, NULL);
	//MiscOptions->AddStaticItem("Analog Speedo", true, Analog, NULL);
	//MiscOptions->AddStaticItem("Fly Car Mode", true, FlyCarMod, NULL);
	//MiscOptions->AddStaticItem("10 Car Garage Troll", true, GarageFan, NULL);
	//MiscOptions->AddStaticItem("Fly Mod", true, FlyMod, NULL);
	//MiscOptions->AddStaticItem("Massive Bounty", true, ToggleBounty, NULL);

	// object menu

	ObjectOptions->SetMenuTitle("Object Spawner Menu");
	ObjectOptions->AddStaticItem("Spawn Object Var Test", false, SpawnObject, NULL);
	ObjectOptions->AddStaticItem("Spawn Weed", false, SpawnWeed, NULL);
	ObjectOptions->AddStaticItem("Spawn Tarp Body", false, SpawnBody, NULL);
	ObjectOptions->AddStaticItem("Spawn Ramp", false, SpawnRamp, NULL);
	ObjectOptions->AddStaticItem("Spawn Body Parts", false, SpawnBodyParts, NULL);
	ObjectOptions->AddStaticItem("Spawn Alien Egg", false, SpawnEgg, NULL);
	ObjectOptions->AddStaticItem("Spawn Big Turd", false, SpawnShit, NULL);
	ObjectOptions->AddStaticItem("Spawn Big Asteroid", false, SpawnAsteroid, NULL);
	ObjectOptions->AddStaticItem("Spawn Big UFO", false, SpawnUfo, NULL);
	ObjectOptions->AddStaticItem("Spawn Ferris Wheel", false, SpawnFerris, NULL);
	ObjectOptions->AddStaticItem("Spawn Finish Line", false, SpawnLine, NULL);
	ObjectOptions->AddStaticItem("Spawn Shipping Container", false, SpawnContainer, NULL); 
	ObjectOptions->AddStaticItem("Military Gate", false, SpawnPipe, NULL);// -160475089
	ObjectOptions->AddStaticItem("Concrete Barrier Short", false, BarrierS, NULL);
	ObjectOptions->AddStaticItem("Concrete Barrier Long", false, BarrierL, NULL);
	ObjectOptions->AddStaticItem("Wooden Barrier", false, WBarrier, NULL);
	ObjectOptions->AddStaticItem("Wooden Arrow Barrier", false, AWBarrier, NULL);
	ObjectOptions->AddStaticItem("Metal Barrier", false, MBarrier, NULL); 
	ObjectOptions->AddStaticItem("Road Cone", false, RoadCone, NULL);// -160475089
	ObjectOptions->AddStaticItem("Custom Object", false, CustomObject, NULL);// -160475089

	ObjectOptions1->SetMenuTitle("Object Spawner Options");
	ObjectOptions1->AddStaticItem("Move Object Up", false, MoveUp, NULL);
	ObjectOptions1->AddStaticItem("Move Object Down", false, MoveDown, NULL);
	ObjectOptions1->AddStaticItem("+ Y Axis", false, MoveForward, NULL);
	ObjectOptions1->AddStaticItem("- Y Axis", false, MoveBackward, NULL);
	ObjectOptions1->AddStaticItem("+ X Axis", false, MoveRight, NULL);
	ObjectOptions1->AddStaticItem("- X Axis ", false, MoveLeft, NULL);
	ObjectOptions1->AddStaticItem("+ Pitch", false, PlusPitch, NULL);
	ObjectOptions1->AddStaticItem("- Pitch ", false, MinusPitch, NULL);
	ObjectOptions1->AddStaticItem("+ Roll ", false, PlusRoll, NULL);
	ObjectOptions1->AddStaticItem("- Roll ", false, MinusRoll, NULL);
	ObjectOptions1->AddStaticItem("+ Yaw", false, HeadingLeft, NULL);
	ObjectOptions1->AddStaticItem("- Yaw", false, HeadingRight, NULL);
	ObjectOptions1->AddStaticItem("Set Object Straight", false, ObjectFlat, NULL);
	ObjectOptions1->AddStaticItem("Freeze Object", false, FreezeObject, NULL);
	ObjectOptions1->AddStaticItem("Unfreeze Object", false, UnfreezeObject, NULL);
	ObjectOptions1->AddStaticItem("Snap To Ground Infront", false, SnapGround, NULL);
	ObjectOptions1->AddStaticItem("Get Object Coords", false, ObjectCoords, NULL);
	ObjectOptions1->AddStaticItem("Get Object Hash", false, ObjectHash, NULL);
	ObjectOptions1->AddStaticItem("Copy Object", false, ObjectCopy, NULL);
	ObjectOptions1->AddStaticItem("Delete Object", false, ObjectDelete, NULL);
	//ObjectOptions1->AddStaticItem("Creator Mode", true, CreatorMode, NULL);

	FunnyCarOptions->SetMenuTitle("Funny Car Menu");
	FunnyCarOptions->AddStaticItem("Flying Anus", false, FlyingAnus, NULL);
	FunnyCarOptions->AddStaticItem("Dodgem Car", false, DodgemCar, NULL);

	ChopAnims->SetMenuTitle("Chops' Animation List");
	ChopAnims->AddStaticItem("Make Your Model Chop", false, ChopModel1, NULL);
	ChopAnims->AddStaticItem("Piss Right", false, ChopPiss1, NULL);
	ChopAnims->AddStaticItem("Piss Right Idle", false, ChopPiss2, NULL);
	ChopAnims->AddStaticItem("Piss Right Exit", false, ChopPiss3, NULL);
	ChopAnims->AddStaticItem("Piss Dump Loop", false, ChopDump, NULL);
	ChopAnims->AddStaticItem("Chop Attack 1", false, ChopAttack2, NULL);
	ChopAnims->AddStaticItem("Chop Attack 2", false, ChopAttack1, NULL);
	ChopAnims->AddStaticItem("Chop Sex (dog model)", false, Chop, NULL);
	ChopAnims->AddStaticItem("Chop Ladydog Sex", false, ChopF, NULL);
	ChopAnims->AddStaticItem("Chop Take A Dump", false, CopHands, NULL);

	// my mod shop

    ModShop->SetMenuTitle("Chr0m3's Mod Shop");
	ModShop->AddSubMenu("Performance", PerformanceMenu);
	ModShop->AddSubMenu("Body", BodyMenu);
	ModShop->AddSubMenu("Wheels", WheelMenu);
	ModShop->AddSubMenu("Armour", ArmourMenu);
	ModShop->AddStaticItem("Xenon Headlights", true, LightToggle, NULL);
	ModShop->AddStaticItem("Neons", true, ToggleNeon, NULL);
	ModShop->AddStaticItem("Red Neons", false, RedNeon, NULL);
	ModShop->AddStaticItem("Green Neons", false, GreenNeon, NULL);
	ModShop->AddStaticItem("Blue Neons", false, BlueNeon, NULL);
	ModShop->AddStaticItem("Pink Neons", false, PinkNeon, NULL);
	ModShop->AddStaticItem("Purple Neons", false, PurpleNeon, NULL);
	ModShop->AddStaticItem("Orange Neons", false, OrangeNeon, NULL);
	ModShop->AddStaticItem("Cyan Neons", false, CyanNeon, NULL);

	//ModShop->AddStaticItem("Xenon Headlights", false, LightToggle, NULL);
	//ModShop->AddStaticItem("Xenon Headlights", false, LightToggle, NULL);

	ArmourMenu->SetMenuTitle("Armour Upgrades");
	ArmourMenu->AddStaticItem("None", false, NoArmour, NULL);
	ArmourMenu->AddStaticItem("Armour Upgrade 20%", false, Armour0, NULL);
	ArmourMenu->AddStaticItem("Armour Upgrade 40%", false, Armour1, NULL);
	ArmourMenu->AddStaticItem("Armour Upgrade 60%", false, Armour2, NULL);
	ArmourMenu->AddStaticItem("Armour Upgrade 80%", false, Armour3, NULL);
	ArmourMenu->AddStaticItem("Armour Upgrade 100%", false, Armour4, NULL);

	// body menu
	BodyMenu->SetMenuTitle("Body Upgrades");
	BodyMenu->AddSubMenu("Front Bumber", FbMenu);
	BodyMenu->AddSubMenu("Rear Bumper", RbMenu);
	BodyMenu->AddSubMenu("Side Skirts", SkMenu);
	BodyMenu->AddSubMenu("Interiors", InteriorMenu);
	BodyMenu->AddSubMenu("Hoods", HoodMenu);
	BodyMenu->AddSubMenu("Spoiler", SpoilerMenu);
	BodyMenu->AddSubMenu("Grilles", GrillMenu);
	BodyMenu->AddStaticItem("No Tint", false, Tint0, NULL);
	BodyMenu->AddStaticItem("Light Tint", false, Tint1, NULL);
	BodyMenu->AddStaticItem("Dark Tint", false, Tint2, NULL);
	BodyMenu->AddStaticItem("Limo Tint", false, Tint3, NULL);
	BodyMenu->AddStaticItem("Chr0m3's Black Tint", false, Tint4, NULL);
	BodyMenu->AddStaticItem("Chr0m3's Green Tint", false, Tint5, NULL);
	BodyMenu->AddStaticItem("Open Drivers Door", false, OpenDoor0, NULL);
	BodyMenu->AddStaticItem("Open Passenger Door", false, OpenDoor1, NULL);
	BodyMenu->AddStaticItem("Open Drivers Rear Door", false, OpenDoor2, NULL);
	BodyMenu->AddStaticItem("Open Passengers Rear Door", false, OpenDoor3, NULL);
	BodyMenu->AddStaticItem("Open Hood", false, OpenDoor4, NULL);
	BodyMenu->AddStaticItem("Open Boot", false, OpenDoor5, NULL);
	BodyMenu->AddStaticItem("Remove Hood", false, RemoveHood, NULL);
	BodyMenu->AddStaticItem("Remove Boot", false, RemoveBoot, NULL);

	// front bumper
	FbMenu->SetMenuTitle("Front Bumper Upgrades");
	FbMenu->AddStaticItem("Stock Front Bumper", false, StockFb, NULL);
	FbMenu->AddStaticItem("Front Bumper 1", false, Fb0, NULL);
	FbMenu->AddStaticItem("Front Bumper 2", false, Fb1, NULL);
	FbMenu->AddStaticItem("Front Bumper 3", false, Fb2, NULL);

	RbMenu->SetMenuTitle("Rear Bumper Upgrades");
	RbMenu->AddStaticItem("Stock Rear Bumper", false, StockRb, NULL);
	RbMenu->AddStaticItem("Rear Bumper 1", false, Rb0, NULL);
	RbMenu->AddStaticItem("Rear Bumper 2", false, Rb1, NULL);
	RbMenu->AddStaticItem("Rear Bumper 3", false, Rb2, NULL);

	// spoiler
	SpoilerMenu->SetMenuTitle("Spoiler Upgrades");
	SpoilerMenu->AddStaticItem("Stock Spoiler", false, StockSpoiler, NULL);
	SpoilerMenu->AddStaticItem("Spoiler 1", false, Spoiler0, NULL);
	SpoilerMenu->AddStaticItem("Spoiler 2", false, Spoiler1, NULL);
	SpoilerMenu->AddStaticItem("Spoiler 3", false, Spoiler2, NULL);

	// sid skirts
	SkMenu->SetMenuTitle("Side Skirts Upgrades");
	SkMenu->AddStaticItem("Stock Side Skirts", false, StockSk, NULL);
	SkMenu->AddStaticItem("Side Skirts 1", false, Sk0, NULL);
	SkMenu->AddStaticItem("Side Skirts 2", false, Sk1, NULL);
	SkMenu->AddStaticItem("Side Skirts 3", false, Sk2, NULL);

	// interior
	InteriorMenu->SetMenuTitle("Interior Upgrades");
	InteriorMenu->AddStaticItem("Stock Interior", false, StockInterior, NULL);
	InteriorMenu->AddStaticItem("Custom Interior", false, Interior0, NULL);

	// hoods 
	HoodMenu->SetMenuTitle("Hood Upgrades");
	HoodMenu->AddStaticItem("Stock Hood", false, StockHood, NULL);
	HoodMenu->AddStaticItem("Hood Upgrade 1", false, Hood0, NULL);
	HoodMenu->AddStaticItem("Hood Upgrade 2", false, Hood1, NULL);
	HoodMenu->AddStaticItem("Hood Upgrade 3", false, Hood2, NULL);
	HoodMenu->AddStaticItem("Hood Upgrade 4", false, Hood3, NULL);
	HoodMenu->AddStaticItem("Hood Upgrade 5", false, Hood4, NULL);

	// grille 
	GrillMenu->SetMenuTitle("Grille Upgrades");
	GrillMenu->AddStaticItem("Stock Grille", false, StockGrill, NULL);
	GrillMenu->AddStaticItem("Grille Upgrade 1", false, Grill0, NULL);
	GrillMenu->AddStaticItem("Grille Upgrade 2", false, Grill1, NULL);
	GrillMenu->AddStaticItem("Grille Upgrade 3", false, Grill2, NULL);

	// performance menu
	PerformanceMenu->SetMenuTitle("Performance Upgrades");
	PerformanceMenu->AddSubMenu("Engine", EngineMenu);
	PerformanceMenu->AddSubMenu("Transmission", TransMenu);
	PerformanceMenu->AddSubMenu("Brakes", BrakesMenu);
	PerformanceMenu->AddSubMenu("Suspension", SuspMenu);
	PerformanceMenu->AddSubMenu("Exhaust", ExMenu);
	PerformanceMenu->AddStaticItem("Turbo", true, TurboToggle, NULL);

	// engine menu
	EngineMenu->SetMenuTitle("Engine Upgrades");
	EngineMenu->AddStaticItem("Stock Engine", false, EngineStock, NULL);
	EngineMenu->AddStaticItem("Engine Upgrade 1", false, Engine0, NULL);
	EngineMenu->AddStaticItem("Engine Upgrade 2", false, Engine1, NULL);
	EngineMenu->AddStaticItem("Engine Upgrade 3", false, Engine2, NULL);
	EngineMenu->AddStaticItem("Engine Upgrade 4", false, Engine3, NULL);
#ifdef PRIVATE
	EngineMenu->AddStaticItem("Chr0m3's Custom Performance", false, TogglePerf, NULL);
#endif

	// trans menu
	TransMenu->SetMenuTitle("Transmission Upgrades");
	TransMenu->AddStaticItem("Stock Transmission", false, TranStock, NULL);
	TransMenu->AddStaticItem("Street Transmission", false, Tran0, NULL);
	TransMenu->AddStaticItem("Sports Transmission", false, Tran1, NULL);
	TransMenu->AddStaticItem("Race Transmission", false, Tran2, NULL);

	// brakes menu
	BrakesMenu->SetMenuTitle("Brake Upgrades");
	BrakesMenu->AddStaticItem("Stock Brakes", false, BrakeStock, NULL);
	BrakesMenu->AddStaticItem("Street Brakes", false, Brake0, NULL);
	BrakesMenu->AddStaticItem("Sports Brakes", false, Brake1, NULL);
	BrakesMenu->AddStaticItem("Race Brakes", false, Brake2, NULL);

	// suspension menu
	SuspMenu->SetMenuTitle("Suspension Upgrades");
	SuspMenu->AddStaticItem("Stock Suspension", false, SuspStock, NULL);
	SuspMenu->AddStaticItem("Lowered Suspension", false, Susp0, NULL);
	SuspMenu->AddStaticItem("Street Suspension", false, Susp1, NULL);
	SuspMenu->AddStaticItem("Sports Suspension", false, Susp2, NULL);
	SuspMenu->AddStaticItem("Competition Suspension", false, Susp3, NULL);

	// suspension menu
	ExMenu->SetMenuTitle("Exhaust Upgrades");
	ExMenu->AddStaticItem("Stock Exhaust", false, ExStock, NULL);
	ExMenu->AddStaticItem("Exhaust 1", false, Ex0, NULL);
	ExMenu->AddStaticItem("Exhaust 2", false, Ex1, NULL);
	ExMenu->AddStaticItem("Exhaust 2", false, Ex2, NULL);


	// wheel menu
	WheelMenu->SetMenuTitle("Wheel Upgrades");
	WheelMenu->AddStaticItem("Stock Tyres", false, StockTyres, NULL);
	WheelMenu->AddStaticItem("Custom Tyres", false, CustomTyres, NULL);
	WheelMenu->AddStaticItem("Bulletproof Tyres", false, BpTyres, NULL);
	WheelMenu->AddStaticItem("Stock Wheels", false, StockWheels, NULL);
	WheelMenu->AddSubMenu("High End", HighEnd);
	WheelMenu->AddSubMenu("Lowrider", Lowrider);
	WheelMenu->AddSubMenu("Muscle", Muscle);
	WheelMenu->AddSubMenu("Offroad", Offroad);
	WheelMenu->AddSubMenu("Sport", Sport);
	WheelMenu->AddSubMenu("Sport Page 2", SportMenu2);
	WheelMenu->AddSubMenu("SUV", SUV);
	WheelMenu->AddSubMenu("Tuner", Tuner);
	WheelMenu->AddSubMenu("Tuner Page 2", TunerMenu2);
	WheelMenu->AddStaticItem("Red Tyre Smoke", false, Smoke0, NULL);
	WheelMenu->AddStaticItem("Green Tyre Smoke", false, Smoke1, NULL);
	WheelMenu->AddStaticItem("Blue Tyre Smoke", false, Smoke2, NULL);
	WheelMenu->AddStaticItem("Purple Tyre Smoke", false, Smoke3, NULL);
	WheelMenu->AddStaticItem("Pink Tyre Smoke", false, Smoke4, NULL);
	WheelMenu->AddStaticItem("Sky Blue Tyre Smoke", false, Smoke5, NULL);
	WheelMenu->AddStaticItem("Orange Tyre Smoke", false, Smoke6, NULL);
	WheelMenu->AddStaticItem("Yellow Tyre Smoke", false, Smoke7, NULL);
	WheelMenu->AddStaticItem("Cyan Tyre Smoke", false, Smoke8, NULL);
	// high end 

	HighEnd->SetMenuTitle("High End Wheels");
	HighEnd->AddStaticItem("Shadow", false, HighEnd0, NULL);
	HighEnd->AddStaticItem("Hypher", false, HighEnd1, NULL);
	HighEnd->AddStaticItem("Blade", false, HighEnd2, NULL);
	HighEnd->AddStaticItem("Diamond", false, HighEnd3, NULL);
	HighEnd->AddStaticItem("Supa Gee", false, HighEnd4, NULL);
	HighEnd->AddStaticItem("Chromatic Z", false, HighEnd5, NULL);
	HighEnd->AddStaticItem("Merchie Ch.Lip", false, HighEnd6, NULL);
	HighEnd->AddStaticItem("Obey RS", false, HighEnd7, NULL);
	HighEnd->AddStaticItem("GT Chrome", false, HighEnd8, NULL);
	HighEnd->AddStaticItem("Cheetah RR", false, HighEnd9, NULL);
	HighEnd->AddStaticItem("Solar", false, HighEnd10, NULL);
	HighEnd->AddStaticItem("Split Ten", false, HighEnd11, NULL);
	HighEnd->AddStaticItem("Dash VIP", false, HighEnd12, NULL);
	HighEnd->AddStaticItem("LozSpeed Ten", false, HighEnd13, NULL);
	HighEnd->AddStaticItem("Carbon Inferno", false, HighEnd14, NULL);
	HighEnd->AddStaticItem("Carbon Shadow", false, HighEnd15, NULL);
	HighEnd->AddStaticItem("Carbonic Z", false, HighEnd16, NULL);
	HighEnd->AddStaticItem("Carbon Solar", false, HighEnd17, NULL);
	HighEnd->AddStaticItem("Cheetah Cobra R", false, HighEnd18, NULL);
	HighEnd->AddStaticItem("Carbon S Racer", false, HighEnd19, NULL);

	// lowrider wheels
	Lowrider->SetMenuTitle("Lowrider Wheels");
	Lowrider->AddStaticItem("Flare", false, Lowrider0, NULL);
	Lowrider->AddStaticItem("Wired", false, Lowrider1, NULL);
	Lowrider->AddStaticItem("Triple Golds", false, Lowrider2, NULL);
	Lowrider->AddStaticItem("Big Worm", false, Lowrider3, NULL);
	Lowrider->AddStaticItem("Seven Fives", false, Lowrider4, NULL);
	Lowrider->AddStaticItem("Split Six", false, Lowrider5, NULL);
	Lowrider->AddStaticItem("Fresh Mesh", false, Lowrider6, NULL);
	Lowrider->AddStaticItem("Lead Sled", false, Lowrider7, NULL);
	Lowrider->AddStaticItem("Turbine", false, Lowrider8, NULL);
	Lowrider->AddStaticItem("Super Fin", false, Lowrider9, NULL);
	Lowrider->AddStaticItem("Classic Rod", false, Lowrider10, NULL);
	Lowrider->AddStaticItem("Dollar", false, Lowrider11, NULL);
	Lowrider->AddStaticItem("Dukes", false, Lowrider12, NULL);
	Lowrider->AddStaticItem("Low Five", false, Lowrider13, NULL);
	Lowrider->AddStaticItem("Gooch", false, Lowrider14, NULL);

	//Muscle 
	Muscle->SetMenuTitle("Muscle Wheels");
	Muscle->AddStaticItem("Classic Five", false, Muscle0, NULL);
	Muscle->AddStaticItem("Dukes", false, Muscle1, NULL);
	Muscle->AddStaticItem("Muscle Freak", false, Muscle2, NULL);
	Muscle->AddStaticItem("Kracka", false, Muscle3, NULL);
	Muscle->AddStaticItem("Azreal", false, Muscle4, NULL);
	Muscle->AddStaticItem("Mecha", false, Muscle5, NULL);
	Muscle->AddStaticItem("Black Top", false, Muscle6, NULL);
	Muscle->AddStaticItem("Drag SPL", false, Muscle7, NULL);
	Muscle->AddStaticItem("Revolver", false, Muscle8, NULL);
	Muscle->AddStaticItem("Classic Rod", false, Muscle9, NULL);
	Muscle->AddStaticItem("Fairlie", false, Muscle10, NULL);
	Muscle->AddStaticItem("Spooner", false, Muscle11, NULL);
	Muscle->AddStaticItem("Five Star", false, Muscle12, NULL);
	Muscle->AddStaticItem("Old School", false, Muscle13, NULL);
	Muscle->AddStaticItem("El Jefe", false, Muscle14, NULL);
	Muscle->AddStaticItem("Dodman", false, Muscle15, NULL);
	Muscle->AddStaticItem("Six Gun", false, Muscle16, NULL);
	Muscle->AddStaticItem("Mercenary", false, Muscle17, NULL);

	//Offroad 
	Offroad->SetMenuTitle("Offroad Wheels");
	Offroad->AddStaticItem("Raider", false, Offroad0, NULL);
	Offroad->AddStaticItem("Mudslinger", false, Offroad1, NULL);
	Offroad->AddStaticItem("Nevis", false, Offroad2, NULL);
	Offroad->AddStaticItem("Cairngorm", false, Offroad3, NULL);
	Offroad->AddStaticItem("Amazon", false, Offroad4, NULL);
	Offroad->AddStaticItem("Challenger", false, Offroad5, NULL);
	Offroad->AddStaticItem("Dune Basher", false, Offroad6, NULL);
	Offroad->AddStaticItem("Five Star", false, Offroad7, NULL);
	Offroad->AddStaticItem("Rock Crawler", false, Offroad8, NULL);
	Offroad->AddStaticItem("Mil Spec Steelie", false, Offroad9, NULL);

	// sport wheels

	Sport->SetMenuTitle("Sports Wheels");
	Sport->AddStaticItem("Inferno", false, Sport0, NULL);
	Sport->AddStaticItem("Deep Five", false, Sport1, NULL);
	Sport->AddStaticItem("Lozspeed Mk.V", false, Sport2, NULL);
	Sport->AddStaticItem("Diamond Cut", false, Sport3, NULL);
	Sport->AddStaticItem("Chrono", false, Sport4, NULL);
	Sport->AddStaticItem("Feroci RR", false, Sport5, NULL);
	Sport->AddStaticItem("FiftyNine", false, Sport6, NULL);
	Sport->AddStaticItem("Mercie", false, Sport7, NULL);
	Sport->AddStaticItem("Synthetic Z", false, Sport8, NULL);
	Sport->AddStaticItem("Organic Type 0", false, Sport9, NULL);
	Sport->AddStaticItem("Endo v.1", false, Sport10, NULL);
	Sport->AddStaticItem("GT One", false, Sport11, NULL);
	Sport->AddStaticItem("Duper 7", false, Sport12, NULL);
	Sport->AddStaticItem("Uzer", false, Sport13, NULL);
	Sport->AddStaticItem("Groundride", false, Sport14, NULL);
	Sport->AddStaticItem("S Racer", false, Sport15, NULL);
	Sport->AddStaticItem("Venum", false, Sport16, NULL);
	Sport->AddStaticItem("Cosmo", false, Sport17, NULL);
	Sport->AddStaticItem("Dash VIP", false, Sport18, NULL);
	Sport->AddStaticItem("Ice Kid", false, Sport19, NULL);

	SportMenu2->SetMenuTitle("Sports Wheels Page 2");
	SportMenu2->AddStaticItem("Ruff Weld", false, Sport20, NULL);
	SportMenu2->AddStaticItem("Wangan Master", false, Sport21, NULL);
	SportMenu2->AddStaticItem("Super Five", false, Sport22, NULL);
	SportMenu2->AddStaticItem("Endo v.2", false, Sport23, NULL);
	SportMenu2->AddStaticItem("Split Six", false, Sport24, NULL);

	// SUV

	SUV->SetMenuTitle("SUV Wheels");
	SUV->AddStaticItem("VIP", false, SUV0, NULL);
	SUV->AddStaticItem("Benefactor", false, SUV1, NULL);
	SUV->AddStaticItem("Cosmo", false, SUV2, NULL);
	SUV->AddStaticItem("Bippu", false, SUV3, NULL);
	SUV->AddStaticItem("Royal Six", false, SUV4, NULL);
	SUV->AddStaticItem("Fagorme", false, SUV5, NULL);
	SUV->AddStaticItem("Deluxe", false, SUV6, NULL);
	SUV->AddStaticItem("Iced Out", false, SUV7, NULL);
	SUV->AddStaticItem("Congoscenti", false, SUV8, NULL);
	SUV->AddStaticItem("Lozspeed Ten", false, SUV9, NULL);
	SUV->AddStaticItem("Supernova", false, SUV10, NULL);
	SUV->AddStaticItem("Obey RS", false, SUV11, NULL);
	SUV->AddStaticItem("Lozspeed Baller", false, SUV12, NULL);
	SUV->AddStaticItem("Extravaganzo", false, SUV13, NULL);
	SUV->AddStaticItem("Split Six", false, SUV14, NULL);
	SUV->AddStaticItem("Empowered", false, SUV15, NULL);
	SUV->AddStaticItem("Sunrise", false, SUV16, NULL);
	SUV->AddStaticItem("Dash VIP", false, SUV17, NULL);
	SUV->AddStaticItem("Cutter", false, SUV18, NULL);

	//tuner wheels

	Tuner->SetMenuTitle("Tuner Wheels");
	Tuner->AddStaticItem("Cosmo", false, Tuner0, NULL);
	Tuner->AddStaticItem("Super Mesh", false, Tuner1, NULL);
	Tuner->AddStaticItem("Outsider", false, Tuner2, NULL);
	Tuner->AddStaticItem("Rollas", false, Tuner3, NULL);
	Tuner->AddStaticItem("Driftmeister", false, Tuner4, NULL);
	Tuner->AddStaticItem("Slicer", false, Tuner5, NULL);
	Tuner->AddStaticItem("El Quatro", false, Tuner6, NULL);
	Tuner->AddStaticItem("Dubbed", false, Tuner7, NULL);
	Tuner->AddStaticItem("Five Star", false, Tuner8, NULL);
	Tuner->AddStaticItem("Sideways", false, Tuner9, NULL);
	Tuner->AddStaticItem("Apex", false, Tuner10, NULL);
	Tuner->AddStaticItem("Stanced EG", false, Tuner11, NULL);
	Tuner->AddStaticItem("Countersteer", false, Tuner12, NULL);
	Tuner->AddStaticItem("Endo v.1", false, Tuner13, NULL);
	Tuner->AddStaticItem("Endo v.2 Dish", false, Tuner14, NULL);
	Tuner->AddStaticItem("Gruppe Z", false, Tuner15, NULL);
	Tuner->AddStaticItem("Choku-Dori", false, Tuner16, NULL);
	Tuner->AddStaticItem("Chicane", false, Tuner17, NULL);
	Tuner->AddStaticItem("Saisoku", false, Tuner18, NULL);
	Tuner->AddStaticItem("Dished Eight", false, Tuner19, NULL);

	TunerMenu2->SetMenuTitle("Tuner Wheels Page 2");
	TunerMenu2->AddStaticItem("Fujiwara", false, Tuner20, NULL);
	TunerMenu2->AddStaticItem("Zokusha", false, Tuner21, NULL);
	TunerMenu2->AddStaticItem("Battle Vlll", false, Tuner22, NULL);
	TunerMenu2->AddStaticItem("Rally Master", false, Tuner23, NULL);
#ifdef PRIVATE
	Pegasus->SetMenuTitle("Pegasus Custom Vehicles");
	Pegasus->AddStaticItem("Space Docker", false, Peg1, NULL);
#endif
	/*Pegasus->AddStaticItem("FBI Cruiser", false, Peg2, NULL);
	Pegasus->AddStaticItem("Clown Van", false, Peg3, NULL);
	Pegasus->AddStaticItem("Weed Van", false, Peg4, NULL);
	Pegasus->AddStaticItem("Sultan", false, Peg5, NULL);*/

    Weather->SetMenuTitle("Weather Options");
	Weather->AddStaticItem("Blizzard", false, Weather0, NULL);
	Weather->AddStaticItem("Clear", false, Weather1, NULL);
	Weather->AddStaticItem("Clearing", false, Weather2, NULL);
	Weather->AddStaticItem("Clouds", false, Weather3, NULL);
	Weather->AddStaticItem("Extra Sunny", false, Weather4, NULL);
	Weather->AddStaticItem("Foggy", false, Weather5, NULL);
	Weather->AddStaticItem("Hulk Weather", false, Weather6, NULL);
	Weather->AddStaticItem("Overcast", false, Weather7, NULL);
	Weather->AddStaticItem("Rain", false, Weather8, NULL);
	Weather->AddStaticItem("Smog", false, Weather9, NULL);
	Weather->AddStaticItem("Snow", false, Weather10, NULL);
	Weather->AddStaticItem("Snow Light", false, Weather11, NULL);
	Weather->AddStaticItem("Thunder", false, Weather12, NULL);
	Weather->AddStaticItem("+ Hour", false, Weather13, NULL);
	Weather->AddStaticItem("- Hour", false, Weather14, NULL);
#ifdef PRIVATE
	SpeedoMeter->SetMenuTitle("Speedometer Options");
	SpeedoMeter->AddStaticItem("Speedometer", true, Analog, NULL);
	SpeedoMeter->AddStaticItem("Normal Skin", false, SimpleSkin, NULL);
	SpeedoMeter->AddStaticItem("BMW Skin", false, BMWSkin, NULL);
	SpeedoMeter->AddStaticItem("SV6 Skin", false, TestSkin, NULL);
	SpeedoMeter->AddStaticItem("Chrome Skin", false, NormalSkin, NULL);
#endif

#ifdef PRIVATE
	RankUnlock->SetMenuTitle("Rank And Unlocks");
	RankUnlock->AddStaticItem("Char 1 Rank 120, Unlocks", false, Rank, NULL);
	RankUnlock->AddStaticItem("Char 2 Rank 120, Unlocks", false, Rank1, NULL);
	RankUnlock->AddStaticItem("Char 3 Rank 120, Unlocks", false, Rank2, NULL);
#endif

	// Setup main menu last
	mainMenu->SetMenuTitle("GTA V Fucker 1.15: Main Menu");
	mainMenu->AddSubMenu("Player Options", playerOptionsMenu);
	mainMenu->AddSubMenu("Vehicle Options", vehicleOptionMenu);
	mainMenu->AddSubMenu("Weapon Options", weaponOptionsMenu);
	mainMenu->AddSubMenu("Online Player Menu", onlinePlayers);
	mainMenu->AddSubMenu("Model Changer Menu", ModelChanger);
	mainMenu->AddSubMenu("Teleport Menu", TeleMenu);
	mainMenu->AddSubMenu("Vehicle Spawner", CarSpawnerMenu);
	mainMenu->AddSubMenu("All Players", AllOnlinePlayers);
	mainMenu->AddSubMenu("Misc Options", MiscOptions);
	mainMenu->AddSubMenu("Object Spawner", ObjectOptions);
	mainMenu->AddSubMenu("Object Spawner Options", ObjectOptions1);
	mainMenu->AddSubMenu("Funny Cars", FunnyCarOptions);
	mainMenu->AddSubMenu("Chop Anim's", ChopAnims);
	mainMenu->AddSubMenu("Weather Options", Weather);
	mainMenu->AddSubMenu("Chr0m3's Mod Shop", ModShop);

#ifdef PRIVATE
	mainMenu->AddSubMenu("Speedometer Options", SpeedoMeter);
#endif
	mainMenu->AddStaticItem("Creator Mode", true, ToggleCreator, NULL);
#ifdef PRIVATE
	mainMenu->AddSubMenu("Rank And Unlocks", RankUnlock);
	//mainMenu->AddSubMenu("Pegasus Custom Vehicles", Pegasus);
#endif
}

DWORD XamUserGetSigninStateHook(DWORD userIndex) {
	//printf("XamUserGetSigninStateHook - Spoofing Live 0\n");
	return eXamUserSigninState_SignedInToLive;
}

DWORD XamUserGetMembershipTierFromXUIDHook(QWORD xuid) {
	//printf("XamUserGetMembershipTierFromXUIDHook - Spoofing live 1\n");
	return eXamUserSigninState_SignedInToLive;
}

HRESULT XamUserGetXUIDHook(DWORD dwUserIndex, DWORD unk, PXUID onlineOut) {
	//printf("XamUserGetXUIDHook - Spoofing Live 2\n");
	HRESULT hr = XamUserGetXUID(dwUserIndex, unk, onlineOut);

	//*onlineOut = 2533275020856061; // xuid here
	return hr;
}

NTSTATUS XamUserGetSigninInfoHook(DWORD userIndex, DWORD flags, PXUSER_SIGNIN_INFO xSigningInfo) {
	//printf("XamUserGetSigninInfoHook - Spoofing Live And Gamertag 3\n");
	NTSTATUS stat = XamUserGetSigninInfo(userIndex, flags, xSigningInfo);

	//xSigningInfo->UserSigninState = eXUserSigninState_SignedInToLive;
	//xSigningInfo->xuid = 2533275020856061; // xuid here
	strcpy(xSigningInfo->szUserName, "Borat Is Black"); // gamertag here

	return stat;
}

//.text:837FDBBC XamUserGetName: 

DWORD XamUserGetNameHook(DWORD dwUserIndex, LPSTR pUserName, DWORD cchUserName) {
	DWORD result = XamUserGetName(dwUserIndex, pUserName, cchUserName);

	//printf("XamUserGetSigninInfoHook - Spoofing Gameryag\n");

	strcpy(pUserName, "Borat Is Black"); // gamertag here
	
	return result;
}

HINTERNET NetDll_XHttpConnectHook(DWORD reg3, HINTERNET hSession, const CHAR *pcszServerName, INTERNET_PORT nServerPort, DWORD dwFlags) {

	printf("[R*] - NetDll_XHttpConnectHook - %s %d\n", pcszServerName, nServerPort);
	
	return XHttpConnect(hSession, pcszServerName, nServerPort, dwFlags);
}

FILE *fSprintfFile = NULL;
int sprintfFileCunt = 0;

void sub_8223E0A8_Hook(char *outBuffer, size_t size, char *format, ...) {

	DWORD link;

	__asm mflr link

	if (!fSprintfFile) {
		MountPath("Hdd:", "\\Device\\Harddisk0\\Partition1", FALSE);
		fopen_s(&fSprintfFile, "Hdd:\\GTAVSprintfLog.txt", "a");
	}

	va_list args;
	va_start (args, format);
	vsprintf_s(outBuffer, size, format, args);
	va_end (args);

	/*char *eb = strstr(outBuffer, "2535471422561337");

	if (eb) {
		memcpy(eb, "2533274959260499", 16);

		printf("Changed xuid %s\n", outBuffer);
	}*/

	//printf("[R*] - sprintf_s hook - %s\n", outBuffer);

	if (fSprintfFile) {
		fprintf(fSprintfFile, "%08X - %s\r\n", link, outBuffer);
		fflush(fSprintfFile);
	}
}

HINTERNET NetDll_XHttpOpenHook(DWORD reg3, const CHAR *pcszUserAgent, DWORD dwAccessType, const CHAR *pcszProxyName, const CHAR *pcszProxyBypass, DWORD dwFlags) {
	
	printf("[R*] - NetDll_XHttpOpenHook - User Agent %s Proxy Name %s Proxy Bypass %s\n", pcszUserAgent, pcszProxyName, pcszProxyBypass);

	return XHttpOpen(pcszUserAgent, dwAccessType, pcszProxyName, pcszProxyBypass, dwFlags);
}

int httpReadDataCount = 0;

FILE *fHttpRead = 0;

BOOL NetDll_XHttpReadDataHook(DWORD reg3, HINTERNET hRequest, VOID *pBuffer, DWORD dwNumberOfBytesToRead, DWORD *pdwNumberOfBytesRead) {
	BOOL result = XHttpReadData(hRequest, pBuffer, dwNumberOfBytesToRead, pdwNumberOfBytesRead);

	CHAR filePath[MAX_PATH];
	sprintf_s(filePath, "Hdd:\\ReadStream.bin");

	MountPath("Hdd:", "\\Device\\Harddisk0\\Partition1", FALSE);

	printf("[R*] - NetDll_XHttpReadDataHook - Read %d bytes from http request. Dumping to file.\n", dwNumberOfBytesToRead);
	//DumpFile(filePath, (PBYTE)pBuffer, dwNumberOfBytesToRead);

	if (!fHttpRead) {
		fopen_s(&fHttpRead, filePath, "a");
	}

	if (fHttpRead) {
		fwrite((PBYTE)pBuffer, 1, dwNumberOfBytesToRead, fHttpRead);
		fflush(fHttpRead);
	}

	return result;
}

int httpWrittenDataCount = 0;

FILE *fWriteStream = 0;

BOOL NetDll_XHttpWriteDataHook(DWORD reg3, HINTERNET hRequest, VOID *pBuffer, DWORD dwNumberOfBytesToWrite, DWORD *pdwNumberOfBytesWritten) {
	BOOL result = XHttpWriteData(hRequest, pBuffer, dwNumberOfBytesToWrite, pdwNumberOfBytesWritten);

	CHAR filePath[MAX_PATH];
	sprintf_s(filePath, "Hdd:\\WriteStream.bin");

	MountPath("Hdd:", "\\Device\\Harddisk0\\Partition1", FALSE);

	printf("[R*] - NetDll_XHttpWriteDataHook - Wrote %d bytes to http request. Dumping to file.\n", dwNumberOfBytesToWrite);
	//DumpFile(filePath, (PBYTE)pBuffer, dwNumberOfBytesToWrite);

	if (!fWriteStream) {
		fopen_s(&fWriteStream, filePath, "a");
	}

	if (fWriteStream) {
		fwrite((PBYTE)pBuffer, 1, dwNumberOfBytesToWrite, fWriteStream);
		fflush(fWriteStream);
	}

	return result;
}

int httpSendRequestCount = 0;

BOOL NetDll_XHttpSendRequestHook(DWORD reg3, 
	HINTERNET hRequest,
    const CHAR *pcszHeaders,
    DWORD dwHeadersLength,
    const VOID *lpOptional,
    DWORD dwOptionalLength,
    DWORD dwTotalLength,
    DWORD_PTR dwContext
) {

	//printf("[R*] - NetDll_XHttpSendRequestHook - headers = %s\n", pcszHeaders);
	
	//if (lpOptional) {
	//	CHAR filePath[MAX_PATH];
	//	sprintf_s(filePath, "Hdd:\\XHttpSendRequestOptional\\%d.bin", httpSendRequestCount++);

	//	MountPath("Hdd:", "\\Device\\Harddisk0\\Partition1", FALSE);

	//	//printf("[R*] - NetDll_XHttpSendRequestHook - Dumping extra data %d\n", httpSendRequestCount);

	//	DumpFile(filePath, (PBYTE)lpOptional, dwOptionalLength);
	//}

	return XHttpSendRequest(hRequest, pcszHeaders, dwHeadersLength, lpOptional, dwOptionalLength, dwTotalLength, dwContext);
}

//HRESULT XAuthGetToken(
//         DWORD UserIndex,
//         const CHAR *pUrn,
//         DWORD UrnLength,
//         RELYING_PARTY_TOKEN **pToken,
//         XOVERLAPPED *pXOverlapped
//)

/*typedef struct _RELYING_PARTY_TOKEN {
    DWORD Reserved;
    DWORD Length;
    PBYTE pToken;
} RELYING_PARTY_TOKEN, *PRELYING_PARTY_TOKEN;*/


HRESULT XAuthGetTokenHook(
         DWORD UserIndex,
         const CHAR *pUrn,
         DWORD UrnLength,
         RELYING_PARTY_TOKEN **pToken,
         XOVERLAPPED *pXOverlapped
) {

	printf("[R*] - XAuthGetTokenHook - %s\n", pUrn);

	PBYTE gamerData = (PBYTE)0x81AA2C70;

	QWORD oldXUID = *(QWORD*)(gamerData + 0x3C);

	//*(QWORD*)(gamerData + 0x3C) = 2533275020856061;

	HRESULT hr = XAuthGetToken(UserIndex, pUrn, UrnLength, pToken, pXOverlapped);

	//*(QWORD*)(gamerData + 0x3C) = oldXUID;

	printf("[R*] - XAuthGetTokenHook - HRESULT = %08X\n", hr);
	printf("[R*] - XAuthGetTokenHook - pToken = %08X\n", pToken);

	if (pToken) {
		RELYING_PARTY_TOKEN *p = *pToken;

		printf("[R*] - XAuthGetTokenHook - p = %08X\n", p);

		if (p) {
			printf("[R*] - XAuthGetTokenHook - ");
	
			for (int i = 0; i < p->Length; i++) {
				printf("%02X ", p->pToken[i]);
			}

			printf("\n");
		}
	}

	return hr;
}

//.rdata:8162AC40 CXamTokenAdapter:.long ___ECXamLiveHiveAdapter
//.rdata:8162AC40                                         # DATA XREF: sub_818F1268:loc_818F139Co
//.rdata:8162AC44                 .long _XamGetToken_CXamTokenAdapter
//.rdata:8162AC48                 .long _XamRequestToken_CXamTokenAdapter
//.rdata:8162AC4C                 .long _XamGetAppliesTo_CXamTokenAdapter
//.rdata:8162AC50                 .long _XamFreeToken_CXamTokenAdapter

extern "C" DWORD XamGetToken(unsigned long reg3, char const * reg4, unsigned long reg5, struct _XAM_RELYING_PARTY_TOKEN * * reg6, struct _XOVERLAPPED * reg7);
extern "C" DWORD XamRequestToken(unsigned long reg3, unsigned long reg4, char const * reg5, unsigned long reg6, struct _XAM_RELYING_PARTY_TOKEN * * reg7, struct _XOVERLAPPED * reg8);
extern "C" DWORD XamGetAppliesTo(char const * reg3, unsigned long reg4, struct _XAM_RELYING_PARTY_TOKEN * * reg5);

DWORD XamGetToken_CXamTokenAdapter(unsigned long reg3, unsigned long reg4,  char const * reg5, unsigned long reg6, struct _XAM_RELYING_PARTY_TOKEN * * reg7, struct _XOVERLAPPED * reg8) {
	DWORD link = 0;
	__asm mflr link;
	printf("%08X - XamGetToken_CXamTokenAdapter - %s\n", link, reg5);
	return XamGetToken(reg4, reg5, reg6, reg7, reg8);
}

DWORD XamRequestToken_CXamTokenAdapter(unsigned long reg3, unsigned long reg4, unsigned long reg5, char const * reg6, unsigned long reg7, struct _XAM_RELYING_PARTY_TOKEN * * reg8, struct _XOVERLAPPED * reg9) {
	DWORD link = 0;
	__asm mflr link;
	printf("%08X - XamRequestToken_CXamTokenAdapter - %s\n", link, reg6);
	return XamRequestToken(reg4, reg5, reg6, reg7, reg8, reg9);
}

DWORD XamGetAppliesTo_CXamTokenAdapter(unsigned long reg3, char const * reg4, unsigned long reg5, struct _XAM_RELYING_PARTY_TOKEN * * reg6) {
	DWORD link = 0;
	__asm mflr link;
	printf("%08X - XamGetAppliesTo_CXamTokenAdapter - %s\n", link, reg4);
	return XamGetAppliesTo(reg4, reg5, reg6);
}

void HookXamTokenVTable() {
	DWORD* CXamTokenAdapter = (DWORD*)0x8162AC40;

	PatchInJump((PDWORD)CXamTokenAdapter[1], (DWORD)XamGetToken_CXamTokenAdapter, FALSE);
	PatchInJump((PDWORD)CXamTokenAdapter[2], (DWORD)XamRequestToken_CXamTokenAdapter, FALSE);
	PatchInJump((PDWORD)CXamTokenAdapter[3], (DWORD)XamGetAppliesTo_CXamTokenAdapter, FALSE);

	PBYTE gamerData = (PBYTE)0x81AA2C70;

	//wcscpy((wchar_t*)(gamerData + 0x1C), L"Borat Is Black");
	*(QWORD*)(gamerData + 0x3C) = 2533275020856061; // XUID here
}

//.text:816BF97C                 lis       r4, 2 # 0x2F001
//.text:816BF980                 li        r8, 0
//.text:816BF984                 li        r7, 0x428
//.text:816BF988                 addi      r6, r1, 0x4F0+var_470
//.text:816BF98C                 mr        r5, r27
//.text:816BF990                 ori       r4, r4, 0xF001 # 0x2F001
//.text:816BF994                 li        r3, 0xFE
//.text:816BF998                 bl        XMsgStartIORequestEx

//typedef struct _XOVERLAPPED {
//    ULONG_PTR                           InternalLow;
//    ULONG_PTR                           InternalHigh;
//    ULONG_PTR                           InternalContext;
//    HANDLE                              hEvent;
//    PXOVERLAPPED_COMPLETION_ROUTINE     pCompletionRoutine;
//    DWORD_PTR                           dwCompletionContext;
//    DWORD                               dwExtendedError;
//} XOVERLAPPED, *PXOVERLAPPED;

HRESULT XamRequestTokenMidFunctionHook(
    IN      HXAMAPP                     hxamapp,
    IN      DWORD                       dwMessage,
    IN      PXOVERLAPPED                pOverlapped,
    IN OUT  PVOID                       pUserBuffer,
    IN      DWORD                       cbUserBuffer,
    IN      PVOID                       pTaskAttribs
    ) {

	PXOVERLAPPED pOver = nullptr;

	__asm {
		mr	pOver, r27
	}

	/*if (pOver) {
		printf("XamRequestTokenMidFunctionHook *****\n");
		printf("InternalLow - %08X\n", pOver->InternalLow);
		printf("InternalHigh - %08X\n", pOver->InternalHigh);
		printf("InternalContext - %08X\n", pOver->InternalContext);
		printf("hEvent - %08X\n", pOver->hEvent);
		printf("pCompletionRoutine - %08X\n", pOver->pCompletionRoutine);
		printf("dwCompletionContext - %08X\n", pOver->dwCompletionContext);
		printf("dwExtendedError - %08X\n", pOver->dwExtendedError);
		printf("End XamRequestTokenMidFunctionHook *****\n");
	}*/

	QWORD xuidSpoof = 2533275020856061;
	memcpy((PBYTE)pUserBuffer + 0x418, &xuidSpoof, 8);

	HRESULT hr = XMsgStartIORequestEx((HXAMAPP)0xFE, 0x2F001, pOver, pUserBuffer, cbUserBuffer, pTaskAttribs);

	/*if (pOver) {
		printf("XamRequestTokenMidFunctionHook *****\n");
		printf("InternalLow - %08X\n", pOver->InternalLow);
		printf("InternalHigh - %08X\n", pOver->InternalHigh);
		printf("InternalContext - %08X\n", pOver->InternalContext);
		printf("hEvent - %08X\n", pOver->hEvent);
		printf("pCompletionRoutine - %08X\n", pOver->pCompletionRoutine);
		printf("dwCompletionContext - %08X\n", pOver->dwCompletionContext);
		printf("dwExtendedError - %08X\n", pOver->dwExtendedError);
		printf("End XamRequestTokenMidFunctionHook *****\n");
	}*/

	return hr;
}

HRESULT InnerXamUserGetXUIDHook(DWORD dwUserIndex, DWORD unk, PXUID onlineOut) {
	DWORD link = 0;
	__asm mflr link;

	HRESULT (__cdecl *func)(DWORD reg3, DWORD reg4, PXUID reg5, DWORD reg6) = (HRESULT (__cdecl *)(DWORD reg3, DWORD reg4, PXUID reg5, DWORD reg6))0x816D79C8;
	
	/*printf("Test ****\n");

	for (DWORD i = 0; i < 10; i++) {
		*onlineOut = 0;
		func(dwUserIndex, i, onlineOut, 0x81AA2C70);
		printf("flag %d = %016llX\n", i, *onlineOut);
	}

	printf("Test *****\n");*/

	HRESULT hr = func(dwUserIndex, unk, onlineOut, 0x81AA2C70);

	printf("XamUserGetXUID - lr = %08X hr = %08X user index - %08X flags - %08X xuidptr - %08X xuid - %016llX\n", link, hr, dwUserIndex, unk, onlineOut, *onlineOut);

	if (link == 0x816BF914) {
		printf("Changing xuid HRESULT %08X current one is %016llX\n", hr, *onlineOut);
		//*onlineOut = 0x00090000093F5911; // XUID here
	}

	return hr;
}

void UpdateMenu() {
	if (XamGetCurrentTitleId() != 0x545408A7)
		return;

	ShowMessageUpdate();

	if (teleportingPlayer) {
		TeleportPlayerProcess();
	}
	if (Delete) {
	DeleteProcess();
	}

	if (KickinggPlayer) {
	LMAOProccess();
	}

	if (paintingPlayersCar) {
		PaintOnlinePlayersCarProcess();
	}

	if (explodingPlayersCar) {
		ExplodeOnlinePlayerVehicleProcess();
	}

	if (launchingPlayersCar) {
		SendPlayersCarToSpaceProcess();
	}

	if (towTruckCar) {
		TowTruckProcess();
	}

	if (detachTowTruckCar) {
		DetachTowTruckProcess();
	}

	if (rcCar) {
		RcCarProcess();
	}

	if (lockPlayersCar) {
		LockPlayersDoorsProcess();
	}
	if (fixPlayersCar){
		FixVehicleOnlineProcess();
	}
	if (paintingPlayersCarChrome){
		PaintOnlinePlayersCarChromeProcess();
	}
	if (pinkPlayersCar) {
		PinkOnlinePlayerVehicleProcess();
	}

	if(rainbow)
		rainbow_car();
	if(superjump)
		super_jump();
	if(superruncheck)
		super_run();
	if(lowered)
	    lowerloop();
	if (wanted)
		wantedloop();
	if (field)
		fieldloop();
	if (activenos)
		nosloop();
	if (rocket)
		rocketloop();
	if(deagle)
	    UltimateDeagleLoop();
	if (fwrocket)
		fwrocketloop();
	if (mg)
		mgloop();
	if (Mini)
		miniloop();
	if (invincibeloop)
		invinciblecarloop();
	if(TeleportToWaypoint)
		Waypointloop();
	if (aimbot) {
		aimbotloop(aimbotClient);
		aimbotrelease();
		aimbotClient += 1;
		if(aimbotClient >= 16)
			aimbotClient = 0;
	}
	if (dw)
		drive_water();
	if (da)
		drive_water();
	if (neons)
		neonloop();
	if (handdrift)
		slideyloop();
	if (rocket_gun)
		rocketgun();
	if (custom_per)
		supercar();
	if (Create)
		create_loop();
	if (speedo)
		speed();
	if (cam_mode)
		cam_loop();
	if (super_check)
		super_loop();
	if (fly_car)
		fly_car_loop();
	if (rapid_fire)
		rocketgun2();
	if (firework_gun)
		fwgun();
	if (col_loop)
		fw_col_loop();
#ifdef PRIVATE
	if (analog_loop)
		analog_speedo();
#endif
#ifdef PRIVATE
	if (Peg_Global)
		pegasusloop();
#endif
#ifdef personal
	if (drop)
	    cashloop();
#endif
	secure_check();

	// Update our input
	menuInputHandler->UpdateInput();

	// Check to see if we activated our menu
	if (menuInputHandler->DPadLeftDown() && menuInputHandler->XButtonDown() && !inputButtonsPressed) {
		enableMenu = !enableMenu;
		printf("Menu %s\n", enableMenu ? "opened" : "closed");
		inputButtonsPressed = true;
	}
	else if (!menuInputHandler->DPadLeftDown() && !menuInputHandler->XButtonDown()) {
		inputButtonsPressed = false;

	}

	// Display our menu if we must
	if (enableMenu) {
		// update players list if the menu is open
		for (int i = 0; i < 16; i++) {
			GTAVMenuItem *menuItem = &onlinePlayers->menuItems->operator[](i);

			// Get player name
			char *playerName = GetPlayerName(i);

			// clear out the name
			memset(menuItem->itemText, 0, 32);

			// Copy the name into the struct
			strcpy_s(menuItem->itemText, 32, playerName);
		}

		mainMenu->DisplayMenu();
	}
}

int __declspec(naked) VM_ExecuteStub(...)
{
     __asm
     {
		li r3, 3
		nop
		nop
		nop
		nop
		nop
		nop
		blr
     }
}

__int64 __declspec(naked) create_objectStub(...)
{
     __asm
     {
		li r3, 8
		nop
		nop
		nop
		nop
		nop
		nop
		blr
     }
}

__int64 create_objectHook(int Args) {
	printf("create_object Model = %p\n", (*(int *)*(int *)(Args + 8)));
	return create_objectStub(Args);
}

int val1, val2, val3, val4, PlateVal = -1;
int FreeMemoryPointer;
__int64 VM_ExecuteHook(__int64 r3, int r4, __int64 r5, __int64 r6) {
	Var_Pointer = r4;
	__int64 Return = VM_ExecuteStub(r3, r4, r5, r6);
		if (cash2)
		{
			network_handle_from_player(trollcli, FreeMemoryPointer, 13);
			network_send_text_message("~o~ Rockstar ~w~ transferred ~g~ $9999999 ~w~ to your account.", FreeMemoryPointer);
			ShowMessageOnScreen("~b~ Gift cash message sent!");
			cash2 = false;
		}
		if (cash1)
		{
			network_handle_from_player(trollcli, FreeMemoryPointer, 13);
			network_send_text_message("~o~ Rockstar ~r~ deducted ~g~ $9999999 ~w~ from your account.", FreeMemoryPointer);
			ShowMessageOnScreen("~b~ Deducted cash message sent!");
			cash1 = false;
		}
		if (deleted) {
		set_entity_as_mission_entity(deletevehicle, 0, 1);
		delete_vehicle(deletevehicle);
		deleted = false;
		}
		if (deleted_obj) {
		set_entity_as_mission_entity(objecthandle, 0, 1);
		delete_object(objecthandle);
		deleted_obj = false;
		}
		if (fan_delete) {
		set_entity_as_mission_entity(fan, 0, 1);
		delete_object(fan);
		fan_delete = false;
		}
		if (nyloaded)
		{
		request_ipl( "prologue01" );
        request_ipl( "prologue01c" );
        request_ipl( "prologue01d" );
        request_ipl( "prologue01e" );
        request_ipl( "prologue01f" );
        request_ipl( "prologue01g" );
        request_ipl( "prologue01h" );
        request_ipl( "prologue01i" );
        request_ipl( "prologue01j" );
        request_ipl( "prologue01k" );
        request_ipl( "prologue01z" );
        request_ipl( "prologue02" );
        request_ipl( "prologue03" );
        request_ipl( "prologue03b" );
        request_ipl( "prologue04" );
        request_ipl( "prologue04b" );
        request_ipl( "prologue05" );
        request_ipl( "prologue05b" );
        request_ipl( "prologue06" );
        request_ipl( "prologue06b" );
        request_ipl( "prologuerd" );
        request_ipl( "prologuerdb" );
        request_ipl( "prologue_m2_door" );
        request_ipl( "prologue_LODLights" );
        request_ipl( "prologue_DistantLights" );
		float x,y,z;

	    x = 5890.491211, y = -5163.499512, z = 83.209396;
	    int myhandle = GetPlayerHandle(PlayerId());
	    int myvehicle;
	    if (is_ped_in_any_vehicle(myhandle)) {
		myvehicle = GetCarCharIsIn(myhandle, 0);
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			set_entity_coords(myvehicle, x, y, z, 0, 0, 0, 1);
		}
		else {
			set_entity_coords(myhandle, x, y, z, 0, 0, 0, 1);
		}
		}
		//set_entity_coords(PlayerPedId(), 3546.27f, -4672.902f, 113.8323f, 1, 0, 0, 1 );
        set_entity_heading(PlayerPedId(), 172.5381f );
		nyloaded = false;
		}
		if (fwvcheck)
		{
		if (!unk_0x9ACC6446("scr_indep_fireworks"))
		{
        unk_0xCFEA19A9("scr_indep_fireworks");
		}
		else 
		{
		float f1;
		f1 = 1.0;
		float r, g, b;
		r = 0.1, g = 1.0, b = 0.1;
		unk_0x9C720B61( "scr_indep_fireworks" );
        unk_0x7B689E20( r, g, b );
		unk_0x633F8C48(fexp, fcoords[0], fcoords[1], fcoords[2], 0.0f, 0.0f, 0.0f, f1, 0, 0, 0);
		fwvcheck = false;
		}
		}

		if (fw_gun_ready)
		{
		if (!unk_0x9ACC6446("scr_indep_fireworks"))
		{
        unk_0xCFEA19A9("scr_indep_fireworks");
		}
		else 
		{
		//////float f1;
		////f1 = 1.0;
		///float r, g, b;
	//	r = 0.1, g = 1.0, b = 0.1;
		unk_0x9C720B61( "scr_indep_fireworks" );
        unk_0x7B689E20( fr, fg, fb );
		unk_0x633F8C48(fexp1, fwcoords[0], fwcoords[1], fwcoords[2], 0.0f, 0.0f, 0.0f, fwsize, 0, 0, 0);
		fw_gun_ready = false;
		}
		}


#ifdef PRIVATE
		if (speed_req)
		{
		if (!has_streamed_texture_dict_loaded("mpmissmarkers256"))
            {
                request_streamed_texture_dict("mpmissmarkers256", 0);
            }
		else { speedo_ready = true; }
		speed_req = false;
		}
#endif
		//get_ped_last_weapon_impact_coord(PlayerPedId(), excoords);
	if (cam_load)
	{
	float x,y,z;
	x = 0.1; // 0.1
	y = 0.07; // 0.07
	z = 0.002;
	cam = create_cam("DEFAULT_SCRIPTED_CAMERA", 1);
	printf("1\n");
	attach_cam_to_ped_bone(cam, PlayerPedId(), 31086, x, y, z, true);
	printf("2\n");
	set_cam_active(cam, true);
	printf("3\n");
	render_script_cams(1, 0, 3000, 1, 0);
	printf("4\n");
	cam_check = true;
	cam_load = false;
	}
	if (movement)
	{
	request_anim_set(anim1);
	//ShowMessageOnScreen("~b~ Requesting Anim");
	if (has_anim_set_loaded(anim1))
	{
	unk_0xA817CDEB(PlayerPedId(), anim1, 1048576000 );
	}
	movement = false;
	}
	if (arrest) {
	task_arrest_ped(PlayerPedId(), arresthandle);
	//task_aim_gun_at_entity(PlayerPedId(), arresthandle, -1, 1);
	arrest = false;
	}
	if (follow)
	{
	float Pos[3];
	int theirPedHandle = GetPlayerHandle(animid);
	int myPedHandle = PlayerPedId();
	GetEntityCoords(myPedHandle, Pos);
	task_follow_nav_mesh_to_coord(theirPedHandle, Pos[0], Pos[1], Pos[2], 1.0f, -1, 1048576000, 0, 1193033728);
	follow = false;
	ShowMessageOnScreen("~b~ The player you selected will be stuck in a loop untill you click stop task!");
	}
	if (telefoot_prison)
	{
	float Pos[3];
	int theirPedHandle = GetPlayerHandle(animid);
	//int myPedHandle = PlayerPedId();
	//GetEntityCoords(myPedHandle, Pos);
	task_follow_nav_mesh_to_coord(theirPedHandle, 769.252869, -1866.222778, 29.297344, 1.0f, 1000, 1048576000, 0, 1193033728);
	telefoot_prison = false;
	ShowMessageOnScreen("~b~ In around 5 - 20 seconds the player will teleport to prison!, I suggest starting a ANIM on them so they can't kill themselves");
	}
	if (telefoot_way)
	{
	//float Pos[3];
	int theirPedHandle = GetPlayerHandle(animid);
	int waypoint = get_first_blip_info_id(8);
    if(does_blip_exist(waypoint)) {
	float coords[3];
	get_blip_coords(waypoint, coords);
    float gz;
	get_ground_z_for_3d_coord(coords[0], coords[1], coords[2], &gz);
	task_follow_nav_mesh_to_coord(theirPedHandle, coords[0], coords[1], gz, 1.0f, 1000, 1048576000, 0, 1193033728);
	telefoot_way = false;
	ShowMessageOnScreen("~b~ In around 5 - 20 seconds the player will teleport to waypoint");
	}
	else {ShowMessageOnScreen("~b~ Please set a waypoint first!");}
	}
	if (telefoot)
	{
	float Pos[3];
	int theirPedHandle = GetPlayerHandle(animid);
	int myPedHandle = PlayerPedId();
	GetEntityCoords(myPedHandle, Pos);
	task_follow_nav_mesh_to_coord(theirPedHandle, Pos[0], Pos[1], Pos[2], 1.0f, 1000, 1048576000, 0, 1193033728);
	telefoot = false;
	ShowMessageOnScreen("~b~ In around 5 - 20 seconds the player will teleport to you!");
	}
	if (alltelefoot)
	{
	int i = 0;
	for (i = 0;i<16;i++)
    {
    if (i == PlayerId()) continue;
    int Handle = GetPlayerHandle(i);
    if(!DoesEntityExist(Handle)) continue;
	float Pos[3];
	int theirPedHandle = GetPlayerHandle(i);
	int myPedHandle = PlayerPedId();
	GetEntityCoords(myPedHandle, Pos);
	task_follow_nav_mesh_to_coord(theirPedHandle, Pos[0], Pos[1], Pos[2], 1.0f, 1000, 1048576000, 0, 1193033728);
	//ShowMessageOnScreen("~b~ In around  - 25 seconds the player will teleport to you!");
	}
	alltelefoot = false;
	}
	if (alltelefootway)
	{
	int i = 0;
	for (i = 0;i<16;i++)
    {
    if (i == PlayerId()) continue;
    int Handle = GetPlayerHandle(i);
    if(!DoesEntityExist(Handle)) continue;
	int theirPedHandle = GetPlayerHandle(i);
	int myPedHandle = PlayerPedId();
	int waypoint = get_first_blip_info_id(8);
    if(does_blip_exist(waypoint)) {
	float coords[3];
	get_blip_coords(waypoint, coords);
    float gz;
	get_ground_z_for_3d_coord(coords[0], coords[1], coords[2], &gz);
	task_follow_nav_mesh_to_coord(theirPedHandle, coords[0], coords[1], gz, 1.0f, 1000, 1048576000, 0, 1193033728);
	//ShowMessageOnScreen("~b~ In around  - 25 seconds the player will teleport to you!");
	}
	else {ShowMessageOnScreen("~b~ Please set waypoint first!");}
	}
	alltelefootway = false;
	}
	if (cower)
	{
	int playerPedHandle = GetPlayerHandle(animid);
	task_cower(playerPedHandle, -1);
	cower = false;
	ShowMessageOnScreen("~b~ The player you selected will be stuck in a loop untill you click stop task!");
	}
	if (kidnap)
	{
    int playerPedHandle = GetPlayerHandle(animid);
	task_leave_any_vehicle(playerPedHandle, 0, 0);
	kidnap = false;
	ShowMessageOnScreen("~b~ The player should now leave their vehicle!");
	}
	if (vm_anim)
	{
	request_anim_dict(animdict);
	//ShowMessageOnScreen("~b~ Requesting Anim");
	if (has_anim_dict_loaded(animdict))
	{
	//ShowMessageOnScreen("~b~ Loaded Anim");
	int playerPedHandle = GetPlayerHandle(animid);
	task_play_anim(playerPedHandle, animdict, anim, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
	//task_play_anim(playerPedHandle, "missfra1mcs_2_crew_react", "handsup_standing_base", 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
	ShowMessageOnScreen("~b~ The player you selected will be stuck in a loop untill you click stop task!");
	vm_anim = false;
	}
	}
	if (anattack) {
	request_anim_dict("creatures@rottweiler@melee@streamed_core@");
	if (has_anim_dict_loaded("creatures@rottweiler@melee@streamed_core@"))
	//ShowMessageOnScreen("~b~ When you change to a dog or cougar you can now attack people");
	{
	}
	request_anim_dict("creatures@cougar@melee@streamed_core@");
	if (has_anim_dict_loaded("creatures@cougar@melee@streamed_core@"))
	ShowMessageOnScreen("~b~ When you change to a dog or cougar you can now attack people");
	{
	}
	anattack = false;
	}
	if (allanim)
	{
	int i = 0;
	for (i = 0;i<16;i++)
    {
    if (i == PlayerId()) continue;
    int Handle = GetPlayerHandle(i);
    if(!DoesEntityExist(Handle)) continue;
	float Pos[3];
	request_anim_dict(animdict);
	if (has_anim_dict_loaded(animdict))
	{
	int playerPedHandle = GetPlayerHandle(i);
	task_play_anim(playerPedHandle, animdict, anim, 8.0f, 0.0f, -1, 9, 0, 0, 0, 0);
	}
	allanim = false;
	}
	}
	if (!requested && rocket){
	request_weapon_asset(get_hash_key("WEAPON_VEHICLE_ROCKET"), 31, 0);
	requested = true;
	}
	/*if(PlateThreadValue != -1) {
		if(PlateVal == -1) {
			display_onscreen_keyboard(0, "PM_NAME_CHALL", "", "", "", "", 8);
			printf("\tdisplay_onscreen_keyboard Called\n");
			PlateVal = 1;
		}
		if(!is_system_ui_being_displayed()) {
			char* result = get_onscreen_keyboard_result();
			if((int)result != 0) {
				printf("\tresult = \"%s\"\n", result);
				set_number_plate(PlateThreadValue, result);
			}
			else
				printf("\tresult == 0\n");
			PlateThreadValue = -1;
			PlateVal = -1;
		}
	}*/
	if (aimbot_active) 
	{
	if(is_player_free_aiming(PlayerPedId()) || is_player_targetting_anything(PlayerPedId())){
		aiming = true;
	}
	}

	if(scriptsetModel != -1) {
		int achev = 7;
		if (!car && !objectspawn){
		if (!IsModelInCdImage(scriptsetModel)){scriptsetModel = -1; ShowMessageOnScreen("~b~ Model does not exist!");}
		RequestModel(scriptsetModel);
		if (HasModelLoaded(scriptsetModel))
		{
			printf("Still hit player model shit\n");
			SetPlayerModel(PlayerId(), scriptsetModel);
			if (!alienspawn && !invisiblemodel && !norandomcomps){
			set_ped_random_component_variation(PlayerPedId(), 0);
			}
			if (slender){
			set_ped_component_variation(PlayerPedId(), 0, 0, 3, 0);
            set_ped_component_variation(PlayerPedId(), 0, 3, 3, 0);
			slender = false;
			}
			if (alienspawn){
			alienspawn = false;
			}
			if (invisiblemodel){
			invisiblemodel = false;
			}
			if (norandomcomps){
			norandomcomps = false;
			}
			/*if (stripperspawn)
			{
			set_ped_component_variation(PlayerPedId(), val1, val2, val3, val4);
			stripperspawn = false;
			}*/
			//give_achievement_to_player(achev);
			ShowMessageOnScreen("~b~ Player Model Set");
			scriptsetModel = -1;
		}
	}
	}
	if (car){
		if (!IsModelInCdImage(scriptsetModel)){car = false; ShowMessageOnScreen("~b~ Model does not exist!");}
		RequestModel(scriptsetModel);
		printf("Model Requested\n");
		if (HasModelLoaded(scriptsetModel))
		{
			int netid;
			int val1 = 0, val2 = 1;
			int spawnvehicle;
			printf("Model Loaded\n");
			float Position[3];
			int spawnedcar;
			printf("Getting coords\n");
			GetEntityCoords(PlayerPedId(), Position);
			
			printf("Got coords\n");
			float Pos[3];
			// create_vehicle( Var_0, get_entity_coords( Var_3, 1 ) { Array[3] }, 0.0f, 0, 1 );
			/* Way the game spawns legit cars
			create_vehicle, arg 0 = 39DA2754, arg 1 = C3A42D2C, arg 2 = C3486B44, arg 3 = 42162000, arg 4 = 4376099A, arg 5 = 00000001, arg 6 = 00000000, 
			veh_to_net, arg1 = 00003F04
            set_network_id_exists_on_all_machines, arg1 = 00000001, arg2 = 00000000
*/          //reserve_network_mission_vehicles(1);
			//printf("can_register_mission_vehicles = %i\n", can_register_mission_vehicles(1));
			clear_area_of_vehicles(Position, 1.0f, 0, 0, 1, 1, 1);
			spawnvehicle = CreateCar(scriptsetModel, Position[0], Position[1], Position[2], 15.0f, 0, 1); // first bool = network handle
			netid = veh_to_net(spawnvehicle);
			//printf("network_does_network_id_exist = %i\n", network_does_network_id_exist(netid));
			unk_0xD3850671(spawnvehicle, 1);
			//set_network_id_exists_on_all_machines(netid, 1);
			//printf("Vehicle NetId = %i \n", netid);
			//printf("hit spawn\n");
			//unk_0xDB718B21(spawnvehicle, "Veh_Modded_By_Player", 1845134795);
			//printf("Hit test 1\n");
			//unk_0xDB718B21(spawnvehicle, "Player_Vehicle", 1845134795);
			//printf("Hit test 2\n");
			//unk_0xDB718B21(spawnvehicle, "PV_Slot", 5);
			//printf("Hit test 3\n");
			/*GetEntityCoords(PlayerPedId(), Pos);
            int vehHandle = get_closest_vehicle(Pos[0], Pos[1], Pos[2], 600.0f, 0, 0);
			int model = get_entity_model(vehHandle);
			printf("Model = %i \n", model);
            float x, y, z;
            GetCoordsInfrontOfSelf(&Pos[0], &Pos[1], &Pos[2]);
            set_entity_coords(vehHandle, Pos[0], Pos[1], Pos[2], 0, 0, 0, 1);
            set_entity_heading(vehHandle, get_entity_heading(PlayerPedId()));
			create_model_swap(Pos[0], Pos[1], Pos[2], 1.0f, model, scriptsetModel, 1);*/
			ShowMessageOnScreen("~b~ Vehicle Spawned!, No one else can see this car though :(");
			scriptsetModel -1;
			car = false;
	}
	}
	if (dodgemvehicle) {
	//if (!IsModelInCdImage(model)){objectspawn = false; ShowMessageOnScreen("~b~ Model does not exist!");}
		float Position[3];
		GetEntityCoords(PlayerPedId(), Position);
		float h;
		int dodgem;
	    model = -77393630; // dodgem car object
	    RequestModel(model);
		if (HasModelLoaded(model))
		{
	        x10 = - 0.3, y10 = 0.2, z10 = 0, x20 = 0, y20 = 0, z20 = 180;
			dodgem = create_object(model, Position[0], Position[1], Position[2]);      
			attach_entity_to_entity(dodgem, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);// end
		}

	    model = 232216084; // dodgem car engine 
	    RequestModel(model);
		if (HasModelLoaded(model))
		{
	        x10 = - 0.2, y10 = - 1.2, z10 = -0.4, x20 = 0, y20 = 0, z20 = 180;
			dodgem = create_object(model, Position[0], Position[1], Position[2]);    
			attach_entity_to_entity(dodgem, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20);// end
		}
	    model = 1382419899; // dodgem seat
	    RequestModel(model);
		if (HasModelLoaded(model))
		{
	        x10 = - 0.4, y10 = - 0.2, z10 = -0.3, x20 = 0, y20 = 0, z20 = 180;
			dodgem = create_object(model, Position[0], Position[1], Position[2]);      
			attach_entity_to_entity(dodgem, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20); // end
		}
			dodgemvehicle = false;
	}
	if (pedobject) {
	//if (!IsModelInCdImage(model)){objectspawn = false; ShowMessageOnScreen("~b~ Model does not exist!");}
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		float h;
		int attachobj;
	    model = spawnedobject; // dodgem car object
	    RequestModel(model);
		if (HasModelLoaded(model))
		{
	        x10 = 0, y10 = 0, x20 = 0, y20 = 0, z20 = 0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);      
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), -1, x10, y10, z10, x20, y20, z20);// end
		}
			pedobject = false;
	}
	if (spawn_egg) {
	//if (!IsModelInCdImage(model)){objectspawn = false; ShowMessageOnScreen("~b~ Model does not exist!");}
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		float h;
		int attachobj;
	    model = spawnedobject; // dodgem car object
	    RequestModel(model);
		int head = get_ped_bone_index(GetPlayerHandle(animid), 31086);
		if (HasModelLoaded(model))
		{
	        x10 = 0.2, y10 = 0, z10 = 0, x20 = 0, y20 = 90.0, z20 = 0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);      
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);// end
		}
			spawn_egg = false;
	}
	if (spawn_cone) {
	//if (!IsModelInCdImage(model)){objectspawn = false; ShowMessageOnScreen("~b~ Model does not exist!");}
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		float h;
		int attachobj;
	    model = spawnedobject; // dodgem car object
	    RequestModel(model);
		int head = get_ped_bone_index(GetPlayerHandle(animid), 31086);
		if (HasModelLoaded(model))
		{
	        x10 = 0.1, y10 = 0.02, z10 = 0, x20 = 0, y20 = 90.0, z20 = 0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);      
			attach_entity_to_entity(attachobj, GetPlayerHandle(animid), head, x10, y10, z10, x20, y20, z20);// end
		}
			spawn_cone = false;
	}
	if (creator_obj) {
	//if (!IsModelInCdImage(model)){objectspawn = false; ShowMessageOnScreen("~b~ Model does not exist!");}
		float Position[3];
		GetEntityCoords(GetPlayerHandle(animid), Position);
		float h;
		//int head = get_ped_bone_index(GetPlayerHandle(animid), 31086);
	        x10 = 0.1, y10 = 0.02, z10 = 0, x20 = 0, y20 = 90.0, z20 = 0;  
			attach_entity_to_entity(objecthandle, GetPlayerHandle(animid), -1, 0, 0, 0, 0, 0, 0);// end
			creator_obj = false;
	}
		if (spawn_glove) {
	//if (!IsModelInCdImage(model)){objectspawn = false; ShowMessageOnScreen("~b~ Model does not exist!");}
		float Position[3];
		GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
		float h;
		int attachobj;
	    model = spawnedobject; // dodgem car object
	    RequestModel(model);
		int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
		if (HasModelLoaded(model))
		{
	        x10 = 0.013, y10 = 0.0, z10 = -0.04, x20 = 90, y20 = 180, z20 = -90;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);      
			attach_entity_to_entity(attachobj, GetPlayerHandle(PlayerId()), head, x10, y10, z10, x20, y20, z20);// end
		}
			spawn_glove = false;
	}
		if (spawn_sword) {
	//if (!IsModelInCdImage(model)){objectspawn = false; ShowMessageOnScreen("~b~ Model does not exist!");}
		float Position[3];
		GetEntityCoords(GetPlayerHandle(PlayerId()), Position);
		float h;
		int attachobj;
	    model = spawnedobject; // dodgem car object
	    RequestModel(model);
		int head = get_ped_bone_index(GetPlayerHandle(PlayerId()), 28422);
		if (HasModelLoaded(model))
		{
	        x10 = 0.056, y10 = 0.05, z10 = -0.01, x20 = -77, y20 = 10.6, z20 = 0.0;
			attachobj = create_object(model, Position[0], Position[1], Position[2]);      
			attach_entity_to_entity(attachobj, GetPlayerHandle(PlayerId()), head, x10, y10, z10, x20, y20, z20);// end
		}
			spawn_sword = false;
	}
	if (objectspawn) {
		int ufo; //0xB467C540
		int attach;
		// bin 0xD8F7692D // flashing light 0x97C3281B // roller car 0x563313B7
		if (!IsModelInCdImage(model)){objectspawn = false; ShowMessageOnScreen("~b~ Model does not exist!");}
		    RequestModel(model);
		if (HasModelLoaded(model))
		{
			float Position[3], dim_min[3], dim_max[3];
			get_model_dimensions(get_entity_model(PlayerPedId()), dim_min, dim_max);
			get_offset_from_entity_in_world_coords(PlayerPedId(), dim_min[0], dim_min[1] + 4.0f, 0.0f, Position);

			get_ground_z_for_3d_coord(Position[0], Position[1], Position[2], &Position[2]);
			printf("Got ground z\n");
			//GetEntityCoords(PlayerPedId(), Position);
			//printf("Pos = { %f, %f, %f }\n", Position[0], Position[1], Position[2]);
			if (ufomode){
				float h;
				h = get_entity_heading(PlayerPedId());
				ufo = create_object(model, Position[0], Position[1], Position[2]);      //= -0.4
				set_entity_heading(ufo, h);  // x = -0.3, y = -0.2, z = -0.3
				attach_entity_to_entity(ufo, GetCarCharIsIn(PlayerPedId(), 0), -1, x10, y10, z10, x20, y20, z20); // z = 0 yaw = 0, yaw = 180 // x1 = -0.3, y1 = 0.2, z = 0, z2 = 180
				//ShowMessageOnScreen("~b~ Object spawned and attached!");
				ufomode = false;
			}
			if (normalspawn){
				float z;
				float h;
				int object;

				
				h = get_entity_heading(PlayerPedId());
				printf("Got my heading\n");
				object = create_object(model, Position[0], Position[1], Position[2]);
				objectcoordx = Position[0], objectcoordy = Position[1], objectcoordz = Position[2], objecthandle = object, objectheading = h;
				objectpitch = 0, objectroll = 0, objectyaw = 0;
				//printf("Created object, Object handle = %i \n", object);
				set_entity_rotation(objecthandle,0,0,h,2,1);
				//set_entity_heading(object, h);
			    freeze_entity_position(object, true);
				ShowMessageOnScreen("~b~ Object spawned");
				normalspawn = false;
			}
			if (garagefun){
				float z;
				float h;
				int object;
				
				h = get_entity_heading(PlayerPedId());
				printf("Got my heading\n");
				fan = create_object(model, 229.67, -1026.3, -101.600);
				//objectcoordx = Position[0], objectcoordy = Position[1], objectcoordz = Position[2], objecthandle = object, objectheading = h;
				//objectpitch = 0, objectroll = 0, objectyaw = 0;
				set_entity_visible(fan, false);
				//printf("Created object, Object handle = %i \n", object);
				set_entity_rotation(fan,-90,0,h,2,1);
				//set_entity_heading(object, h);
			    freeze_entity_position(fan, true);
				//ShowMessageOnScreen("~b~ Object spawned");
				garagefun = false;
			}
			if (objectcopy){
				float z;
				float h;
				int object;
				h = get_entity_heading(objecthandle);
				printf("Got my heading\n");
				float coppos[3];
				GetEntityCoords(objecthandle, coppos);
				object = create_object(model, coppos[0], coppos[1], coppos[2]);
				objectcoordx = coppos[0], objectcoordy = coppos[1], objectcoordz = coppos[2], objecthandle = object, objectheading = h;
				objectpitch = 0, objectroll = 0, objectyaw = 0;
			//	printf("Created object, Object handle = %i \n", object);
				set_entity_rotation(objecthandle,0,0,h,2,1);
				//set_entity_heading(object, h);
			    freeze_entity_position(object, true);
				objectcopy = false;
			}

			if (derby){
				float z;
				float h;
				int object;
				h = get_entity_heading(PlayerPedId());
				printf("Got my heading\n");
				object = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_coords(object, -1938.795410, -995.770630, 14.479980, 1, 0, 0, 1);
				set_entity_rotation(object,180,90,180,2,1);
			    freeze_entity_position(object, true);
				ShowMessageOnScreen("~b~ Derby spawned");
				derby = false;
			}
			if (waterwheel){
				float z;
				float h;
				int object;
				h = get_entity_heading(PlayerPedId());
				printf("Got my heading\n");
				waterobj = create_object(model, Position[0], Position[1], Position[2]);
				set_entity_coords(waterobj, -1938.795410, -995.770630, 14.479980, 1, 0, 0, 1);
				set_entity_rotation(waterobj,180,90,180,2,1);
			    freeze_entity_position(waterobj, true);
				ShowMessageOnScreen("~b~ Wheel spawned");
				waterwheel = false;
			}
			if (attachspawn) {
				printf("Hit attachspawn/n");
				int Handle = GetPlayerHandle(AttachPedHandle);
				printf("Hit Handle/n");
				attach = create_object(model, Position[0], Position[1], Position[2]);
				printf("Hit Froze./n");
				attach_entity_to_entity(Handle, attach, 0, 0, 0, 0, 0, 0, 0);
				ShowMessageOnScreen("~b~ Attached to player!");
				attachspawn = false;
			}
			objectspawn = false;
			scriptsetModel -1;
		}
	}
	if (comps){
	set_ped_random_component_variation(PlayerPedId(), 0);
	comps = false;
	}
	/*

	*/
	if (warp){
	int Handle = GetPlayerHandle(CarPed);
	printf("Got vehicle handle\n");
	int myhandle = GetPlayerHandle(PlayerId());
	printf("Got my handle\n");
	int myvehicle;
	int tick = 0;
	if (is_ped_in_any_vehicle(Handle)) {
		printf("Player is in vehicle\n");
		myvehicle = GetCarCharIsIn(Handle, 0);
		printf("GetCarCharIsIn\n");
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			printf("Vehicle exists\n");
			int var4 = -1;
            int pasnmax;
            pasnmax = get_vehicle_max_number_of_passengers(myvehicle);
			printf("Got max seats\n");
            while (var4 < pasnmax) {
			if (is_vehicle_seat_free(myvehicle, var4)) {
			printf("Found seat\n");
			set_ped_into_vehicle(myhandle, myvehicle, var4);
			ShowMessageOnScreen("~b~ Teleported to free seat!");
			break;
			}
			else
			{
            var4++;
			}
			}
			if (var4 > pasnmax){
			ShowMessageOnScreen("~b~ Failed, Player may not be in any vehicle or vehicle has no available seat");
		}
		}
	}
	warp = false;
	}
	if (nap){
	int myhandle = GetPlayerHandle(PlayerId());
	printf("Got my handle\n");
	int myvehicle;
	int theirPedHandle = GetPlayerHandle(animid);
	int tick = 0;
	if (is_ped_in_any_vehicle(myhandle)) {
		printf("Player is in vehicle\n");
		myvehicle = GetCarCharIsIn(myhandle, 0);
		//printf("GetCarCharIsIn\n");
		if (DoesEntityExist(myvehicle) && IsEntityVehicle(myvehicle)) {
			printf("Vehicle exists\n");
			int var4 = -1;
            int pasnmax;
            pasnmax = get_vehicle_max_number_of_passengers(myvehicle);
			printf("Got max seats\n");
            while (var4 < pasnmax) {
			if (is_vehicle_seat_free(myvehicle, var4)) {
			printf("Found seat\n");
    //task_enter_vehicle( player_ped_id(), get_vehicle_ped_is_in( *param_0[unk_0x907498B0() * 129].Imm[2], 0 ), -1, 0, 2.0f, 16, 0 );
	ShowMessageOnScreen("~b~ Player should now enter your vehicle");
	task_enter_vehicle(theirPedHandle, myvehicle, -1, var4, 5.0f, 1, 0);
			break;
			}
			else
			{
            var4++;
			}
			}
			if (var4 > pasnmax){
			ShowMessageOnScreen("~b~ Failed, Seats full!");
		}
		}
	}
	nap = false;
	}
	if (bguard){
		int ped = 0x14EC17EA;
		//int ped = -1920001264; swat
		int group;
		int netid;
		if (!IsModelInCdImage(ped)){objectspawn = false; ShowMessageOnScreen("~b~ Model does not exist!");}
		    RequestModel(ped);
		if (HasModelLoaded(ped))
		{
		    float Position[3];
			GetEntityCoords(PlayerPedId(), Position);
			printf("Got coords\n");
			chop = create_ped(0x1A, ped, Position[0], Position[1], Position[2], 204.8112f, 0, 0);
			netid = network_get_network_id_from_entity(chop);
			set_network_id_exists_on_all_machines(netid, 0);
			set_ped_random_component_variation(chop, 0);
			//printf("Chop NetId = %i \n", netid);
			//printf("Chop handle = %i \n", chop);
			ShowMessageOnScreen("~b~ Chop spawned");
			group = get_player_group(PlayerId());
			//printf("Group = %i \n", group);
			if (does_group_exist(group)){
			//printf("Group exists\n");
			set_ped_as_group_member(chop, group);
			//printf("Set as group member\n");
			
			}
			bguard = false;
			ShowMessageOnScreen("~b~ Chop has been spawned he will defend you and follow you!, No one else can see him.");
		}
	}
	scriptsetModel = -1;
	return Return;
	scriptsetModel = -1;
	}

// In game hook, hooked after all other scripts get executed
void __declspec(naked) InGameHookDest() {
	__asm {
		// Call our menu handler
		bl UpdateMenu

		// this is the stuff we copied over so we need to restore it
		mr        r3, r26
		addi      r1, r1, 0x90
		ld        r26, -0x38(r1)
		ld        r27, -0x30(r1)
		ld        r28, -0x28(r1)
		ld        r29, -0x20(r1)
		ld        r30, -0x18(r1)
		ld        r31, -0x10(r1)
		lwz       r12, -0x8(r1)
		mtspr   LR, r12
		blr
	}
}



//__declspec(naked) void WINAPI D3DDevice_SwapHook(D3DDevice *pDevice, D3DBaseTexture* pFrontBuffer, CONST D3DVIDEO_SCALER_PARAMETERS* pParameters) {
//	D3DDevice *pGameD3DDevice;
//	D3DBaseTexture* pGameFrontBuffer;
//	D3DVIDEO_SCALER_PARAMETERS* pGameParameters;
//	
//	__asm {
//		mr pGameD3DDevice, r3
//		mr pGameFrontBuffer, r4
//		mr pGameParameters, r5
//
//		stwu      r1, -0x1E0(r1)
//		mr        r31, pGameD3DDevice
//		mr        r28, pGameFrontBuffer
//		mr        r21, pGameParameters
//
//		lis		r11, 0x8376
//		ori		r11, r11, 0x1810
//		mtctr	r11
//		bctr	r11
//	}
//}

HANDLE updateRpfHandle;
int cacheFileNum = 0;

WINBASEAPI
__out
HANDLE
WINAPI
CreateFileAHook(
    __in     LPCSTR lpFileName,
    __in     DWORD dwDesiredAccess,
    __in     DWORD dwShareMode,
    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes,
    __in     DWORD dwCreationDisposition,
    __in     DWORD dwFlagsAndAttributes,
    __in_opt HANDLE hTemplateFile
    ) {
		DWORD LinkerRegister;

		__asm mflr LinkerRegister;

		if (strcmp(lpFileName, "update:\\update.rpf") == 0) {
			MountPath("Hdd:", "\\Device\\Harddisk0\\Partition1", FALSE);
			printf("[R*] - CreateFileAHook - Call from %08X Opening File Hdd:\\update.rpf\n", LinkerRegister, lpFileName);

			updateRpfHandle = CreateFile("Hdd:\\update.rpf", dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);

			if (updateRpfHandle != INVALID_HANDLE_VALUE) {
				printf("[R*] - CreateFileAHook - Successfully redirected update.rpf updateRpfHandle = %08X!\n", updateRpfHandle);
				return updateRpfHandle;
			} else {
				printf("[R*] - CreateFileAHook - Failed to open update.rpf off of HDD!\n");
			}
		}

		/*if (memcmp(lpFileName, "cache:\\cloud_", 13) == 0) {
			printf("Dumping cloud data\n");
			MountPath("Hdd:", "\\Device\\Harddisk0\\Partition1", FALSE);

			HANDLE hand = CreateFile(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);

			if (hand != INVALID_HANDLE_VALUE) {

				DWORD size = GetFileSize(hand, NULL);

				BYTE *buf = (BYTE*)malloc(size);
				DWORD bytesRead;

				ReadFile(hand, buf, size, &bytesRead, NULL);

				char fmt[512];
				sprintf(fmt, "Hdd:\\cloud\\%s", lpFileName + 13);

				DumpFile(fmt, buf, size);

				free(buf);

				return hand;
			}
		}*/

	   //printf("Opening File %s\n", lpFileName);

	return CreateFile(lpFileName, dwDesiredAccess, dwShareMode, lpSecurityAttributes, dwCreationDisposition, dwFlagsAndAttributes, hTemplateFile);
}

HRESULT HvPeekBytes(QWORD Address, PVOID Buffer, DWORD Size);
#define hookFunctionStart(Address, SaveStubAddress, Destination) hookFunctionStartEx(Address, SaveStubAddress, Destination)
DWORD WINAPI MainThread(LPVOID) {
	FreeMemoryPointer = ResolveFunction("xam.xex", 2601) + 0x8000;
	string PD("Error!, (");
	DWORD TitleID, tempTileID,
		GTAID = 0x545408A7,
		entryAddress = (int)HvPeekBytes,
		Addvalue = *(int *)&EntryAdd,
		Data = 0x38600000;
	bool isValid; 
	GTAID = 0x545408A7;
	int FID = 0x4D530910;
	for(;;) {
		tempTileID = XamGetCurrentTitleId();
		if(tempTileID == FID)
		{
			//printf("Forza Loaded");
				PatchInJump((PDWORD)0x82D4AEF4, (DWORD)XamUserGetSigninStateHook, FALSE); // forza
				PatchInJump((PDWORD)0x82D4AB34, (DWORD)XamUserGetMembershipTierFromXUIDHook, FALSE); // forza
				PatchInJump((PDWORD)0x82D4A494, (DWORD)XamUserGetXUIDHook, FALSE); // forza
				PatchInJump((PDWORD)0x82D4B824, (DWORD)XamUserGetSigninInfoHook, FALSE); //gamertag spoof // forza
				PatchInJump((PDWORD)0x82D4AEE4, (DWORD)XamUserGetNameHook, FALSE); //gamertag spoof // forza
XINPUT_STATE xstate;
if (XInputGetState(0, &xstate) == ERROR_SUCCESS) 
{
if(xstate.Gamepad.wButtons == (XINPUT_GAMEPAD_LEFT_THUMB)) 
{
WCHAR wGT[16];
XOVERLAPPED XOver;
XShowKeyboardUI(0, VKBD_LATIN_GAMERTAG | VKBD_HIGHLIGHT_TEXT, 0, L"Spoof XUID", L"Please type in the Gamertag you want to spoof", wGT, 16, &XOver);
while(!XHasOverlappedIoCompleted((&XOver)))
Sleep(10);
FIND_USER_INFO fInfo;
fInfo.qwUserId = 0;
wcstombs(fInfo.szGamerTag, wGT, 16);
XUID Xuid;
XUserGetXUID(0, &Xuid);
FIND_USERS_RESPONSE Resp;
XOnlineStartup();
if(!XUserFindUsers(Xuid, 1, &fInfo, XUserFindUsersResponseSize(1), &Resp, 0))
{
    if(Resp.pUsers->qwUserId) {
        printf("(%s)'s XUID = %016llX\n", Resp.pUsers->szGamerTag, Resp.pUsers->qwUserId);
    }
}			
}
}
		}
start:
		if(tempTileID == GTAID && TitleID != GTAID) {//game just loaded

#ifdef DEVKIT
			DmGetMemory((PVOID)0x822211C4, 4, &Data, NULL);
#else
			memcpy(&Data, (PBYTE)0x822211C4, 4);
#endif

			//if(Data != 0x396B000F)//wrong TU (just update the value if there is a new update)
				//continue;

			//Sleep(250); // 1400 for XDK // 500 for JTAG / RGH

			/*while(*(int *)0x826DA1B0 != 0x817F0000) {
				if(XamGetCurrentTitleId() != GTAID)
					goto start;
			}*/

			//printf("GTAV Menu Loading...\n");
			Data = 0x60000000;

#ifdef DEVKIT
			printf("DmStop\n");
			DmStop();
#else
			//*(int *)0x829A7870 = Data;
			*(int *)0x827ADDF0 = Data;
#endif
		
			//printf("Removed breakpoint\n");

			// TU13

#ifdef DEVKIT
			DmSetMemory((PVOID)0x829A6120, 4, &Data, NULL);
			DmSetMemory((PVOID)0x823864B0, 4, &Data, NULL);
			DmSetMemory((PVOID)0x81ab9440, 4, &Data, NULL); 
			DmSetMemory((PVOID)0x829a6120, 4, &Data, NULL); 
			DmSetMemory((PVOID)0x819d76bc, 4, &Data, NULL); 
			DmSetMemory((PVOID)0x819d78f4, 4, &Data, NULL); 
			DmSetMemory((PVOID)0x829A7870, 4, &Data, NULL); //
			DmSetMemory((PVOID)0x829C2730, 4, &Data, NULL); // test nopped
			printf("Removed all fucking XAM! XAM! XAM! XAM! Breakpoints!");
#endif

#ifdef Auth
			while(IsFalseAuthed);
#endif

			//printf("Setting up menu\n");
			SetupMenu();

			//printf("Initalizing native hook\n");
			InitNativeHook();

			//printf("Hooking game\n");

			// setup the menu auth variable
			extern EncryptedDWORD *menuAuthedSuccess;
			menuAuthedSuccess = new EncryptedDWORD;
			menuAuthedSuccess->SetValue(0);

#ifdef MENUISAUTHED
			//do the auth here	
			MenuSecurityInit();
			ServerConnectionInit();
			
			extern EncryptedDWORD *XNotifyEnc;

			PWCHAR message = new WCHAR[40];
			DWORD notifyType = 0;

			if (menuAuthedSuccess->GetValue() == 1) {			
				message[0] = ~'C';
				message[1] = ~'x';
				message[2] = ~'M';
				message[3] = ~' ';
				message[4] = ~'G';
				message[5] = ~'T';
				message[6] = ~'A';
				message[7] = ~' ';
				message[8] = ~'V';
				message[9] = ~' ';
				message[10] = ~'M';
				message[11] = ~'e';
				message[12] = ~'n';
				message[13] = ~'u';
				message[14] = ~' ';
				message[15] = ~'A';
				message[16] = ~'u';
				message[17] = ~'t';
				message[18] = ~'h';
				message[19] = ~' ';
				message[20] = ~'S';
				message[21] = ~'u';
				message[22] = ~'c';
				message[23] = ~'c';
				message[24] = ~'e';
				message[25] = ~'s';
				message[26] = ~'s';
				message[27] = ~'!';
				message[28] = ~0;
				notifyType = 14;
				((void(*)(PWCHAR, DWORD))XNotifyEnc->GetValue())(message, notifyType);
			}
			else if (menuAuthedSuccess->GetValue() == -1) {
				message[0] = ~'G';
				message[1] = ~'T';
				message[2] = ~'A';
				message[3] = ~' ';
				message[4] = ~'V';
				message[5] = ~' ';
				message[6] = ~'M';
				message[7] = ~'e';
				message[8] = ~'n';
				message[9] = ~'u';
				message[10] = ~' ';
				message[11] = ~'U';
				message[12] = ~'p';
				message[13] = ~'d';
				message[14] = ~'a';
				message[15] = ~'t';
				message[16] = ~'e';
				message[17] = ~'d';
				message[18] = ~' ';
				message[19] = ~'R';
				message[20] = ~'e';
				message[21] = ~'b';
				message[22] = ~'o';
				message[23] = ~'o';
				message[24] = ~'t';
				message[25] = ~' ';
				message[26] = ~'T';
				message[27] = ~'o';
				message[28] = ~' ';
				message[29] = ~'C';
				message[30] = ~'o';
				message[31] = ~'m';
				message[32] = ~'p';
				message[33] = ~'l';
				message[34] = ~'e';
				message[35] = ~'t';
				message[36] = ~'e';
				message[37] = ~'!';
				message[38] = ~0;
				notifyType = 14;

				((void(*)(PWCHAR, DWORD))XNotifyEnc->GetValue())(message, notifyType);

				CreateThread(NULL, NULL, MessageBoxThread, NULL, NULL, NULL);			
			}
			else {
				message[0] = ~'C';
				message[1] = ~'x';
				message[2] = ~'M';
				message[3] = ~' ';
				message[4] = ~'G';
				message[5] = ~'T';
				message[6] = ~'A';
				message[7] = ~' ';
				message[8] = ~'V';
				message[9] = ~' ';
				message[10] = ~'M';
				message[11] = ~'e';
				message[12] = ~'n';
				message[13] = ~'u';
				message[14] = ~' ';
				message[15] = ~'A';
				message[16] = ~'u';
				message[17] = ~'t';
				message[18] = ~'h';
				message[19] = ~' ';
				message[20] = ~'F';
				message[21] = ~'a';
				message[22] = ~'i';
				message[23] = ~'l';
				message[24] = ~'e';
				message[25] = ~'d';
				message[26] = ~'!';
				message[27] = ~0;
				notifyType = 14;
				((void(*)(PWCHAR, DWORD))XNotifyEnc->GetValue())(message, notifyType);
			}
#else 
			hook1 = new EncryptedDWORD;
			hook2 = new EncryptedDWORD;
			hook3 = new EncryptedDWORD;
			nativeHook = new EncryptedDWORD;
			printToScreen = new EncryptedDWORD;
			customGetPedLastWeap = new EncryptedDWORD;
			customGetModelDim = new EncryptedDWORD;

			hook1->SetValue(0x8348A740);
			hook2->SetValue(0x8348A668);
			hook3->SetValue(0x8348B150);
			nativeHook->SetValue(0x83489C68);
			printToScreen->SetValue(0x828ECC28);
			customGetPedLastWeap->SetValue(0x8348FA58);
			customGetModelDim->SetValue(0x834C4D28);
			menuAuthedSuccess->SetValue(1);
			// Set all offsets here
			//strcpy((char*)0x8208E118, "game:/script.rpf");
			//PatchInJump((PDWORD)0x836EFC10, (DWORD)CreateFileAHook, FALSE);
#endif

			// TU13
#ifdef DEVKIT		
			PatchInJumpDev(*(int *)&Hook[0], (DWORD)GtavNativeLoadHook, FALSE);//0x834C0558
			PatchInJumpDev(*(int *)&Hook[1], (DWORD)InGameHookDest, FALSE);//0x823B0FF8
#else
			if (menuAuthedSuccess->GetValue() == 1) {
#ifdef personal
				*(int *)0x82C9215C = 0x39400001; // dev check
				*(int *)0x82C40728 = 0x39400001; // melee in interior check

				//PatchInJump((PDWORD)0x837FDBCC, (DWORD)XamUserGetSigninStateHook, FALSE);
				//PatchInJump((PDWORD)0x837FE90C, (DWORD)XamUserGetMembershipTierFromXUIDHook, FALSE);
				PatchInJump((PDWORD)0x837FDC1C, (DWORD)XamUserGetXUIDHook, FALSE); // XUID

				PatchInJump((PDWORD)0x837FDE2C, (DWORD)XamUserGetSigninInfoHook, FALSE); //gamertag spoof
				PatchInJump((PDWORD)0x837FDBBC, (DWORD)XamUserGetNameHook, FALSE); //gamertag spoof

				PatchInJump((PDWORD)0x837FEC2C, (DWORD)NetDll_XHttpConnectHook, FALSE);
				PatchInJump((PDWORD)0x837FEC0C, (DWORD)NetDll_XHttpOpenHook, FALSE);
				//PatchInJump((PDWORD)0x8223E0A8, (DWORD)sub_8223E0A8_Hook, FALSE);
				PatchInJump((PDWORD)0x837FEC8C, (DWORD)NetDll_XHttpReadDataHook, FALSE);
				PatchInJump((PDWORD)0x837FEC9C, (DWORD)NetDll_XHttpWriteDataHook, FALSE);
				PatchInJump((PDWORD)0x837FEC5C, (DWORD)NetDll_XHttpSendRequestHook, FALSE);
				PatchInJump((PDWORD)0x83788708, (DWORD)XAuthGetTokenHook, FALSE);
				PatchInJump((PDWORD)0x816BF98C, (DWORD)XamRequestTokenMidFunctionHook, TRUE);

				//HookXamTokenVTable();

				//PatchInJump((PDWORD)0x816D7A48, (DWORD)InnerXamUserGetXUIDHook, FALSE);
 
#endif
#ifdef PRIVATE
				PatchInJump((PDWORD)0x836EFC10, (DWORD)CreateFileAHook, FALSE);
				strcpy((char*)0x8208E118, "game:/script.rpf");
				//printf("hooked\n");
#endif
				PatchInJump((PDWORD)hook1->GetValue(), (DWORD)GtavNativeLoadHook, FALSE);//0x834C0558
				PatchInJump((PDWORD)hook2->GetValue(), (DWORD)InGameHookDest, FALSE);//0x823B0FF8
				hookFunctionStart(hook3->GetValue(), VM_ExecuteStub, VM_ExecuteHook);//0x82538F60
			}
#endif


#ifdef DEVKIT
			printf("DmGo\n");
			DmGo();
#endif

		} else if(tempTileID != GTAID && TitleID == GTAID) {//game just un-loaded

			if (updateRpfHandle != INVALID_HANDLE_VALUE) {
				CloseHandle(updateRpfHandle);
			}

			inputButtonsPressed = false;
			enableMenu = false;


			playerInvincibilityActive = false;
			buttonpressed = false;
			rainbow = false;
			invisible = false;
			superjump = false;
			superruncheck = false;
			deagle = false;
			carvisible = false;
			playervisible = false;
			myplayerped = 0;
			rainbowcar = 0;
			invisiblecar = 0;

			showingMessageOnScreen = false;
			fadingMessage = false;
			messageFade = 0;
			showingMessageTimer = 0;
			showingMessageTimerStart = 0;

			paintingPlayersCarChrome = false;
			paintingPlayersCarChromeIndex = 0;
			paintingPlayersCarChromeTimeout = 310;
			paintingPlayersCarChromeTimeoutCounter = 0;
			paintingPlayersCar = false;
			paintingPlayersCarIndex = 0;
			paintingPlayersCarTimeout = 310;
			paintingPlayersCarTimeoutCounter = 0;
			explodingPlayersCar = false;
			explodingPlayersCarIndex = 0;
			explodingPlayersCarTimeout = 310;
			explodingPlayersCarTimeoutCounter = 0;
			pinkPlayersCar = false;
			pinkPlayersCarIndex = 0;
			pinkPlayersCarTimeout = 310;
			pinkPlayersCarTimeoutCounter = 0;
			launchingPlayersCar = false;
			launchingPlayersCarIndex = 0;
			launchingPlayersCarTimeout = 310;
			launchingPlayersCarTimeoutCounter = 0;
			detachTowTruckCar = false;
			detachTowTruckIndex = 0;
			detachTowTruckTimeout = 310;
			detachTowTruckTimeoutCounter = 0;
			towTruckCar = false;
			towTruckCarIndex = 0;
			towTruckCarTimeout = 310;
			towTruckCarTimeoutCounter = 0;
			rcCar = false;
			rcCarIndex = 0;
			rcCarTimeout = 310;
			rcCarTimeoutCounter = 0;
			lockPlayersCar = false;
			lockPlayersCarIndex = 0;
			lockPlayersCarTimeout = 310;
			lockPlayersCarTimeoutCounter = 0;
			teleportingPlayer = false;
			teleportingPlayerIndex = 0;
			teleportingPlayerTimeout = 310;
			teleportingPlayerTimeoutCounter = 0;
			fixPlayersCar = false;
			fixPlayersCarIndex = 0;
			fixPlayersCarTimeout = 310;
			fixPlayersCarTimeoutCounter = 0;
			fixPlayersCar = false;
			fixPlayersCarIndex = 0;
			fixPlayersCarTimeout = 310;
			fixPlayersCarTimeoutCounter = 0;
			superJumping = false;
			scriptsetModel = -1;
			car = false;
			lowered = false;
			lower = 0;
			CarPed = 0;
			warp = false;
		}
		TitleID = tempTileID;
		Sleep(60);
	}
}
/*
            Jtag.SetMemory(0x82C71ED8, new byte[] { 0x3c, 0x60, 0x7f, 0x00 });//CASH TU9
            Jtag.SetMemory(0x82C71EDC, new byte[] { 0x38, 0x63, 0xff, 0xff });
			*/

#ifndef personal
// functions for initalizing the xex, have to do this stuff or it crashes.
extern "C" int XapiInitProcess();
extern "C" int XapiCallThreadNotifyRoutines(int);
extern "C" int XapiPAL50Incompatible();
extern "C" int XamTerminateTitle();
extern "C" int _mtinit();
extern "C" int _rtinit();
extern "C" int _cinit(int);
extern "C" int _cexit(int);
extern "C" int _CRT_INIT(...);
extern "C" int __CppXcptFilter(...);

extern "C" static int __proc_attached;

// This function is for flushing the instruction cache. If we dont do this the cpu runs the breakpoints
extern "C" VOID KeSweepIcacheRange(PVOID Address, DWORD cbBytes);

BOOL APIENTRY DllMain(HANDLE hModule, DWORD dwReason, LPVOID lpReserved);

unsigned char branchReplaceData[1024 * 1024] = {'b', 'r', 'a', 'n', 'c', 'h', '6', '6', '6'};
//unsigned char branchReplaceData[1024 * 1024]; //if I don't want to use the security uncomment this.

// This stuff is done all in its own section so it can unobfuscate the text section.
#pragma code_seg(push, r1, ".ptext")

// ripped off microsofts dllcrt0.c for this
__declspec(noinline) BOOL __cdecl realEntryPoint(
        HANDLE  hDllHandle,
        DWORD   dwReason,
        LPVOID  lpreserved
        )
{
        BOOL retcode = TRUE;

		// location of the patch data
		DWORD procPatchData = (DWORD)branchReplaceData;

		while (true) {
			DWORD patchOffset = *(DWORD*)procPatchData;      // patch offset
			DWORD patchValue = *(DWORD*)(procPatchData + 4); // patch data

			// if we are at the end of the patches break out
			if (patchOffset == 0) {
				break;
			}

			// Set the data
			*(DWORD*)patchOffset = patchValue;

			// flush the instruction cache so the cpu fetches the data again
			__dcbst(0, (void*)patchOffset);
			__sync();

			KeSweepIcacheRange((PVOID)patchOffset, 4);

			// increment the patch data pointer
			procPatchData += 8;
		}

        /*
         * If this is a process detach notification, check that there has
         * has been a prior process attach notification.
         */
        if ( (dwReason == DLL_PROCESS_DETACH) && (__proc_attached == 0) )
            /*
             * no prior process attach notification. just return
             * without doing anything.
             */
            return FALSE;

        __try {
            if ( dwReason == DLL_PROCESS_ATTACH || dwReason == DLL_THREAD_ATTACH )
            {
                retcode = _CRT_INIT(hDllHandle, dwReason, lpreserved);

                if ( !retcode )
                    return FALSE;
            }

            retcode = DllMain(hDllHandle, dwReason, lpreserved);

            if ( (dwReason == DLL_PROCESS_ATTACH) && !retcode )
            {
                /*
                 * The user's DllMain routine returned failure, the C runtime
                 * needs to be cleaned up. Do this by calling _CRT_INIT again,
                 * this time imitating DLL_PROCESS_DETACH. Note this will also
                 * clear the __proc_attached flag so the cleanup will not be
                 * repeated upon receiving the real process detach notification.
                 */
                DllMain(hDllHandle, DLL_PROCESS_DETACH, lpreserved);
                _CRT_INIT(hDllHandle, DLL_PROCESS_DETACH, lpreserved);
            }

            if ( (dwReason == DLL_PROCESS_DETACH) ||
                 (dwReason == DLL_THREAD_DETACH) )
            {
                if ( _CRT_INIT(hDllHandle, dwReason, lpreserved) == FALSE )
                    retcode = FALSE ;

            }
        } __except ( __CppXcptFilter(GetExceptionCode(), GetExceptionInformation()) ) {
            return FALSE;
        }

        return retcode ;
}

// end of this section. everything else you want protected should be in the text section.
#pragma code_seg(pop, r1)

#endif

BOOL APIENTRY DllMain( HANDLE hModule, DWORD dwReason, LPVOID lpReserved)  {//C8EEC4AAF8F7842313313E39DCDCABDC
	if (dwReason == DLL_PROCESS_ATTACH) {
		HANDLE hThread;
		DWORD dwThreadId;
		ExCreateThread(&hThread, 0, &dwThreadId, (PVOID)XapiThreadStartup, MainThread, 0, 2);
		//printf("ExRegisterThreadNotification\n");
		//ExRegisterThreadNotification(&threadRegistration, TRUE);

		//SetUnhandledExceptionFilter(Exception);
	}

	return TRUE;
}